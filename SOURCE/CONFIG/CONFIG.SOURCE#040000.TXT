                     1    ********************************
                     2    *                              *
                     3    *  GBBS Pro - Config Program   *
                     4    *                              *
                     5    ********************************
                                   28-FEB-23   8:12:41 PM
                     7    ********************************
                     8    
                     9             rel              
                     10            dsk   rel/config 
                     11   
                     12   * lst off
                     14            put   equates    
                    >1    ********************************
                    >2    *                              *
                    >3    *   Config Program - Equates   *
                    >4    *                              *
                    >5    ********************************
                    >6    
                    >7    *-------------------------------
                    >8    * Date: 3/11/88
                    >9    *-------------------------------
                    >10   
            =0008   >11   bs       equ   $08        
            =000A   >12   lf       equ   $0a        
            =000B   >13   up       equ   $0b        
            =000D   >14   cr       equ   $0d        
            =0015   >15   fs       equ   $15        
            =0018   >16   can      equ   $18        
            =001B   >17   esc      equ   $1b        
            =007F   >18   del      equ   $7f        
                    >19   
                    >20                             ; memory allocation / buffers
                    >21   
            =0200   >22   lnbuf    equ   $0200      
            =0300   >23   flname   equ   $0300      
            =0301   >24   fltext   equ   $0301      
            =03F2   >25   reset    equ   $03f2      
            =0800   >26   confbuf  equ   $0800      
            =0805   >27   filter   equ   $0805      
            =0815   >28   devnam   equ   $0815      
            =0900   >29   viddrv   equ   $0900      
            =0C00   >30   prdrv    equ   $0c00      
            =0D00   >31   clkdrv   equ   $0d00      
            =0E00   >32   mdmdrv   equ   $0e00      
            =11BF   >33   cdbyte   equ   $11bf      
            =11C0   >34   ansstr   equ   $11c0      
            =11D0   >35   initstr  equ   $11d0      
            =1200   >36   hdrbuf   equ   $1200      
                    >37   
            =1FFD   >38   cdtype   equ   $1ffd      
            =1FFE   >39   modemtype equ  $1ffe      
            =1FFF   >40   serialtype equ $1fff      
                    >41   
            =BF00   >42   mli      equ   $bf00      
                    >43   
            =1800   >44   initbuf  equ   $1800      
            =1830   >45   ansbuf   equ   $1830      
            =1C00   >46   fbuf1    equ   $1c00      
            =1E00   >47   fnam1    equ   $1e00      
                    >48   
            =8000   >49   sortbuf  equ   $8000      
            =6000   >50   copybuf  equ   $6000      
            =5800   >51   copymax  equ   $5800      
                    >52                             ; zero page usage
                    >53   
            =0000   >54   temp     equ   $00        
            =0002   >55   temp2    equ   $02        
            =0004   >56   temp3    equ   $04        
            =0006   >57   temp4    equ   $06        
            =0009   >58   x_save   equ   $09        
            =000A   >59   y_save   equ   $0a        
            =000B   >60   chrptr   equ   $0b        
            =000D   >61   base     equ   $0d        
            =000F   >62   maxlen   equ   $0f        
            =0010   >63   inverse  equ   $10        
            =0011   >64   point0   equ   $11        
            =0014   >65   point1   equ   $14        
            =0016   >66   prn      equ   $16        ; [4 bytes]
            =001A   >67   numptr   equ   $1a        
            =001C   >68   psave    equ   $1c        
            =001E   >69   prnt     equ   $1e        
                    >70   
            =0024   >71   ch       equ   $24        
            =0025   >72   cv       equ   $25        
                    >73   
            =0060   >74   fmparm   equ   $60        
            =0062   >75   doszero  equ   $62        
            =0064   >76   dosptr   equ   $64        
            =0066   >77   part     equ   $66        
            =0068   >78   dosbyt   equ   $68        
                    >79   
            =00FD   >80   point3   equ   $fd        
                    >81   
                    >82   
                     15            put   start      
                    >1    ********************************
                    >2    *                              *
                    >3    *    Config Program - Start    *
                    >4    *                              *
                    >5    ********************************
                    >6    
                    >7    *-------------------------------
                    >8    * Date: 5/29/91
                    >9    *-------------------------------
                    >10   
008000: 8D 51 C0    >11   begin    sta   $c051      ;text mode
008003: 8D 0E C0    >12            sta   $c00e      ;Turn MouseText off
008006: 2C 82 C0    >13            bit   $c082      
                    >14   
008009: A9 82       >15            lda   #<do_quit  ;fudge reset vector
00800B: 8D F2 03    >16            sta   reset      
00800E: A9 B2       >17            lda   #>do_quit  
008010: 8D F3 03    >18            sta   reset+1    
008013: 49 A5       >19            eor   #$a5       
008015: 8D F4 03    >20            sta   reset+2    
                    >21   
008018: A2 F0       >22            ldx   #$f0       ;reset stack
00801A: 9A          >23            txs              
                    >24   
                    >25   * new shit
                    >26   
                    >27   * jsr mli ; get current prefix
                    >28   * db $c7 ; stuff it into conpfx
                    >29   * dw p_pfx2
                    >30   
                    >31   * jsr $fc58
                    >32   
                    >33   * ldy conpfx
                    >34   * ldx #0
                    >35   *:loop  ;print the prefix
                    >36   * inx
                    >37   * lda conpfx,x
                    >38   * ora #%10000000
                    >39   * jsr cout
                    >40   * dey
                    >41   * bne :loop
                    >42   
                    >43   * jsr getg
                    >44   * jsr $fc58
                    >45   
                    >46   * ldx #<conpfx ; get info on volume
                    >47   * lda #>conpfx
                    >48   * stx p_ginfo+1
                    >49   * sta p_ginfo+2
                    >50   * lda #10
                    >51   * sta p_ginfo
                    >52   
                    >53   * jsr mli
                    >54   * db $c4
                    >55   * dw p_ginfo
                    >56   
                    >57   * lda p_ginfo+6 ; get high byte of total blocks
                    >58   * sta srcblocks
                    >59   
                    >60   * lda srcblocks
                    >61   
                    >62   * cmp #2
                    >63   * bcc paul
                    >64   * lda #"B"
                    >65   * jsr cout
                    >66   * rts
                    >67   
                    >68   *paul lda #"S"
                    >69   * jsr cout
                    >70   * rts
                    >71   
                    >72   * end new shit
                    >73   
                    >74   
00801B: 20 77 8A    >75            jsr   findcon    ;find the config disk,logit
                    >76   
00801E: 20 2C 8E    >77            jsr   VideoStartup ; Init the video driver
008021: 20 38 82    >78            jsr   do_main    
                    >79   
                    >80   * jmp loadg ;force to reconfig
                    >81   
008024: 20 3A 8E    >82            jsr   cls        ; clear screen
008027: 20 9E 82    >83            jsr   print      
00802A: 01 07 00    >84            db    1,7,0      
00802D: 57 68 65 6E >85            asc   'When  you do an  initial configure, all',0d 
008031: 20 20 79 6F 75 20 64 6F 
008039: 20 61 6E 20 20 69 6E 69 
008041: 74 69 61 6C 20 63 6F 6E 
008049: 66 69 67 75 72 65 2C 20 
008051: 61 6C 6C 0D 
008055: 70 72 65 76 >86            asc   'previous  data  will be  destroyed  and',0d 
008059: 69 6F 75 73 20 20 64 61 
008061: 74 61 20 20 77 69 6C 6C 
008069: 20 62 65 20 20 64 65 73 
008071: 74 72 6F 79 65 64 20 20 
008079: 61 6E 64 0D 
00807D: 72 65 70 6C >87            asc   'replaced with the new configuration.',0d,0d,0d,00 
008081: 61 63 65 64 20 77 69 74 
008089: 68 20 74 68 65 20 6E 65 
008091: 77 20 63 6F 6E 66 69 67 
008099: 75 72 61 74 69 6F 6E 2E 
0080A1: 0D 0D 0D 00 
                    >88   
0080A5: 20 9E 82    >89            jsr   print      
0080A8: 20 20 20 20 >90            asc   '       ALL OLD DATA WILL BE LOST!',0d,0d,0d,00 
0080AC: 20 20 20 41 4C 4C 20 4F 
0080B4: 4C 44 20 44 41 54 41 20 
0080BC: 57 49 4C 4C 20 42 45 20 
0080C4: 4C 4F 53 54 21 0D 0D 0D 
0080CC: 00 
                    >91   
0080CD: 20 9E 82    >92            jsr   print      
0080D0: 44 6F 20 79 >93            asc   'Do you want to do an Initial',0d 
0080D4: 6F 75 20 77 61 6E 74 20 
0080DC: 74 6F 20 64 6F 20 61 6E 
0080E4: 20 49 6E 69 74 69 61 6C 
0080EC: 0D 
0080ED: 43 6F 6E 66 >94            asc   'Configure [Y/N] ? ',00 
0080F1: 69 67 75 72 65 20 5B 59 
0080F9: 2F 4E 5D 20 3F 20 00 
008100: 20 10 84    >95            jsr   inpyn      ; input yes/no
                    >96   
008103: B0 07 =810C >97            bcs   loadg      
008105: 20 17 87    >98            jsr   ldacos     ; load in acos file
008108: 4C B6 9D    >99            jmp   doinit     ; do initial config
                    >100  
00810B: 00          >101  srcblocks db   0          
                    >102  
                    >103  *-------------------------------
                    >104  
00810C: 20 D3 88    >105  loadg    jsr   ldconfg    ; load config segment
                    >106  
00810F: A9 00       >107  start    lda   #0         ; turn off escape handler
008111: 8D 51 87    >108           sta   refnum     
008114: 20 18 86    >109           jsr   escape     
008117: 20 7E 87    >110           jsr   close      ; close all files
00811A: 20 68 89    >111           jsr   logcon     
                    >112  
00811D: 20 38 82    >113           jsr   do_main    
                    >114  
008120: 20 3A 8E    >115           jsr   cls        ; clear screen
008123: 20 9E 82    >116           jsr   print      
008126: 53 65 6C 65 >117           asc   'Select an Option:',0d,0d 
00812A: 63 74 20 61 6E 20 4F 70 
008132: 74 69 6F 6E 3A 0D 0D 
008139: 20 20 20 20 >118           asc   '     1 - Reconfigure Modem',0d 
00813D: 20 31 20 2D 20 52 65 63 
008145: 6F 6E 66 69 67 75 72 65 
00814D: 20 4D 6F 64 65 6D 0D 
008154: 20 20 20 20 >119           asc   '     2 - Reconfigure Video',0d 
008158: 20 32 20 2D 20 52 65 63 
008160: 6F 6E 66 69 67 75 72 65 
008168: 20 56 69 64 65 6F 0D 
00816F: 20 20 20 20 >120           asc   '     3 - Reconfigure Printer',0d 
008173: 20 33 20 2D 20 52 65 63 
00817B: 6F 6E 66 69 67 75 72 65 
008183: 20 50 72 69 6E 74 65 72 
00818B: 0D 
00818C: 20 20 20 20 >121           asc   '     4 - Reconfigure Clock',0d 
008190: 20 34 20 2D 20 52 65 63 
008198: 6F 6E 66 69 67 75 72 65 
0081A0: 20 43 6C 6F 63 6B 0D 
0081A7: 20 20 20 20 >122           asc   '     5 - Reconfigure Storage',0d 
0081AB: 20 35 20 2D 20 52 65 63 
0081B3: 6F 6E 66 69 67 75 72 65 
0081BB: 20 53 74 6F 72 61 67 65 
0081C3: 0D 
0081C4: 20 20 20 20 >123           asc   '     6 - Edit Profanity Filter',0d 
0081C8: 20 36 20 2D 20 45 64 69 
0081D0: 74 20 50 72 6F 66 61 6E 
0081D8: 69 74 79 20 46 69 6C 74 
0081E0: 65 72 0D 
                    >124  * asc '  7 - Edit Bulletin Board Info',0d
                    >125  * asc '  8 - Sort and Print Userlist',0d
                    >126  * asc '  9 - Purge Users From System',0d
0081E3: 20 20 20 20 >127           asc   '     7 - Exit Configure',0d,0d 
0081E7: 20 37 20 2D 20 45 78 69 
0081EF: 74 20 43 6F 6E 66 69 67 
0081F7: 75 72 65 0D 0D 
                    >128  
0081FC: 57 68 69 63 >129           asc   'Which? [1-7] ',00 
008200: 68 3F 20 5B 31 2D 37 5D 
008208: 20 00 
                    >130  
00820A: A2 07       >131           ldx   #7         ; get a number [1-7]
00820C: 20 B0 83    >132           jsr   inpnum     
                    >133  
00820F: 48          >134           pha              
008210: A2 0F       >135           ldx   #<start    
008212: A9 81       >136           lda   #>start    
008214: 20 18 86    >137           jsr   escape     ;esc goes back to here
008217: 68          >138           pla              
008218: 0A          >139           asl   a          
008219: AA          >140           tax              
                    >141  
00821A: BD 28 82    >142           lda   jumptable,x 
00821D: 85 16       >143           sta   prn        
00821F: E8          >144           inx              ;push low
008220: BD 28 82    >145           lda   jumptable,x 
008223: 85 17       >146           sta   prn+1      
008225: 6C 16 00    >147           jmp   (prn)      
                    >148  
008228: 00 00       >149  jumptable dw   0          
00822A: 7F 8F       >150           da    re_mdm     
00822C: 8C 97       >151           da    re_vid     
00822E: AD 9B       >152           da    re_pr      
008230: 25 99       >153           da    re_clk     
008232: 9A B2       >154           da    re_stor    
008234: 52 B0       >155           da    do_filt    
                    >156  * da brdedit
                    >157  * da usrlist
                    >158  * da usrkill
008236: 82 B2       >159           da    do_quit    
                    >160  
                    >161  *-------------------------------
                    >162  * print the top box
                    >163  
008238: 20 84 8E    >164  do_main  jsr   TopBox     
00823B: 20 9E 82    >165           jsr   print      
00823E: 01 02 03    >166           db    1,2,3      
008241: 47 42 42 53 >167           asc   'GBBS Config Program - Version 2.3',00 
008245: 20 43 6F 6E 66 69 67 20 
00824D: 50 72 6F 67 72 61 6D 20 
008255: 2D 20 56 65 72 73 69 6F 
00825D: 6E 20 32 2E 33 00 
008263: 20 9E 82    >168           jsr   print      
008266: 01 04 02    >169           db    1,4,2      
008269: 43 6F 70 79 >170           asc   'Copyright 1986-2023 Kevin Smallwood',00 
00826D: 72 69 67 68 74 20 31 39 
008275: 38 36 2D 32 30 32 33 20 
00827D: 4B 65 76 69 6E 20 53 6D 
008285: 61 6C 6C 77 6F 6F 64 00 
00828D: 60          >171           rts              
                    >172  
                    >173  *-------------------------------
                    >174  
00828E: 00          >175  init     db    0          
                    >176  
00828F: 05          >177  usrname  db    5          
008290: 55 53 45 52 >178           asc   'USERS'    
008294: 53 
008295: 08          >179  gname    db    8          
008296: 41 43 4F 53 >180           asc   'ACOS.OBJ' 
00829A: 2E 4F 42 4A 
                     16            put   routine    
                    >1    ********************************
                    >2    *                              *
                    >3    *   Config Program - Routine   *
                    >4    *                              *
                    >5    ********************************
                    >6    
                    >7    *-------------------------------
                    >8    * Date: 3/11/88
                    >9    *-------------------------------
                    >10   
                    >11   
                    >12   *-------------------------------
                    >13   * print a line of text
                    >14   *-------------------------------
                    >15   
00829E: 85 1C       >16   print    sta   psave      ; save all reg's
0082A0: 84 1D       >17            sty   psave+1    
0082A2: 68          >18            pla              
0082A3: 85 1E       >19            sta   prnt       ; point to address of data
0082A5: 68          >20            pla              
0082A6: 85 1F       >21            sta   prnt+1     
                    >22   
0082A8: E6 1E       >23   print2   inc   prnt       ; inc address
0082AA: D0 02 =82AE >24            bne   print3     
0082AC: E6 1F       >25            inc   prnt+1     
                    >26   
0082AE: A0 00       >27   print3   ldy   #0         
0082B0: B1 1E       >28            lda   (prnt),y   ; get data
0082B2: C9 01       >29            cmp   #1         
0082B4: D0 10 =82C6 >30            bne   pr3a       
                    >31   
0082B6: 20 D7 82    >32   pr3v     jsr   gettmp     
0082B9: 20 D7 82    >33            jsr   gettmp     ; get horiz/vert address
0082BC: 85 25       >34            sta   cv         
0082BE: 20 D7 82    >35            jsr   gettmp     
0082C1: 85 24       >36            sta   ch         
0082C3: 4C AE 82    >37            jmp   print3     
                    >38   
0082C6: 48          >39   pr3a     pha              
0082C7: 20 08 8F    >40            jsr   cout       ; display it
0082CA: 68          >41            pla              
0082CB: D0 DB =82A8 >42            bne   print2     ; keep going
                    >43   
0082CD: 20 D7 82    >44            jsr   gettmp     
0082D0: A5 1C       >45            lda   psave      
0082D2: A4 1D       >46            ldy   psave+1    
0082D4: 6C 1E 00    >47            jmp   (prnt)     
                    >48   
                    >49   *-------------------------------
                    >50   * get a byte from temp and advance pointers
                    >51   *-------------------------------
                    >52   
0082D7: A0 00       >53   gettmp   ldy   #0         
0082D9: B1 1E       >54            lda   (prnt),y   
0082DB: E6 1E       >55            inc   prnt       
0082DD: D0 02 =82E1 >56            bne   gettmp2    
0082DF: E6 1F       >57            inc   prnt+1     
0082E1: 60          >58   gettmp2  rts              
                    >59   
                    >60   *-------------------------------
                    >61   * put a cursor, get a key, remove cursor, return
                    >62   *-------------------------------
                    >63   
0082E2: 86 09       >64   rdkey    stx   x_save     ; save x & y
0082E4: 84 0A       >65            sty   y_save     
0082E6: A9 5F       >66            lda   #$5f       
0082E8: 20 E7 8E    >67            jsr   plotchr    ; bypass cout for speed
                    >68   
0082EB: AD 00 C0    >69   rdkey2   lda   $c000      ; check for a key
0082EE: 10 FB =82EB >70            bpl   rdkey2     
0082F0: 8D 10 C0    >71            sta   $c010      ; reset flag
0082F3: 29 7F       >72            and   #$7f       
0082F5: C9 01       >73            cmp   #1         ; case toggle?
0082F7: D0 0B =8304 >74            bne   rdkey3     ; nope
                    >75   
0082F9: AD 3B 83    >76            lda   caseflg    
0082FC: 49 FF       >77            eor   #$ff       ; toggle case flag
0082FE: 8D 3B 83    >78            sta   caseflg    
008301: 4C EB 82    >79            jmp   rdkey2     ; get another key
                    >80   
008304: C9 0B       >81   rdkey3   cmp   #'K'-$40   ; ctrl-k ?
008306: D0 02 =830A >82            bne   rdkey4     ; nope
008308: A9 5B       >83            lda   #'['       ; translate (backbracket)
                    >84   
00830A: C9 0C       >85   rdkey4   cmp   #'L'-$40   ; ctrl-l ?
00830C: D0 02 =8310 >86            bne   rdkey5     ; nope
00830E: A9 5C       >87            lda   #'\'       ; translate (backslash)
                    >88   
008310: C9 0F       >89   rdkey5   cmp   #'O'-$40   ; ctrl-o ?
008312: D0 02 =8316 >90            bne   rdkey6     ; nope
008314: A9 DF       >91            lda   #$df       ; translate (underscrore)
                    >92   
008316: 2C 3B 83    >93   rdkey6   bit   caseflg    ; change case?
008319: 10 0B =8326 >94            bpl   rdkey7     ; nope
                    >95   
00831B: C9 40       >96            cmp   #'@'       ; control or special?
00831D: 90 07 =8326 >97            bcc   rdkey7     ; yep
                    >98   
00831F: C9 5B       >99            cmp   #$5B       ; out of range? (real lower case)
008321: B0 03 =8326 >100           bcs   rdkey7     ; yep
                    >101  
008323: 18          >102           clc              ; put into lower group
008324: 69 20       >103           adc   #$20       
                    >104  
008326: 8D 30 C0    >105  rdkey7   sta   $c030      
008329: 8D 30 C0    >106           sta   $c030      ; audio feedback
                    >107  
00832C: 48          >108           pha              
00832D: A9 20       >109           lda   #' '       ; remove cursor
00832F: 20 E7 8E    >110           jsr   plotchr    
008332: 68          >111           pla              
008333: A6 09       >112           ldx   x_save     
008335: A4 0A       >113           ldy   y_save     
008337: 20 2F 86    >114           jsr   escape3    ; check for escape
00833A: 60          >115           rts              
                    >116  
00833B: 00          >117  caseflg  db    0          
                    >118  
                    >119  *-------------------------------
                    >120  * get a line of input
                    >121  *-------------------------------
                    >122  
00833C: A0 00       >123  inpln    ldy   #0         ; start at first byte
00833E: 20 E2 82    >124  inpln1   jsr   rdkey      ; get data
008341: C9 0D       >125  inpln1a  cmp   #cr        ; return
008343: F0 4A =838F >126           beq   inpln6     
008345: C9 08       >127           cmp   #bs        ; back space
008347: F0 08 =8351 >128           beq   inpln2     
008349: C9 18       >129           cmp   #can       ; ctrl-x / cancel
00834B: F0 04 =8351 >130           beq   inpln2     
00834D: C9 7F       >131           cmp   #del       ; delete
00834F: D0 10 =8361 >132           bne   inpln3     
                    >133  
008351: C0 00       >134  inpln2   cpy   #0         ; can we back up?
008353: F0 E9 =833E >135           beq   inpln1     ; nope
                    >136  
008355: 48          >137           pha              
008356: 20 01 84    >138           jsr   prbs       ; backspace w/delete
008359: 88          >139           dey              ; decrease line count
00835A: 68          >140           pla              
00835B: C9 18       >141           cmp   #can       ; if its a cancel
00835D: F0 F2 =8351 >142           beq   inpln2     ; keep going
00835F: D0 DD =833E >143           bne   inpln1     
                    >144  
008361: C9 20       >145  inpln3   cmp   #' '       ; if its a control char...
008363: 90 D9 =833E >146           bcc   inpln1     
                    >147  
008365: C4 0F       >148           cpy   maxlen     ; check for max length
008367: D0 03 =836C >149           bne   inpln4     
008369: 4C 3E 83    >150           jmp   inpln1     
                    >151  
00836C: 2C AF 83    >152  inpln4   bit   inpmode    ; do we convert?
00836F: 10 03 =8374 >153           bpl   inpln4a    ; nope
                    >154  
008371: 20 3A 84    >155           jsr   conv       ; convert to upper
                    >156  
008374: 2C AF 83    >157  inpln4a  bit   inpmode    ; check the inpmode
008377: 50 0C =8385 >158           bvc   inpln5     
                    >159  
008379: C9 2C       >160           cmp   #','       ; dont accept a comma
00837B: F0 C1 =833E >161           beq   inpln1     
00837D: C9 20       >162           cmp   #' '       
00837F: D0 04 =8385 >163           bne   inpln5     ; dont accept a space
008381: C0 00       >164           cpy   #0         ; for first char of the line
008383: F0 B9 =833E >165           beq   inpln1     
                    >166  
008385: 99 00 02    >167  inpln5   sta   lnbuf,y    ; save char
008388: C8          >168           iny              
008389: 20 08 8F    >169           jsr   cout       ; print it
00838C: 4C 3E 83    >170           jmp   inpln1     ; loop
                    >171  
00838F: A9 0D       >172  inpln6   lda   #cr        
008391: 99 00 02    >173           sta   lnbuf,y    ; save the return
008394: C0 00       >174           cpy   #0         ; was is just a return?
008396: D0 0A =83A2 >175           bne   inpln7     ; nope
                    >176  
008398: AD AF 83    >177           lda   inpmode    ; can we accept a blank line?
00839B: 29 20       >178           and   #$20       
00839D: D0 03 =83A2 >179           bne   inpln7     ; yep
                    >180  
00839F: 4C 3C 83    >181           jmp   inpln      ; dont take, cr, start over
                    >182  
0083A2: AD AF 83    >183  inpln7   lda   inpmode    ; do cr?
0083A5: 29 10       >184           and   #$10       
0083A7: D0 05 =83AE >185           bne   inpln8     ; nope
                    >186  
0083A9: A9 0D       >187           lda   #cr        
0083AB: 4C 08 8F    >188           jmp   cout       ; print the return and exit
                    >189  
0083AE: 60          >190  inpln8   rts              
                    >191  
                    >192  
0083AF: 00          >193  inpmode  db    %00000000  
                    >194  
                    >195  *-------------------------------
                    >196  * input a number in the range [1-x] where x={1-99}
                    >197  *-------------------------------
                    >198  
0083B0: 8E 00 84    >199  inpnum   stx   maxnum     ; save maximum number
0083B3: A9 02       >200           lda   #2         
0083B5: 85 0F       >201           sta   maxlen     ; set length at 2
0083B7: A5 24       >202           lda   ch         
0083B9: 85 1F       >203           sta   prnt+1     ; record currnt horiz offset
0083BB: A9 10       >204           lda   #%00010000 
0083BD: 8D AF 83    >205           sta   inpmode    ; use input mode 0
                    >206  
0083C0: 20 3C 83    >207  inpnum2  jsr   inpln      ; get line
0083C3: A9 00       >208           lda   #0         
0083C5: 85 1E       >209           sta   prnt       ; make number init to 0
                    >210  
0083C7: AD 00 02    >211           lda   lnbuf      ; get data
0083CA: 38          >212           sec              
0083CB: E9 30       >213           sbc   #'0'       
0083CD: C9 0A       >214           cmp   #10        ; in range?
0083CF: B0 17 =83E8 >215           bcs   inpnum5    ; nope, we are done
                    >216  
0083D1: 85 1E       >217           sta   prnt       ; update total
                    >218  
0083D3: AD 01 02    >219           lda   lnbuf+1    ; get more data
0083D6: 38          >220           sec              
0083D7: E9 30       >221           sbc   #'0'       
0083D9: C9 0A       >222           cmp   #10        ; in range?
0083DB: B0 0B =83E8 >223           bcs   inpnum5    ; nope
                    >224  
0083DD: C6 1E       >225  inpnum3  dec   prnt       ; count down 10's
0083DF: 30 05 =83E6 >226           bmi   inpnum4    
                    >227  
0083E1: 18          >228           clc              
0083E2: 69 0A       >229           adc   #10        ; add 10 and loop
0083E4: 90 F7 =83DD >230           bcc   inpnum3    
                    >231  
0083E6: 85 1E       >232  inpnum4  sta   prnt       ; save new total
0083E8: A5 1E       >233  inpnum5  lda   prnt       
0083EA: F0 07 =83F3 >234           beq   inpnum7    ; opps, problem
                    >235  
0083EC: CD 00 84    >236           cmp   maxnum     ; is it in range?
0083EF: 90 0E =83FF >237           bcc   inpnum8    
0083F1: F0 0C =83FF >238           beq   inpnum8    ; all is well!
                    >239  
0083F3: A5 24       >240  inpnum7  lda   ch         
0083F5: C5 1F       >241           cmp   prnt+1     ; at original spot?
0083F7: F0 C7 =83C0 >242           beq   inpnum2    ; yep
                    >243  
0083F9: 20 01 84    >244           jsr   prbs       ; backup
0083FC: 4C F3 83    >245           jmp   inpnum7    
                    >246  
0083FF: 60          >247  inpnum8  rts              
                    >248  
008400: 00          >249  maxnum   db    0          
                    >250  
                    >251  *-------------------------------
                    >252  * print a backspace
                    >253  *-------------------------------
                    >254  
008401: A9 08       >255  prbs     lda   #bs        ; do a backspace w/delete
008403: 20 08 8F    >256           jsr   cout       
008406: A9 20       >257           lda   #' '       
008408: 20 08 8F    >258           jsr   cout       
00840B: A9 08       >259           lda   #bs        
00840D: 4C 08 8F    >260           jmp   cout       
                    >261  
                    >262  *-------------------------------
                    >263  * input a 'y' or a 'n' for a yes/no situation
                    >264  *-------------------------------
                    >265  
008410: A9 01       >266  inpyn    lda   #1         ; max length 1
008412: 85 0F       >267           sta   maxlen     
008414: A5 24       >268           lda   ch         ; save horiz position
008416: 85 01       >269           sta   temp+1     
008418: A9 90       >270           lda   #%10010000 
00841A: 8D AF 83    >271           sta   inpmode    
                    >272  
00841D: 20 3C 83    >273  inpyn2   jsr   inpln      ; get the line
008420: AD 00 02    >274           lda   lnbuf      
008423: C9 59       >275           cmp   #'Y'       ; did they say 'YES' ?
008425: 18          >276           clc              
008426: F0 11 =8439 >277           beq   inpyn3     ; yep
                    >278  
008428: C9 4E       >279           cmp   #'N'       ; did they say 'NO' ?
00842A: 38          >280           sec              
00842B: F0 0C =8439 >281           beq   inpyn3     ; yep
                    >282  
00842D: A5 24       >283           lda   ch         
00842F: C5 01       >284           cmp   temp+1     ; are they the same?
008431: F0 EA =841D >285           beq   inpyn2     
                    >286  
008433: 20 01 84    >287           jsr   prbs       ; backup
008436: 4C 1D 84    >288           jmp   inpyn2     
                    >289  
008439: 60          >290  inpyn3   rts              
                    >291  
                    >292  *-------------------------------
                    >293  * convert a character to uppercase
                    >294  *-------------------------------
                    >295  
00843A: 29 7F       >296  conv     and   #$7f       ; strip high
00843C: C9 61       >297           cmp   #'a'       ; below 'a'?
00843E: 90 06 =8446 >298           bcc   conv2      ; yep
                    >299  
008440: C9 7B       >300           cmp   #'z'+1     ; above 'z'?
008442: B0 02 =8446 >301           bcs   conv2      ; yep
                    >302  
008444: E9 1F       >303           sbc   #$1f       ; use clear carry for sbc $20
008446: 60          >304  conv2    rts              
                    >305  
                    >306  *-------------------------------
                    >307  
008447: 86 00       >308  copyinp  stx   temp       ; point to dest
008449: 85 01       >309           sta   temp+1     
00844B: 98          >310           tya              
00844C: 48          >311           pha              ; save ending byte
                    >312  
00844D: A2 00       >313           ldx   #0         ; start offsets
00844F: A0 00       >314           ldy   #0         
008451: BD 00 02    >315  copyin2  lda   lnbuf,x    ; get byte
008454: E8          >316           inx              
008455: C9 0D       >317           cmp   #cr        ; we done?
008457: F0 0A =8463 >318           beq   copyin3    ; yep
                    >319  
008459: 91 00       >320           sta   (temp),y   ; copy and inc pointers
00845B: E6 00       >321           inc   temp       
00845D: D0 F2 =8451 >322           bne   copyin2    
00845F: E6 01       >323           inc   temp+1     
008461: D0 EE =8451 >324           bne   copyin2    
                    >325  
008463: 68          >326  copyin3  pla              ; get back ending byte
008464: F0 08 =846E >327           beq   copyin4    ; opps, there wasnt one
                    >328  
008466: 91 00       >329           sta   (temp),y   ; save ending byte
008468: E6 00       >330           inc   temp       
00846A: D0 02 =846E >331           bne   copyin4    ; inc pointers
00846C: E6 01       >332           inc   temp+1     
                    >333  
00846E: A6 00       >334  copyin4  ldx   temp       ; return pointers
008470: A5 01       >335           lda   temp+1     
008472: 60          >336           rts              
                    >337  
                    >338  *-------------------------------
                    >339  * copy a line of input to some location uppercase
                    >340  *-------------------------------
                    >341  
008473: 86 00       >342  ucopyinp stx   temp       ; point to dest
008475: 85 01       >343           sta   temp+1     
008477: 98          >344           tya              
008478: 48          >345           pha              ; save ending byte
                    >346  
008479: A2 00       >347           ldx   #0         ; start offsets
00847B: A0 00       >348           ldy   #0         
00847D: BD 00 02    >349  ucopyin2 lda   lnbuf,x    ; get byte
008480: E8          >350           inx              
008481: C9 0D       >351           cmp   #cr        ; we done?
008483: F0 0D =8492 >352           beq   ucopyin3   ; yep
                    >353  
008485: 20 3A 84    >354           jsr   conv       ; convert to uppercase
008488: 91 00       >355           sta   (temp),y   ; copy and inc pointers
00848A: E6 00       >356           inc   temp       
00848C: D0 EF =847D >357           bne   ucopyin2   
00848E: E6 01       >358           inc   temp+1     
008490: D0 EB =847D >359           bne   ucopyin2   
                    >360  
008492: 68          >361  ucopyin3 pla              ; get back ending byte
008493: F0 08 =849D >362           beq   ucopyin4   ; opps, there wasnt one
                    >363  
008495: 91 00       >364           sta   (temp),y   ; save ending byte
008497: E6 00       >365           inc   temp       
008499: D0 02 =849D >366           bne   ucopyin4   ; inc pointers
00849B: E6 01       >367           inc   temp+1     
                    >368  
00849D: A6 00       >369  ucopyin4 ldx   temp       ; return pointers
00849F: A5 01       >370           lda   temp+1     
0084A1: 60          >371           rts              
                    >372  
                    >373  *-------------------------------
                    >374  * print a string pointed by A & X
                    >375  *   if y<128, use length = y
                    >376  *   if y>127, stop at chr$(y)
                    >377  *-------------------------------
                    >378  
0084A2: 86 00       >379  prstr    stx   temp       
0084A4: 85 01       >380           sta   temp+1     ; point to data
0084A6: 84 02       >381           sty   temp2      
0084A8: 98          >382           tya              
0084A9: 29 7F       >383           and   #$7f       ; (was $7d ???)
0084AB: 85 03       >384           sta   temp2+1    ; save possible length
                    >385  
0084AD: A0 00       >386           ldy   #0         
0084AF: B1 00       >387  prstr2   lda   (temp),y   ; get data
0084B1: 29 7F       >388           and   #$7f       ; clear high
0084B3: C8          >389           iny              
                    >390  
0084B4: 24 02       >391           bit   temp2      ; use which compare?
0084B6: 10 0A =84C2 >392           bpl   prstr3     ; other one
                    >393  
0084B8: C5 03       >394           cmp   temp2+1    ; are we done?
0084BA: F0 10 =84CC >395           beq   prstr4     ; yep
                    >396  
0084BC: 20 08 8F    >397           jsr   cout       ; show and loop
0084BF: 4C AF 84    >398           jmp   prstr2     
                    >399  
0084C2: C4 02       >400  prstr3   cpy   temp2      ; done?
0084C4: F0 06 =84CC >401           beq   prstr4     ; yep
                    >402  
0084C6: 20 08 8F    >403           jsr   cout       
0084C9: 4C AF 84    >404           jmp   prstr2     
                    >405  
0084CC: 98          >406  prstr4   tya              
0084CD: 18          >407           clc              
0084CE: 65 00       >408           adc   temp       ; compute next address
0084D0: AA          >409           tax              
0084D1: A9 00       >410           lda   #0         
0084D3: 65 01       >411           adc   temp+1     
0084D5: 60          >412           rts              
                    >413  
                    >414  *-------------------------------
                    >415  * skip a string pointed by A & X
                    >416  *   if y<128, use length = y
                    >417  *   if y>127, stop at chr$(y)
                    >418  *-------------------------------
                    >419  
0084D6: 86 00       >420  skipstr  stx   temp       
0084D8: 85 01       >421           sta   temp+1     ; point to data
0084DA: 84 02       >422           sty   temp2      
0084DC: 98          >423           tya              
0084DD: 29 7F       >424           and   #$7f       ; (was $7d ???)
0084DF: 85 03       >425           sta   temp2+1    ; save possible length
                    >426  
0084E1: A0 00       >427           ldy   #0         
0084E3: B1 00       >428  skstr2   lda   (temp),y   ; get data
0084E5: 29 7F       >429           and   #$7f       ; clear high
0084E7: C8          >430           iny              
                    >431  
0084E8: 24 02       >432           bit   temp2      ; use which compare?
0084EA: 10 07 =84F3 >433           bpl   skstr3     ; other one
                    >434  
0084EC: C5 03       >435           cmp   temp2+1    ; are we done?
0084EE: F0 07 =84F7 >436           beq   skstr4     ; yep
                    >437  
0084F0: 4C E3 84    >438           jmp   skstr2     
                    >439  
0084F3: C4 02       >440  skstr3   cpy   temp2      ; done?
0084F5: D0 EC =84E3 >441           bne   skstr2     ; nope
                    >442  
0084F7: 98          >443  skstr4   tya              
0084F8: 18          >444           clc              
0084F9: 65 00       >445           adc   temp       ; compute next address
0084FB: AA          >446           tax              
0084FC: A9 00       >447           lda   #0         
0084FE: 65 01       >448           adc   temp+1     
008500: 60          >449           rts              
                    >450  
                    >451  *-------------------------------
                    >452  * get names from a list
                    >453  *-------------------------------
                    >454  
008501: A0 00       >455  getname  ldy   #0         
008503: B1 06       >456           lda   (temp4),y  ; we done?
008505: 38          >457           sec              
008506: F0 1B =8523 >458           beq   getnam3    
                    >459  
008508: B1 06       >460  getnam2  lda   (temp4),y  ; copy name
00850A: 99 01 03    >461           sta   flname+1,y 
00850D: C8          >462           iny              
00850E: C9 00       >463           cmp   #0         
008510: D0 F6 =8508 >464           bne   getnam2    
                    >465  
008512: 88          >466           dey              
008513: 8C 00 03    >467           sty   flname     ; save length
                    >468  
008516: 98          >469           tya              
008517: 38          >470           sec              
008518: 65 06       >471           adc   temp4      ; update length
00851A: 85 06       >472           sta   temp4      
00851C: A5 07       >473           lda   temp4+1    
00851E: 69 00       >474           adc   #0         
008520: 85 07       >475           sta   temp4+1    
008522: 18          >476           clc              
008523: 60          >477  getnam3  rts              
                    >478  
                    >479  *-------------------------------
                    >480  * translate a binary to text [0-99]
                    >481  *-------------------------------
                    >482  
008524: A0 00       >483  bindec8  ldy   #0         ; start 10's counter
008526: C9 0A       >484  bin8     cmp   #10        
008528: 90 05 =852F >485           bcc   bin8a      ; less than 10, were done
                    >486  
00852A: E9 0A       >487           sbc   #10        ; minus 10
00852C: C8          >488           iny              ; add 1 to the 10's counter
00852D: D0 F7 =8526 >489           bne   bin8       ; loop
                    >490  
00852F: 69 30       >491  bin8a    adc   #'0'       ; make 1's into text
008531: AA          >492           tax              ; save
008532: 98          >493           tya              
008533: 69 30       >494           adc   #'0'       ; make 10's into text
008535: 60          >495           rts              ; were done
                    >496  
                    >497  *-------------------------------
                    >498  * print out a translated binary [0-99]
                    >499  *-------------------------------
                    >500  
008536: C9 30       >501  decout8  cmp   #'0'       ; are 10's zero?
008538: F0 03 =853D >502           beq   out8a      
                    >503  
00853A: 20 08 8F    >504           jsr   cout       ; print it
00853D: 8A          >505  out8a    txa              
00853E: 4C 08 8F    >506           jmp   cout       ; print 1's
                    >507  
                    >508  *-------------------------------
                    >509  * input a number [X-A point to text]
                    >510  *-------------------------------
                    >511  
008541: 86 1A       >512  numin    stx   numptr     ; point to text
008543: 85 1B       >513           sta   numptr+1   
008545: A9 00       >514           lda   #0         
008547: 8D 0B 86    >515           sta   num        ; zero totals
00854A: 8D 0C 86    >516           sta   num+1      
                    >517  
00854D: A0 00       >518  numin2   ldy   #0         
00854F: B1 1A       >519           lda   (numptr),y ; get digit
008551: 29 7F       >520           and   #$7f       ; clear high
008553: 38          >521           sec              
008554: E9 30       >522           sbc   #'0'       ; make in 0-9 range
008556: C9 3A       >523           cmp   #'9'+1     
008558: B0 35 =858F >524           bcs   numin4     ; opps, we are done
                    >525  
00855A: E6 1A       >526           inc   numptr     ; point to next byte
00855C: D0 02 =8560 >527           bne   *+4        
00855E: E6 1B       >528           inc   numptr+1   
                    >529  
008560: 8D 0D 86    >530           sta   num+2      ; save digit
008563: A9 00       >531           lda   #0         
008565: 8D 0E 86    >532           sta   num+3      
                    >533  
008568: A2 0A       >534           ldx   #10        
00856A: 18          >535  numin3   clc              ; num = num + num2
00856B: AD 0B 86    >536           lda   num        
00856E: 6D 0D 86    >537           adc   num+2      
008571: 8D 0D 86    >538           sta   num+2      
008574: AD 0C 86    >539           lda   num+1      
008577: 6D 0E 86    >540           adc   num+3      
00857A: 8D 0E 86    >541           sta   num+3      
00857D: CA          >542           dex              
00857E: D0 EA =856A >543           bne   numin3     ; num = num * 10
                    >544  
008580: AD 0D 86    >545           lda   num+2      ; move result
008583: 8D 0B 86    >546           sta   num        
008586: AD 0E 86    >547           lda   num+3      
008589: 8D 0C 86    >548           sta   num+1      
00858C: 4C 4D 85    >549           jmp   numin2     ; loop
                    >550  
00858F: AE 0B 86    >551  numin4   ldx   num        ; return value
008592: AD 0C 86    >552           lda   num+1      
008595: 60          >553           rts              
                    >554  
                    >555  *-------------------------------
                    >556  * display a decimal number [0 to 65535]
                    >557  *-------------------------------
                    >558  
008596: 8E 0B 86    >559  decmem   stx   num        ; save number
008599: 8D 0C 86    >560           sta   num+1      
                    >561  
00859C: A9 00       >562           lda   #0         
00859E: 8D 0D 86    >563           sta   num+2      
0085A1: 8D 0E 86    >564           sta   num+3      
0085A4: 8D 10 86    >565           sta   num+5      
0085A7: 8D 11 86    >566           sta   num+6      
                    >567  
0085AA: F8          >568           sed              
0085AB: A0 10       >569           ldy   #$10       ; use decimal mode
0085AD: 0E 0B 86    >570  decmem2  asl   num        
0085B0: 2E 0C 86    >571           rol   num+1      
0085B3: AD 0D 86    >572           lda   num+2      
0085B6: 6D 0D 86    >573           adc   num+2      ; do actual 'woz' conversion
0085B9: 8D 0D 86    >574           sta   num+2      
0085BC: AD 0E 86    >575           lda   num+3      
0085BF: 6D 0E 86    >576           adc   num+3      
0085C2: 8D 0E 86    >577           sta   num+3      
0085C5: 2E 0F 86    >578           rol   num+4      
0085C8: 88          >579           dey              ; loop down
0085C9: D0 E2 =85AD >580           bne   decmem2    
                    >581  
0085CB: D8          >582           cld              ; done with decimal
0085CC: A0 04       >583           ldy   #4         ; print 5 digits
                    >584  
0085CE: AD 0F 86    >585  decmem3  lda   num+4      ; get digit
0085D1: 29 0F       >586           and   #$0f       
0085D3: D0 05 =85DA >587           bne   decmem4    ; is it zero?
                    >588  
0085D5: 2C 10 86    >589           bit   num+5      ; is this a leading zero?
0085D8: 10 0F =85E9 >590           bpl   decmem5    ; yep
                    >591  
0085DA: CE 10 86    >592  decmem4  dec   num+5      
0085DD: 18          >593           clc              
0085DE: 69 30       >594           adc   #'0'       ; print digit
0085E0: AE 11 86    >595           ldx   num+6      
0085E3: 9D 13 86    >596           sta   txtnum+1,x ; save number to memory
0085E6: EE 11 86    >597           inc   num+6      
                    >598  
0085E9: A2 03       >599  decmem5  ldx   #3         ; move up next digit
0085EB: 0E 0C 86    >600  decmem6  asl   num+1      
0085EE: 2E 0D 86    >601           rol   num+2      
0085F1: 2E 0E 86    >602           rol   num+3      
0085F4: 2E 0F 86    >603           rol   num+4      
0085F7: CA          >604           dex              
0085F8: 10 F1 =85EB >605           bpl   decmem6    
                    >606  
0085FA: 88          >607           dey              ; count down digits
0085FB: 30 07 =8604 >608           bmi   decmem7    
0085FD: D0 CF =85CE >609           bne   decmem3    
                    >610  
0085FF: 8E 10 86    >611           stx   num+5      ; print last zero for sure
008602: 10 CA =85CE >612           bpl   decmem3    
008604: AD 11 86    >613  decmem7  lda   num+6      ; save number length
008607: 8D 12 86    >614           sta   txtnum     
00860A: 60          >615           rts              
                    >616  
00860B: 00 00 00 00 >617  num      db    0,0,0,0,0,0,0 
00860F: 00 00 00 
008612: 00 00 00 00 >618  txtnum   db    0,0,0,0,0,0 
008616: 00 00 
                    >619  
                    >620  *-------------------------------
                    >621  * escape handler
                    >622  *-------------------------------
                    >623  
008618: 8D 50 86    >624  escape   sta   escadr     ; possible reset
00861B: C9 00       >625           cmp   #0         ; turn off handler?
00861D: F0 0F =862E >626           beq   escape2    ; yep
                    >627  
00861F: 8E 51 86    >628           stx   escadr+1   ; save escape address
008622: 8D 52 86    >629           sta   escadr+2   
008625: BA          >630           tsx              
008626: 8E 53 86    >631           stx   escadr+3   ; save stack location
008629: A9 FF       >632           lda   #-1        
00862B: 8D 50 86    >633           sta   escadr     ; turn on handler
00862E: 60          >634  escape2  rts              
                    >635  
                    >636                            ; check for esc and handle if needed
00862F: 2C 50 86    >637  escape3  bit   escadr     ; is handler enabled?
008632: 10 1B =864F >638           bpl   escape5    ; nope
                    >639  
008634: 48          >640           pha              
008635: 29 7F       >641           and   #$7f       ; did escape occur?
008637: C9 1B       >642           cmp   #esc       
008639: D0 13 =864E >643           bne   escape4    ; nope
                    >644  
00863B: AD 51 86    >645           lda   escadr+1   ; setup jump location
00863E: 85 00       >646           sta   temp       
008640: AD 52 86    >647           lda   escadr+2   
008643: 85 01       >648           sta   temp+1     
008645: AE 53 86    >649           ldx   escadr+3   
008648: 9A          >650           txs              ; reset stack
008649: 68          >651           pla              
00864A: 68          >652           pla              ; restore stack
00864B: 6C 00 00    >653           jmp   (temp)     ; change program control
                    >654  
00864E: 68          >655  escape4  pla              
00864F: 60          >656  escape5  rts              
                    >657  
008650: 00 00 00 00 >658  escadr   db    0,0,0,0    
                    >659  
                    >660  *-------------------------------
                    >661  * print a number
                    >662  *-------------------------------
                    >663  
008654: 20 96 85    >664  prnumb   jsr   decmem     ; convert number
008657: A2 13       >665           ldx   #<txtnum+1 
008659: A9 86       >666           lda   #>txtnum+1 
00865B: AC 12 86    >667           ldy   txtnum     
00865E: C8          >668           iny              ; display it
00865F: 4C A2 84    >669           jmp   prstr      
                    >670  
                    >671  *-------------------------------
                    >672  * wait for a return
                    >673  *-------------------------------
                    >674  
008662: 20 9E 82    >675  getcr    jsr   print      
008665: 01 16 00    >676           db    1,22,0     
008668: 50 72 65 73 >677           asc   'Press [RETURN] to continue...',00 
00866C: 73 20 5B 52 45 54 55 52 
008674: 4E 5D 20 74 6F 20 63 6F 
00867C: 6E 74 69 6E 75 65 2E 2E 
008684: 2E 00 
                    >678  
008686: 20 E2 82    >679  :loop    jsr   rdkey      
008689: C9 0D       >680           cmp   #cr        
00868B: D0 F9 =8686 >681           bne   :loop      
00868D: 60          >682           rts              
                    >683  
                    >684  *-------------------------------
                    >685  * wait for a 'g'o message
                    >686  *-------------------------------
                    >687  
00868E: 20 9E 82    >688  getg     jsr   print      
008691: 01 14 00    >689           db    1,20,0     
008694: 50 72 65 73 >690           asc   'Press [G] when diskette is online.',00 
008698: 73 20 5B 47 5D 20 77 68 
0086A0: 65 6E 20 64 69 73 6B 65 
0086A8: 74 74 65 20 69 73 20 6F 
0086B0: 6E 6C 69 6E 65 2E 00 
                    >691  
0086B7: 20 E2 82    >692  getg2    jsr   rdkey      ; wait for 'g'
0086BA: 20 3A 84    >693           jsr   conv       
0086BD: C9 47       >694           cmp   #'G'       
0086BF: F0 05 =86C6 >695           beq   getg3      
0086C1: C9 2A       >696           cmp   #'*'       
0086C3: D0 F2 =86B7 >697           bne   getg2      
0086C5: 00          >698           brk              
0086C6: 60          >699  getg3    rts              
                    >700  
                    >701  *-------------------------------
                    >702  * write the changes back into the 'g' file
                    >703  *-------------------------------
                    >704  
0086C7: 20 3A 8E    >705  wrtchg   jsr   cls        
0086CA: 20 34 87    >706           jsr   svacos     ; write configuration back to disk
0086CD: 4C 0F 81    >707           jmp   start      
                    >708  
                    >709  *-------------------------------
                    >710  * check to see if in init mode
                    >711  *-------------------------------
                    >712  
0086D0: 2C 8E 82    >713  chinit   bit   init       ; in init mode?
0086D3: 10 02 =86D7 >714           bpl   chinit2    ; nope
                    >715  
0086D5: 68          >716           pla              ; return to init routine
0086D6: 68          >717           pla              
0086D7: 60          >718  chinit2  rts              ; return to caller
                     17            put   disk       
                    >1    *-------------------------------
                    >2    * Disk stuff for config
                    >3    *-------------------------------
                    >4    * Date: 3/11/88
                    >5    *-------------------------------
                    >6    
                    >7    *-------------------------------
                    >8    * read in a partial record [1-255 bytes]
                    >9    
0086D8: 86 66       >10   rdpart   stx   part       
0086DA: 85 67       >11            sta   part+1     ; point to buffer
0086DC: 98          >12            tya              
0086DD: AA          >13            tax              ; save counter
                    >14   
0086DE: A0 00       >15            ldy   #0         
0086E0: 20 C8 87    >16   :loop    jsr   rdbyte     ; read in data
0086E3: B0 07 =86EC >17            bcs   :error     ; error
                    >18   
0086E5: 91 66       >19            sta   (part),y   
0086E7: C8          >20            iny              
0086E8: CA          >21            dex              
0086E9: D0 F5 =86E0 >22            bne   :loop      ; do next byte
                    >23   
0086EB: 18          >24            clc              ; all went well
0086EC: 60          >25   :error   rts              
                    >26   
                    >27   *-------------------------------
                    >28   * write a partial block of data to disk
                    >29   
0086ED: 86 66       >30   wrpart   stx   part       ; point to data
0086EF: 85 67       >31            sta   part+1     
0086F1: 98          >32            tya              
0086F2: AA          >33            tax              ; save length
                    >34   
0086F3: A0 00       >35            ldy   #0         
0086F5: B1 66       >36   :loop    lda   (part),y   ; write out data
0086F7: 20 13 88    >37            jsr   wrbyte     
0086FA: C8          >38            iny              
0086FB: CA          >39            dex              
0086FC: D0 F7 =86F5 >40            bne   :loop      ; do next byte
                    >41   
0086FE: 60          >42            rts              
                    >43   
                    >44   
                    >45   *-------------------------------
                    >46   * verify a that a disk is online
                    >47   
0086FF: 8E 15 87    >48   verify   stx   verify_p+1 ; point to wanted path
008702: 8D 16 87    >49            sta   verify_p+2 
                    >50   
008705: 20 00 BF    >51            jsr   mli        
008708: C6          >52            db    $c6        ; set prefix
008709: 14 87       >53            dw    verify_p   
00870B: B0 06 =8713 >54            bcs   :error     
                    >55   
00870D: 20 00 BF    >56            jsr   mli        ;get prefix for source volume
008710: C7          >57            db    $c7        ;get prefix
008711: 97 8D       >58            dw    p_pfx2     ;point to path
008713: 60          >59   :error   rts              
                    >60   
008714: 01          >61   verify_p db    1          
008715: 00 00       >62            dw    0          ;address of path to set
                    >63   
                    >64   *-------------------------------
                    >65   * load config/acos.obj from disk
                    >66   
008717: 20 76 89    >67   ldacos   jsr   logprg     ; log to the program disk
00871A: A2 95       >68            ldx   #<gname    
00871C: A9 82       >69            lda   #>gname    
00871E: 20 82 89    >70            jsr   movname    ; move filename
008721: 20 5C 87    >71            jsr   open       ; open 'acos.obj'
008724: B0 0D =8733 >72            bcs   :error     ; error
                    >73   
008726: A2 00       >74            ldx   #<confbuf  ; load config part into buffer
008728: A9 08       >75            lda   #>confbuf  
00872A: A0 14       >76            ldy   #20        ; read 10 pages (5 blocks)
00872C: 20 EB 87    >77            jsr   rdblk      
00872F: 20 7E 87    >78            jsr   close      ; close file
008732: 18          >79            clc              
008733: 60          >80   :error   rts              
                    >81   
                    >82   *-------------------------------
                    >83   * write config/acos.obj back to disk
                    >84   
008734: 20 76 89    >85   svacos   jsr   logprg     ; log to program disk
008737: A2 95       >86            ldx   #<gname    
008739: A9 82       >87            lda   #>gname    
00873B: 20 82 89    >88            jsr   movname    ; move filename
00873E: 20 5C 87    >89            jsr   open       
008741: B0 0D =8750 >90            bcs   :error     
                    >91   
008743: A2 00       >92            ldx   #<confbuf  ; write config back to disk
008745: A9 08       >93            lda   #>confbuf  
008747: A0 14       >94            ldy   #20        
008749: 20 E1 87    >95            jsr   wrblk      ; write 10 pages (5 blocks)
00874C: 20 7E 87    >96            jsr   close      
00874F: 18          >97            clc              
008750: 60          >98   :error   rts              
                    >99   
008751: 00          >100  refnum   db    0          
                     18            put   pdiskio    
                    >1    ********************************
                    >2    *                              *
                    >3    *   Config - ProDOS disk I/O   *
                    >4    *                              *
                    >5    ********************************
                    >6    
                    >7    *-------------------------------
                    >8    * Date:  3/11/88
                    >9    *-------------------------------
                    >10   
            =8752   >11   create2  equ   *          ; entry for external files
008752: 8C CB 88    >12   create   sty   p_creat+4  ; save filetype
008755: 20 00 BF    >13            jsr   mli        
008758: C0          >14            db    $c0        
008759: C7 88       >15            dw    p_creat    
00875B: 60          >16            rts              
                    >17   
                    >18   
00875C: A0 00       >19   open     ldy   #0         
00875E: B9 7B 87    >20   bfopen   lda   bufadr,y   ; point at buffer
008761: 8D 9A 88    >21            sta   p_open+4   
                    >22   
008764: 20 00 BF    >23            jsr   mli        
008767: C8          >24            db    $c8        ; open
008768: 96 88       >25            dw    p_open     
00876A: D0 08 =8774 >26            bne   open2      
                    >27   
00876C: AD 9B 88    >28            lda   p_open+5   ; save refnum
00876F: 8D 51 87    >29            sta   refnum     
008772: 18          >30            clc              
008773: 60          >31            rts              
                    >32   
008774: A9 FF       >33   open2    lda   #-1        ; make sure refnum is illegal
008776: 8D 51 87    >34            sta   refnum     
008779: 38          >35            sec              
00877A: 60          >36            rts              
                    >37   
00877B: 1C 1C 1C    >38   bufadr   db    >fbuf1,>fbuf2,>msgbuf 
                    >39   
                    >40   
00877E: AD 51 87    >41   close    lda   refnum     ; use refnum
008781: 8D 9D 88    >42            sta   p_close+1  
008784: 20 00 BF    >43            jsr   mli        
008787: CC          >44            db    $cc        ; close
008788: 9C 88       >45            dw    p_close    
00878A: 60          >46            rts              
                    >47   
00878B: AD 51 87    >48   flush    lda   refnum     ; use refnum
00878E: 8D 9D 88    >49            sta   p_close+1  
008791: 20 00 BF    >50            jsr   mli        
008794: CD          >51            db    $cd        ; flush
008795: 9C 88       >52            dw    p_close    
008797: 60          >53            rts              
                    >54   
                    >55   
                    >56                             ; setup for single line read
008798: AD 51 87    >57   rdlnset  lda   refnum     
00879B: 8D AD 88    >58            sta   p_new0+1   ; save refnum
00879E: 8D B1 88    >59            sta   p_new1+1   
0087A1: 8D B5 88    >60            sta   p_rdln+1   
                    >61   
0087A4: 20 00 BF    >62            jsr   mli        
0087A7: C9          >63            db    $c9        ; enable newline
0087A8: B0 88       >64            dw    p_new1     
0087AA: 60          >65            rts              
                    >66   
                    >67   
                    >68                             ; read a line from a file
0087AB: 20 00 BF    >69   rdline   jsr   mli        
0087AE: CA          >70            db    $ca        ; read
0087AF: B4 88       >71            dw    p_rdln     
0087B1: D0 0E =87C1 >72            bne   rdline2    ; read error
                    >73   
0087B3: AE BA 88    >74            ldx   p_rdln+6   ; is there a cr at end of line?
0087B6: BD FF 01    >75            lda   lnbuf-1,x  
0087B9: 29 7F       >76            and   #$7f       
0087BB: C9 0D       >77            cmp   #cr        
0087BD: D0 02 =87C1 >78            bne   rdline2    ; no more stuff
0087BF: 18          >79            clc              
0087C0: 60          >80            rts              
                    >81   
0087C1: A9 00       >82   rdline2  lda   #0         ; no data in line
0087C3: 8D 00 02    >83            sta   lnbuf      
0087C6: 38          >84            sec              ; eof
0087C7: 60          >85            rts              
                    >86   
                    >87   
                    >88                             ; read a single byte
0087C8: AD 51 87    >89   rdbyte   lda   refnum     ; save refnum
0087CB: F0 10 =87DD >90            beq   rdbyte2    
                    >91   
0087CD: 8D 9F 88    >92            sta   p_rbyt+1   
0087D0: 20 00 BF    >93            jsr   mli        
0087D3: CA          >94            db    $ca        ; read 1 byte
0087D4: 9E 88       >95            dw    p_rbyt     
0087D6: D0 05 =87DD >96            bne   rdbyte2    
                    >97   
0087D8: AD A6 88    >98            lda   p_byte     ; get byte
0087DB: 18          >99            clc              ; were done
0087DC: 60          >100           rts              
                    >101  
0087DD: A9 00       >102  rdbyte2  lda   #0         ; fake data
0087DF: 38          >103           sec              
0087E0: 60          >104           rts              
                    >105  
                    >106  
                    >107                            ; write a block for the msg routines
0087E1: 48          >108  wrblk    pha              
0087E2: A9 CB       >109           lda   #$cb       ; use write call
0087E4: 8D 0F 88    >110           sta   rwtype     ; --- does modify
0087E7: 68          >111           pla              
0087E8: 4C F2 87    >112           jmp   rwblk      
                    >113  
                    >114                            ; read a block for the msg routines
0087EB: 48          >115  rdblk    pha              
0087EC: A9 CA       >116           lda   #$ca       ; use read call
0087EE: 8D 0F 88    >117           sta   rwtype     ; --- does modify
0087F1: 68          >118           pla              
                    >119  
0087F2: 8E BE 88    >120  rwblk    stx   p_rdblk+2  
0087F5: 8D BF 88    >121           sta   p_rdblk+3  ; save read address
                    >122  
0087F8: A9 00       >123           lda   #0         
0087FA: 8D C0 88    >124           sta   p_rdblk+4  
0087FD: 8C C1 88    >125           sty   p_rdblk+5  ; save number of blocks to read
                    >126  
008800: 4E C1 88    >127           lsr   p_rdblk+5  ; divide by 2
008803: 6E C0 88    >128           ror   p_rdblk+4  
                    >129  
008806: AD 51 87    >130           lda   refnum     ; get refnum
008809: 8D BD 88    >131           sta   p_rdblk+1  
                    >132  
00880C: 20 00 BF    >133           jsr   mli        ; call mli
00880F: CA          >134  rwtype   db    $ca        ; *** modified ***
008810: BC 88       >135           dw    p_rdblk    
008812: 60          >136           rts              
                    >137  
                    >138  
                    >139                            ; write a byte of data
008813: 8D A6 88    >140  wrbyte   sta   p_byte     ; save data
008816: 48          >141           pha              
008817: AD 51 87    >142           lda   refnum     
00881A: F0 0C =8828 >143           beq   wrbyte2    ; if no refnum
                    >144  
00881C: 8D 9F 88    >145           sta   p_rbyt+1   
00881F: 20 00 BF    >146           jsr   mli        
008822: CB          >147           db    $cb        ; write byte
008823: 9E 88       >148           dw    p_rbyt     
008825: 18          >149           clc              ; all is well
008826: F0 01 =8829 >150           beq   wrbyte3    
                    >151  
008828: 38          >152  wrbyte2  sec              ; opps, problem
008829: 68          >153  wrbyte3  pla              ; get back data
00882A: 60          >154           rts              
                    >155  
                    >156  
                    >157                            ; position file
00882B: AC 91 89    >158  posmsg   ldy   msgref     ; save refnum
00882E: 8C 51 87    >159           sty   refnum     
                    >160  
008831: 4A          >161           lsr   a          ; setup Y,A,X w/exact byte
008832: A8          >162           tay              
008833: 8A          >163           txa              
008834: 6A          >164           ror   a          
008835: 48          >165           pha              
008836: A9 10       >166           lda   #16        
008838: 6A          >167           ror   a          
008839: AA          >168           tax              
00883A: 68          >169           pla              
00883B: 4C 56 88    >170           jmp   setpos     
                    >171  
                    >172  
                    >173                            ; find the end of file
00883E: AD 51 87    >174  geteof   lda   refnum     ; save refnum
008841: 8D A8 88    >175           sta   p_mark+1   
008844: 20 00 BF    >176           jsr   mli        
008847: D1          >177           db    $d1        ; get eof
008848: A7 88       >178           dw    p_mark     
00884A: AE A9 88    >179           ldx   p_mark+2   
00884D: AD AA 88    >180           lda   p_mark+3   ; get length
008850: AC AB 88    >181           ldy   p_mark+4   
008853: 60          >182           rts              
                    >183  
                    >184                            ; set a mark into a file
008854: A0 00       >185  setmark  ldy   #0         
                    >186  
                    >187                            ; do actual position set within file
008856: 8E A9 88    >188  setpos   stx   p_mark+2   
008859: 8D AA 88    >189           sta   p_mark+3   ; point to new location
00885C: 8C AB 88    >190           sty   p_mark+4   
                    >191  
00885F: AD 51 87    >192           lda   refnum     
008862: 8D A8 88    >193           sta   p_mark+1   ; save refnum
                    >194  
008865: 20 00 BF    >195  setpos2  jsr   mli        
008868: CE          >196           db    $ce        ; set mark
008869: A7 88       >197           dw    p_mark     
00886B: C9 4D       >198           cmp   #$4d       ; check for out-of-range
00886D: D0 08 =8877 >199           bne   setpos3    
                    >200  
00886F: 20 00 BF    >201           jsr   mli        
008872: D0          >202           db    $d0        ; set eof
008873: A7 88       >203           dw    p_mark     
008875: F0 EE =8865 >204           beq   setpos2    ; position again
                    >205  
008877: 60          >206  setpos3  rts              
                    >207  
                    >208  
                    >209                            ; get current file marker
008878: AD 51 87    >210  getmark  lda   refnum     ; save refnum
00887B: 8D A8 88    >211           sta   p_mark+1   
00887E: 20 00 BF    >212           jsr   mli        
008881: CF          >213           db    $cf        ; get mark
008882: A7 88       >214           dw    p_mark     
008884: 38          >215           sec              
008885: D0 07 =888E >216           bne   getmrk2    ; opps, error
                    >217  
008887: 18          >218           clc              
008888: AE A9 88    >219           ldx   p_mark+2   ; all is well
00888B: AD AA 88    >220           lda   p_mark+3   
00888E: 60          >221  getmrk2  rts              
                    >222  
00888F: 20 00 BF    >223  delfile  jsr   mli        
008892: C1          >224           db    $c1        ; delete file
008893: C4 88       >225           dw    p_del      
008895: 60          >226           rts              
                    >227  
                    >228                            ; ------ parms ------
                    >229  
008896: 03          >230  p_open   db    3          
008897: 00 03       >231           dw    flname     
008899: 00 1C       >232           dw    fbuf1      
00889B: 00          >233           db    0          
                    >234  
00889C: 01          >235  p_close  db    1          
00889D: 00          >236           db    0          
                    >237  
00889E: 04          >238  p_rbyt   db    4          
00889F: 00          >239           db    0          
0088A0: A6 88       >240           dw    p_byte     
0088A2: 01 00       >241           dw    1          
0088A4: 00 00       >242           dw    0          
                    >243  
0088A6: 00          >244  p_byte   db    0          
                    >245  
0088A7: 02          >246  p_mark   db    2          
0088A8: 00          >247           db    0          
0088A9: 00 00 00    >248           db    0,0,0      
                    >249  
0088AC: 03          >250  p_new0   db    3          
0088AD: 00          >251           db    0          
0088AE: 00          >252           db    0          
0088AF: 00          >253           db    0          
                    >254  
0088B0: 03          >255  p_new1   db    3          
0088B1: 00          >256           db    0          
0088B2: 7F          >257           db    $7f        
0088B3: 0D          >258           db    $0d        
                    >259  
0088B4: 04          >260  p_rdln   db    4          
0088B5: 00          >261           db    0          
0088B6: 00 02       >262           dw    lnbuf      
0088B8: FF 00       >263           dw    $00ff      
0088BA: 00 00       >264           dw    $0000      
                    >265  
0088BC: 04          >266  p_rdblk  db    4          
0088BD: 00          >267           db    0          
0088BE: 00 00       >268           dw    $0000      
0088C0: 80 00       >269           dw    $0080      
0088C2: 00 00       >270           dw    $0000      
                    >271  
0088C4: 01          >272  p_del    db    1          
0088C5: 00 03       >273           dw    flname     
                    >274  
0088C7: 07          >275  p_creat  db    7          
0088C8: 00 03       >276           dw    flname     
0088CA: C3          >277           db    $c3        
0088CB: 00          >278           db    0          
0088CC: 00 00       >279           dw    0          
0088CE: 01          >280           db    $01        
0088CF: 00 00       >281           dw    $0000      
0088D1: 00 00       >282           dw    $0000      
                     19            put   ospjunk    
                    >1    ********************************
                    >2    *                              *
                    >3    *   Config Program - Ospjunk   *
                    >4    *                              *
                    >5    ********************************
                    >6    
                    >7    *-------------------------------
                    >8    * Date: 3/11/88
                    >9    *-------------------------------
                    >10   
                    >11   *-------------------------------
                    >12   * load the acos.obj file after find out where it is
                    >13   
0088D3: 20 3A 8E    >14   ldconfg  jsr   cls        ; clear screen
                    >15   
0088D6: 20 9E 82    >16            jsr   print      
0088D9: 50 6C 65 61 >17            asc   'Please enter the pathname of the volume',0d 
0088DD: 73 65 20 65 6E 74 65 72 
0088E5: 20 74 68 65 20 70 61 74 
0088ED: 68 6E 61 6D 65 20 6F 66 
0088F5: 20 74 68 65 20 76 6F 6C 
0088FD: 75 6D 65 0D 
008901: 6F 72 20 73 >18            asc   'or subdirectory which contains the file',0d,0d 
008905: 75 62 64 69 72 65 63 74 
00890D: 6F 72 79 20 77 68 69 63 
008915: 68 20 63 6F 6E 74 61 69 
00891D: 6E 73 20 74 68 65 20 66 
008925: 69 6C 65 0D 0D 
00892A: 41 43 4F 53 >19            asc   'ACOS.OBJ',0d,0d,0d 
00892E: 2E 4F 42 4A 0D 0D 0D 
008935: 50 61 74 68 >20            asc   'Path: /',00 
008939: 3A 20 2F 00 
                    >21   
00893D: A9 20       >22            lda   #32        ; set maximum pathname at 32
00893F: 85 0F       >23            sta   maxlen     
008941: A9 C0       >24            lda   #%11000000 
008943: 8D AF 83    >25            sta   inpmode    ; set input mode
                    >26   
008946: 20 3C 83    >27            jsr   inpln      
008949: C8          >28            iny              
00894A: 8C FE 01    >29            sty   lnbuf-2    ; save length
00894D: A9 2F       >30            lda   #'/'       
00894F: 8D FF 01    >31            sta   lnbuf-1    ; save initial '/'
                    >32   
008952: 20 00 BF    >33            jsr   mli        
008955: C6          >34            db    $c6        ; set prefix
008956: 75 8D       >35            dw    p_spfx     
008958: D0 0B =8965 >36            bne   ldcon2     ; error
                    >37   
00895A: 20 00 BF    >38            jsr   mli        
00895D: C7          >39            db    $c7        ; get prefix and put into
00895E: 9D 8D       >40            dw    p_pfx4     ; program byffer
                    >41   
008960: 20 17 87    >42            jsr   ldacos     ; load in the stats
008963: 90 03 =8968 >43            bcc   logcon     ; all is ok
                    >44   
008965: 4C D3 88    >45   ldcon2   jmp   ldconfg    ; opps, error
                    >46   
                    >47   
                    >48   *-------------------------------
                    >49   * log back to the config disk
                    >50                             ; log back to config disk
008968: 20 00 BF    >51   logcon   jsr   mli        
00896B: C6          >52            db    $c6        ; set prefix
00896C: 97 8D       >53            dw    p_pfx2     
                    >54   
                    >55                             ; ... later, add in error checking
                    >56   
00896E: 60          >57            rts              
                    >58   
                    >59   *-------------------------------
                    >60   * log the destination disk
                    >61   
00896F: 20 00 BF    >62   logdst   jsr   mli        
008972: C6          >63            db    $c6        
008973: 9A 8D       >64            dw    p_pfx3     
                    >65   
                    >66                             ; ... later, add in error checking
                    >67   
008975: 60          >68            rts              
                    >69   
                    >70   *-------------------------------
                    >71   * log the program disk
                    >72   
008976: AD F0 8D    >73   logprg   lda   prgpfx     ; has a program prefix been defined?
008979: F0 ED =8968 >74            beq   logcon     ; nope, log to config disk
                    >75   
00897B: 20 00 BF    >76            jsr   mli        
00897E: C6          >77            db    $c6        ; log to program disk (with ACOS.OBJ)
00897F: 9D 8D       >78            dw    p_pfx4     
008981: 60          >79            rts              
                    >80   
                    >81   *-------------------------------
                    >82   * move filename to user routine
                    >83   
008982: 86 68       >84   movname  stx   dosbyt     ; point to filename
008984: 85 69       >85            sta   dosbyt+1   
                    >86   
008986: A0 0F       >87            ldy   #15        
008988: B1 68       >88   movnam2  lda   (dosbyt),y ; copy filename
00898A: 99 00 03    >89            sta   flname,y   
00898D: 88          >90            dey              
00898E: 10 F8 =8988 >91            bpl   movnam2    
008990: 60          >92            rts              
                    >93   
                    >94   
                    >95                             ; variables and stuff
008991: 00          >96   msgref   db    0          
008992: 00          >97   module   db    0          
008993: 00 00 00    >98   sdvparm  db    0,0,0      
            =1E00   >99   fnam2    equ   fnam1      
            =1C00   >100  fbuf2    equ   fbuf1      
            =1E00   >101  msgnam   equ   fnam1      
            =1C00   >102  msgbuf   equ   fbuf1      
            =1E00   >103  miscnam  equ   fnam1      
            =1C00   >104  miscbuf  equ   fbuf1      
                    >105  
                    >106  *-------------------------------
                    >107  * log drive specifier a-l
                    >108  
008996: A2 00       >109  logspec  ldx   #0         ; start offset at 8
008998: 85 00       >110           sta   temp       
00899A: C9 00       >111           cmp   #0         ; we done (drive a:)
00899C: F0 0A =89A8 >112           beq   logspc3    ; yep
                    >113  
00899E: 8A          >114  logspc2  txa              ; use as base
00899F: 38          >115           sec              ; add extra 1
0089A0: 7D 15 08    >116           adc   devnam,x   ; add offset
0089A3: AA          >117           tax              ; make into offset
0089A4: C6 00       >118           dec   temp       ; done?
0089A6: D0 F6 =899E >119           bne   logspc2    ; nope
                    >120  
0089A8: BD 15 08    >121  logspc3  lda   devnam,x   
0089AB: 85 00       >122           sta   temp       ; save path length
0089AD: A0 00       >123           ldy   #0         
0089AF: BD 15 08    >124  logspc4  lda   devnam,x   ; copy pathname
0089B2: 99 00 02    >125           sta   lnbuf,y    
0089B5: E8          >126           inx              
0089B6: C8          >127           iny              
0089B7: C6 00       >128           dec   temp       ; count down
0089B9: 10 F4 =89AF >129           bpl   logspc4    
                    >130  
0089BB: 20 00 BF    >131           jsr   mli        
0089BE: C6          >132           db    $c6        ; log to the prefix
0089BF: 94 8D       >133           dw    p_pfx      
0089C1: 18          >134           clc              
0089C2: F0 01 =89C5 >135           beq   *+3        ; no errors
0089C4: 38          >136           sec              
0089C5: 60          >137           rts              
                    >138  
                    >139  
0089C6: 4C 68 89    >140  copyrts  jmp   logcon     ; log back to main
                    >141  
                    >142  *-------------------------------
                    >143  * copy a list of files
                    >144  
0089C9: 86 06       >145  copy     stx   temp4      ; save pointer for getname
0089CB: 85 07       >146           sta   temp4+1    
                    >147  
0089CD: 20 01 85    >148  copy2    jsr   getname    ; get source name
0089D0: B0 F4 =89C6 >149           bcs   copyrts    
                    >150  
0089D2: 20 68 89    >151           jsr   logcon     ; log to config disk
                    >152  
0089D5: A2 00       >153           ldx   #<flname   ; get info on file
0089D7: A9 03       >154           lda   #>flname   
0089D9: 20 24 8A    >155           jsr   getinfo    
0089DC: D0 EF =89CD >156           bne   copy2      ; opps, error, skip this file
                    >157  
0089DE: 20 5C 87    >158           jsr   open       
0089E1: 20 3E 88    >159           jsr   geteof     ; get eof marker
0089E4: 8E 7A 8D    >160           stx   p_geof+2   
0089E7: 8D 7B 8D    >161           sta   p_geof+3   ; save marker
0089EA: 85 00       >162           sta   temp       
0089EC: E0 00       >163           cpx   #0         ; save number of pages to read
0089EE: F0 02 =89F2 >164           beq   *+4        
0089F0: E6 00       >165           inc   temp       
                    >166  
0089F2: A2 00       >167           ldx   #<copybuf  
0089F4: A9 60       >168           lda   #>copybuf  
0089F6: A0 B0       >169           ldy   #>copymax*2 ; get maximum ram space
0089F8: 20 EB 87    >170           jsr   rdblk      
                    >171  
0089FB: 20 7E 87    >172           jsr   close      ; close the file
                    >173  
0089FE: 20 6F 89    >174           jsr   logdst     ; log to destination
                    >175  
008A01: A0 00       >176           ldy   #0         ; use type $00
008A03: 20 52 87    >177           jsr   create     ; create file
                    >178  
008A06: 20 5C 87    >179           jsr   open       ; open file
                    >180  
008A09: A5 00       >181           lda   temp       
008A0B: 0A          >182           asl   a          ; get number of blocks (1/2 pages) to write
008A0C: A8          >183           tay              
008A0D: A2 00       >184           ldx   #<copybuf  
008A0F: A9 60       >185           lda   #>copybuf  
008A11: 20 E1 87    >186           jsr   wrblk      ; write out the block
                    >187  
008A14: 20 4E 8A    >188           jsr   seteof     ; set end of file
008A17: 20 7E 87    >189           jsr   close      
                    >190  
008A1A: A2 00       >191           ldx   #<flname   
008A1C: A9 03       >192           lda   #>flname   
008A1E: 20 36 8A    >193           jsr   setinfo    ; set file info
008A21: 4C CD 89    >194           jmp   copy2      
                    >195  
                    >196  
                    >197  *-------------------------------
                    >198  * get info on a file
                    >199  
008A24: 8E 7E 8D    >200  getinfo  stx   p_ginfo+1  ; point to filename
008A27: 8D 7F 8D    >201           sta   p_ginfo+2  
008A2A: A9 0A       >202           lda   #10        
008A2C: 8D 7D 8D    >203           sta   p_ginfo    
                    >204  
008A2F: 20 00 BF    >205           jsr   mli        
008A32: C4          >206           db    $c4        ; get info
008A33: 7D 8D       >207           dw    p_ginfo    
008A35: 60          >208           rts              
                    >209  
                    >210  *-------------------------------
                    >211  * set the file info
                    >212  
008A36: 8E 7E 8D    >213  setinfo  stx   p_ginfo+1  ; point to filename
008A39: 8D 7F 8D    >214           sta   p_ginfo+2  
008A3C: A9 07       >215           lda   #7         
008A3E: 8D 7D 8D    >216           sta   p_ginfo    
                    >217  
008A41: 20 00 BF    >218           jsr   mli        
008A44: C3          >219           db    $c3        ; set info
008A45: 7D 8D       >220           dw    p_ginfo    
008A47: 60          >221           rts              
                    >222  
                    >223  *-------------------------------
                    >224  * set the current end of file
                    >225  
008A48: 8E 7A 8D    >226  puteof   stx   p_geof+2   ; set eof marker
008A4B: 8D 7B 8D    >227           sta   p_geof+3   
                    >228  
008A4E: AD 51 87    >229  seteof   lda   refnum     
008A51: 8D 79 8D    >230           sta   p_geof+1   
                    >231  
008A54: 20 00 BF    >232           jsr   mli        
008A57: D0          >233           db    $d0        ; set eof
008A58: 78 8D       >234           dw    p_geof     
008A5A: 60          >235           rts              
                    >236  
                    >237  *-------------------------------
                    >238  * rename a file
                    >239  
008A5B: 86 06       >240  rename   stx   temp4      ; point to data
008A5D: 85 07       >241           sta   temp4+1    
008A5F: 20 01 85    >242           jsr   getname    ; get first name
                    >243  
008A62: A0 3F       >244           ldy   #63        
008A64: B9 00 03    >245  ren2     lda   flname,y   ; copy first name
008A67: 99 80 02    >246           sta   lnbuf+128,y 
008A6A: 88          >247           dey              
008A6B: 10 F7 =8A64 >248           bpl   ren2       
                    >249  
008A6D: 20 01 85    >250           jsr   getname    ; get new name
                    >251  
008A70: 20 00 BF    >252           jsr   mli        
008A73: C2          >253           db    $c2        ; rename file
008A74: 8F 8D       >254           dw    p_ren      
008A76: 60          >255           rts              
                    >256  
                    >257  *-------------------------------
                    >258  * find the config disk
                    >259  
008A77: A2 17       >260  findcon  ldx   #23        
008A79: A9 00       >261           lda   #0         
008A7B: 9D 58 BF    >262  :loop    sta   $bf58,x    ; clear prodos system bit-map
008A7E: CA          >263           dex              
008A7F: D0 FA =8A7B >264           bne   :loop      
                    >265  
008A81: 20 00 BF    >266           jsr   mli        
008A84: C7          >267           db    $c7        ; get prefix
008A85: 97 8D       >268           dw    p_pfx2     ; point to path
                    >269  
008A87: AD A0 8D    >270           lda   conpfx     ; is prefix set to null?
008A8A: D0 1C =8AA8 >271           bne   findc2     ; nope
                    >272  
008A8C: AD 30 BF    >273           lda   $bf30      ; get current slot/drive
008A8F: 8D 19 8E    >274           sta   p_onlin+1  
                    >275  
008A92: 20 00 BF    >276           jsr   mli        
008A95: C5          >277           db    $c5        ; find out prefix of volume
008A96: 18 8E       >278           dw    p_onlin    
                    >279  
008A98: AD A1 8D    >280           lda   conpfx+1   
008A9B: 29 0F       >281           and   #$0f       ; just save name length
008A9D: 18          >282           clc              
008A9E: 69 01       >283           adc   #1         ; advance length of prefix
008AA0: 8D A0 8D    >284           sta   conpfx     
                    >285  
008AA3: A9 2F       >286           lda   #'/'       ; add leading slash for volume name
008AA5: 8D A1 8D    >287           sta   conpfx+1   
                    >288  
008AA8: 4C 68 89    >289  findc2   jmp   logcon     ; log to config
                    >290  
                    >291  *-------------------------------
                    >292  * check free space on volume
                    >293  
008AAB: AD 6F AB    >294  chkspc   lda   drive      
008AAE: 0A          >295           asl   a          
008AAF: 0A          >296           asl   a          
008AB0: 0A          >297           asl   a          
008AB1: 0D 6E AB    >298           ora   slot       ; make into #dsss0000 format
008AB4: 0A          >299           asl   a          
008AB5: 0A          >300           asl   a          
008AB6: 0A          >301           asl   a          
008AB7: 0A          >302           asl   a          
                    >303  
008AB8: 8D 1D 8E    >304           sta   p_onln+1   
008ABB: 20 00 BF    >305           jsr   mli        
008ABE: C5          >306           db    $c5        ; get drive name
008ABF: 1C 8E       >307           dw    p_onln     
008AC1: F0 04 =8AC7 >308           beq   chkspc2    ; all is well
                    >309  
008AC3: A9 00       >310           lda   #0         ; return 0 blocks free -- error
008AC5: AA          >311           tax              
008AC6: 60          >312           rts              
                    >313  
008AC7: AD C9 8D    >314  chkspc2  lda   dstpfx+1   
008ACA: 29 0F       >315           and   #$0f       
008ACC: AA          >316           tax              ; make into volume name
008ACD: E8          >317           inx              
008ACE: 8E C8 8D    >318           stx   dstpfx     
008AD1: A9 2F       >319           lda   #'/'       
008AD3: 8D C9 8D    >320           sta   dstpfx+1   
                    >321  
008AD6: A2 C8       >322           ldx   #<dstpfx   
008AD8: A9 8D       >323           lda   #>dstpfx   ; get info on volume
008ADA: 20 24 8A    >324           jsr   getinfo    
                    >325  
008ADD: 38          >326           sec              
008ADE: AD 82 8D    >327           lda   p_ginfo+5  ; return total number of free blocks
008AE1: ED 85 8D    >328           sbc   p_ginfo+8  
008AE4: AA          >329           tax              
008AE5: AD 83 8D    >330           lda   p_ginfo+6  
008AE8: ED 86 8D    >331           sbc   p_ginfo+9  
008AEB: 60          >332           rts              
                    >333  
                    >334  *-------------------------------
                    >335  * setup initial drive spec list
                    >336  
008AEC: 20 AB 8A    >337  setspec  jsr   chkspc     ;reset path to original drive
008AEF: 20 A3 8B    >338           jsr   makesegs   ;tack the /program on path
                    >339  
008AF2: A0 00       >340           ldy   #0         
008AF4: A9 01       >341           lda   #1         
008AF6: 20 8D 8B    >342           jsr   coppath    ;copy 1 path (A:)
                    >343  
008AF9: 84 00       >344           sty   temp       
008AFB: 20 AB 8A    >345           jsr   chkspc     ;reset path
008AFE: 20 C6 8B    >346           jsr   makesys    ;SYSTEM
008B01: A4 00       >347           ldy   temp       
                    >348  
008B03: A9 01       >349           lda   #1         ;copy 1 path (B:)
008B05: 20 8D 8B    >350           jsr   coppath    
                    >351  
008B08: 84 00       >352           sty   temp       
008B0A: 20 AB 8A    >353           jsr   chkspc     
008B0D: 20 E9 8B    >354           jsr   makegfile  ;GFILES
008B10: A4 00       >355           ldy   temp       
                    >356  
008B12: A9 01       >357           lda   #1         ;copy 1 paths (C:)
008B14: 20 8D 8B    >358           jsr   coppath    
                    >359  
008B17: 84 00       >360           sty   temp       
008B19: 20 AB 8A    >361           jsr   chkspc     
008B1C: 20 0C 8C    >362           jsr   makednload ;DOWNLOAD
008B1F: A4 00       >363           ldy   temp       
                    >364  
008B21: A9 01       >365           lda   #1         ;copy 1 path (D:)
008B23: 20 8D 8B    >366           jsr   coppath    
                    >367  
008B26: 84 00       >368           sty   temp       
008B28: 20 AB 8A    >369           jsr   chkspc     
008B2B: 20 2F 8C    >370           jsr   makeupload ;UPLOAD
008B2E: A4 00       >371           ldy   temp       
                    >372  
008B30: A9 01       >373           lda   #1         ;copy 1 path (E:)
008B32: 20 8D 8B    >374           jsr   coppath    
                    >375  
008B35: 84 00       >376           sty   temp       
008B37: 20 AB 8A    >377           jsr   chkspc     
008B3A: 20 52 8C    >378           jsr   makebltn   ;BULLETINS
008B3D: A4 00       >379           ldy   temp       
                    >380  
008B3F: A9 01       >381           lda   #1         ;copy 1 path (F:)
008B41: 20 8D 8B    >382           jsr   coppath    
                    >383  
008B44: 84 00       >384           sty   temp       
008B46: 20 AB 8A    >385           jsr   chkspc     
008B49: 20 75 8C    >386           jsr   makemail   ;MAIL
008B4C: A4 00       >387           ldy   temp       
                    >388  
008B4E: A9 01       >389           lda   #1         ;copy 1 path (G:)
008B50: 20 8D 8B    >390           jsr   coppath    
                    >391  
008B53: 84 00       >392           sty   temp       
008B55: 20 AB 8A    >393           jsr   chkspc     
008B58: 20 98 8C    >394           jsr   maketemp   ;TEMP
008B5B: A4 00       >395           ldy   temp       
                    >396  
008B5D: A9 01       >397           lda   #1         ;copy 1 path (H:)
008B5F: 20 8D 8B    >398           jsr   coppath    
                    >399  
008B62: A2 03       >400           ldx   #3         ; fill out next 3 specs (I:, J:, K:)
008B64: A9 00       >401           lda   #0         
                    >402  
008B66: 20 85 8B    >403           jsr   :loop      
                    >404  
008B69: AD 38 A5    >405           lda   setxfer    ;did they want supertac?
008B6C: F0 13 =8B81 >406           beq   :noxfer    ;nope
                    >407  
008B6E: 84 00       >408           sty   temp       
008B70: 20 AB 8A    >409           jsr   chkspc     
008B73: 20 BB 8C    >410           jsr   makestac   
008B76: 20 D4 8C    >411           jsr   makesvol   ;STAC/VOL.
008B79: A4 00       >412           ldy   temp       
008B7B: A9 01       >413           lda   #1         ;copy 1 path (L:)
008B7D: 20 8D 8B    >414           jsr   coppath    
008B80: 60          >415           rts              
                    >416  
                    >417  :noxfer                   
008B81: A2 01       >418           ldx   #1         ; fill out last spec (L:)
008B83: A9 00       >419           lda   #0         
                    >420  
008B85: 99 15 08    >421  :loop    sta   devnam,y   
008B88: C8          >422           iny              
008B89: CA          >423           dex              
008B8A: D0 F9 =8B85 >424           bne   :loop      
008B8C: 60          >425           rts              
                    >426  
                    >427  
                    >428  *-------------------------------
                    >429  * copy a path onto the pathname
                    >430  
008B8D: 85 00       >431  coppath  sta   temp       
                    >432  
008B8F: A2 FF       >433  :loop6   ldx   #-1        
008B91: E8          >434  :loop5   inx              
008B92: BD C8 8D    >435           lda   dstpfx,x   ; copy in pathname
008B95: 99 15 08    >436           sta   devnam,y   
008B98: C8          >437           iny              
008B99: EC C8 8D    >438           cpx   dstpfx     ; done?
008B9C: D0 F3 =8B91 >439           bne   :loop5     ; nope
                    >440  
008B9E: C6 00       >441           dec   temp       ; count down paths to enter
008BA0: D0 ED =8B8F >442           bne   :loop6     
008BA2: 60          >443           rts              
                    >444  
                    >445  *-------------------------------
                    >446  * setup /xxx/gbbs.pro/program and log it
                    >447  
008BA3: 20 FD 8C    >448  makesegs jsr   makegbbs   
008BA6: A2 00       >449           ldx   #0         
008BA8: AC C8 8D    >450           ldy   dstpfx     
008BAB: BD 28 8D    >451  :loop    lda   prgname+1,x ; copy on /xxx/gbbs.pro/program
008BAE: 99 C9 8D    >452           sta   dstpfx+1,y 
008BB1: E8          >453           inx              
008BB2: C8          >454           iny              
008BB3: EE C8 8D    >455           inc   dstpfx     ; update length
008BB6: EC 27 8D    >456           cpx   prgname    
008BB9: D0 F0 =8BAB >457           bne   :loop      
008BBB: 60          >458           rts              
                    >459  
008BBC: 20 A3 8B    >460  setprg   jsr   makesegs   
008BBF: 20 00 BF    >461           jsr   mli        
008BC2: C0          >462           db    $c0        ; create new path
008BC3: 20 8E       >463           dw    p_crpth    
008BC5: 60          >464           rts              
                    >465  
                    >466  *-------------------------------
                    >467  * setup /xxx/gbbs.pro/system and log it
                    >468  
008BC6: 20 FD 8C    >469  makesys  jsr   makegbbs   
008BC9: A2 00       >470           ldx   #0         
008BCB: AC C8 8D    >471           ldy   dstpfx     
008BCE: BD 31 8D    >472  :loop    lda   sysname+1,x ; copy on /xxx/gbbs.pro/system
008BD1: 99 C9 8D    >473           sta   dstpfx+1,y 
008BD4: E8          >474           inx              
008BD5: C8          >475           iny              
008BD6: EE C8 8D    >476           inc   dstpfx     ; update length
008BD9: EC 30 8D    >477           cpx   sysname    
008BDC: D0 F0 =8BCE >478           bne   :loop      
008BDE: 60          >479           rts              
                    >480  
008BDF: 20 C6 8B    >481  setsys   jsr   makesys    
008BE2: 20 00 BF    >482           jsr   mli        
008BE5: C0          >483           db    $c0        ; create new path
008BE6: 20 8E       >484           dw    p_crpth    
008BE8: 60          >485           rts              
                    >486  
                    >487  *-------------------------------
                    >488  * setup /xxx/gbbs.pro/gfiles and log it
                    >489  
008BE9: 20 FD 8C    >490  makegfile jsr  makegbbs   
008BEC: A2 00       >491           ldx   #0         
008BEE: AC C8 8D    >492           ldy   dstpfx     
008BF1: BD 39 8D    >493  :loop    lda   gfilename+1,x ; copy on /xxx/gbbs.pro/gfiles
008BF4: 99 C9 8D    >494           sta   dstpfx+1,y 
008BF7: E8          >495           inx              
008BF8: C8          >496           iny              
008BF9: EE C8 8D    >497           inc   dstpfx     ; update length
008BFC: EC 38 8D    >498           cpx   gfilename  
008BFF: D0 F0 =8BF1 >499           bne   :loop      
008C01: 60          >500           rts              
                    >501  
008C02: 20 E9 8B    >502  setgfile jsr   makegfile  
                    >503  
008C05: 20 00 BF    >504           jsr   mli        
008C08: C0          >505           db    $c0        ; create new path
008C09: 20 8E       >506           dw    p_crpth    
008C0B: 60          >507           rts              
                    >508  
                    >509  *-------------------------------
                    >510  * setup /xxx/gbbs.pro/download and log it
                    >511  
008C0C: 20 FD 8C    >512  makednload jsr makegbbs   
008C0F: A2 00       >513           ldx   #0         
008C11: AC C8 8D    >514           ldy   dstpfx     
008C14: BD 41 8D    >515  :loop    lda   dnldname+1,x ; copy on /xxx/gbbs.pro/download
008C17: 99 C9 8D    >516           sta   dstpfx+1,y 
008C1A: E8          >517           inx              
008C1B: C8          >518           iny              
008C1C: EE C8 8D    >519           inc   dstpfx     ; update length
008C1F: EC 40 8D    >520           cpx   dnldname   
008C22: D0 F0 =8C14 >521           bne   :loop      
008C24: 60          >522           rts              
                    >523  
008C25: 20 0C 8C    >524  setdnload jsr  makednload 
                    >525  
008C28: 20 00 BF    >526           jsr   mli        
008C2B: C0          >527           db    $c0        ; create new path
008C2C: 20 8E       >528           dw    p_crpth    
008C2E: 60          >529           rts              
                    >530  
                    >531  *-------------------------------
                    >532  * setup /xxx/gbbs.pro/upload and log it
                    >533  
008C2F: 20 FD 8C    >534  makeupload jsr makegbbs   
008C32: A2 00       >535           ldx   #0         
008C34: AC C8 8D    >536           ldy   dstpfx     
008C37: BD 4B 8D    >537  :loop    lda   upldname+1,x ; copy on /xxx/gbbs.pro/upload
008C3A: 99 C9 8D    >538           sta   dstpfx+1,y 
008C3D: E8          >539           inx              
008C3E: C8          >540           iny              
008C3F: EE C8 8D    >541           inc   dstpfx     ; update length
008C42: EC 4A 8D    >542           cpx   upldname   
008C45: D0 F0 =8C37 >543           bne   :loop      
008C47: 60          >544           rts              
                    >545  
008C48: 20 2F 8C    >546  setupload jsr  makeupload 
                    >547  
008C4B: 20 00 BF    >548           jsr   mli        
008C4E: C0          >549           db    $c0        ; create new path
008C4F: 20 8E       >550           dw    p_crpth    
008C51: 60          >551           rts              
                    >552  
                    >553  *-------------------------------
                    >554  * setup /xxx/gbbs.pro/bulletins and log it
                    >555  
008C52: 20 FD 8C    >556  makebltn jsr   makegbbs   
008C55: A2 00       >557           ldx   #0         
008C57: AC C8 8D    >558           ldy   dstpfx     
008C5A: BD 53 8D    >559  :loop    lda   bltnname+1,x ; copy on /xxx/gbbs.pro/bulletins
008C5D: 99 C9 8D    >560           sta   dstpfx+1,y 
008C60: E8          >561           inx              
008C61: C8          >562           iny              
008C62: EE C8 8D    >563           inc   dstpfx     ; update length
008C65: EC 52 8D    >564           cpx   bltnname   
008C68: D0 F0 =8C5A >565           bne   :loop      
008C6A: 60          >566           rts              
                    >567  
008C6B: 20 52 8C    >568  setbltn  jsr   makebltn   
                    >569  
008C6E: 20 00 BF    >570           jsr   mli        
008C71: C0          >571           db    $c0        ; create new path
008C72: 20 8E       >572           dw    p_crpth    
008C74: 60          >573           rts              
                    >574  
                    >575  *-------------------------------
                    >576  * setup /xxx/gbbs.pro/mail and log it
                    >577  
008C75: 20 FD 8C    >578  makemail jsr   makegbbs   
008C78: A2 00       >579           ldx   #0         
008C7A: AC C8 8D    >580           ldy   dstpfx     
008C7D: BD 5E 8D    >581  :loop    lda   mailname+1,x ; copy on /xxx/gbbs.pro/mail
008C80: 99 C9 8D    >582           sta   dstpfx+1,y 
008C83: E8          >583           inx              
008C84: C8          >584           iny              
008C85: EE C8 8D    >585           inc   dstpfx     ; update length
008C88: EC 5D 8D    >586           cpx   mailname   
008C8B: D0 F0 =8C7D >587           bne   :loop      
008C8D: 60          >588           rts              
                    >589  
008C8E: 20 75 8C    >590  setmail  jsr   makemail   
                    >591  
008C91: 20 00 BF    >592           jsr   mli        
008C94: C0          >593           db    $c0        ; create new path
008C95: 20 8E       >594           dw    p_crpth    
008C97: 60          >595           rts              
                    >596  
                    >597  *-------------------------------
                    >598  * setup /xxx/gbbs.pro/temp and log it
                    >599  
008C98: 20 FD 8C    >600  maketemp jsr   makegbbs   
008C9B: A2 00       >601           ldx   #0         
008C9D: AC C8 8D    >602           ldy   dstpfx     
008CA0: BD 64 8D    >603  :loop    lda   tempname+1,x ; copy on /xxx/gbbs.pro/temp
008CA3: 99 C9 8D    >604           sta   dstpfx+1,y 
008CA6: E8          >605           inx              
008CA7: C8          >606           iny              
008CA8: EE C8 8D    >607           inc   dstpfx     ; update length
008CAB: EC 63 8D    >608           cpx   tempname   
008CAE: D0 F0 =8CA0 >609           bne   :loop      
008CB0: 60          >610           rts              
                    >611  
008CB1: 20 98 8C    >612  settemp  jsr   maketemp   
                    >613  
008CB4: 20 00 BF    >614           jsr   mli        
008CB7: C0          >615           db    $c0        ; create new path
008CB8: 20 8E       >616           dw    p_crpth    
008CBA: 60          >617           rts              
                    >618  
                    >619  *-------------------------------
                    >620  * setup /xxx/gbbs.pro/stac and log it
                    >621  
008CBB: 20 FD 8C    >622  makestac jsr   makegbbs   
008CBE: A2 00       >623           ldx   #0         
008CC0: AC C8 8D    >624           ldy   dstpfx     
008CC3: BD 6A 8D    >625  :loop    lda   stacname+1,x ; copy on /xxx/gbbs.pro/stac
008CC6: 99 C9 8D    >626           sta   dstpfx+1,y 
008CC9: E8          >627           inx              
008CCA: C8          >628           iny              
008CCB: EE C8 8D    >629           inc   dstpfx     ; update length
008CCE: EC 69 8D    >630           cpx   stacname   
008CD1: D0 F0 =8CC3 >631           bne   :loop      
008CD3: 60          >632           rts              
                    >633  
                    >634  makesvol                  
008CD4: A2 00       >635           ldx   #0         
008CD6: AC C8 8D    >636           ldy   dstpfx     
008CD9: BD 70 8D    >637  :loop    lda   svolname+1,x ; copy on /xxx/gbbs.pro/stac/vol.
008CDC: 99 C9 8D    >638           sta   dstpfx+1,y 
008CDF: E8          >639           inx              
008CE0: C8          >640           iny              
008CE1: EE C8 8D    >641           inc   dstpfx     ; update length
008CE4: EC 6F 8D    >642           cpx   svolname   
008CE7: D0 F0 =8CD9 >643           bne   :loop      
008CE9: 60          >644           rts              
                    >645  
                    >646  setstac                   
008CEA: 20 BB 8C    >647           jsr   makestac   
008CED: 20 00 BF    >648           jsr   mli        
008CF0: C0          >649           db    $c0        ; create new path
008CF1: 20 8E       >650           dw    p_crpth    
                    >651  
008CF3: 20 D4 8C    >652           jsr   makesvol   
008CF6: 20 00 BF    >653           jsr   mli        
008CF9: C0          >654           db    $c0        
008CFA: 20 8E       >655           dw    p_crpth    
008CFC: 60          >656           rts              
                    >657  
                    >658  *-------------------------------
                    >659  * setup /xxx/gbbs.pro and log it
                    >660  
008CFD: A2 00       >661  makegbbs ldx   #0         
008CFF: AC C8 8D    >662           ldy   dstpfx     
008D02: BD 1E 8D    >663  :loop    lda   dirname+1,x ; copy on /xxx/gbbs.pro
008D05: 99 C9 8D    >664           sta   dstpfx+1,y 
008D08: E8          >665           inx              
008D09: C8          >666           iny              
008D0A: EE C8 8D    >667           inc   dstpfx     ; update length
008D0D: EC 1D 8D    >668           cpx   dirname    
008D10: D0 F0 =8D02 >669           bne   :loop      
008D12: 60          >670           rts              
                    >671  
008D13: 20 FD 8C    >672  setgbbs  jsr   makegbbs   
008D16: 20 00 BF    >673           jsr   mli        
008D19: C0          >674           db    $c0        ; create new path
008D1A: 20 8E       >675           dw    p_crpth    
008D1C: 60          >676           rts              
                    >677  
                    >678  *-------------------------------
                    >679  * variables
                    >680  
008D1D: 09 2F 47 42 >681  dirname  str   '/GBBS.PRO' 
008D21: 42 53 2E 50 52 4F 
008D27: 08 2F 50 52 >682  prgname  str   '/PROGRAM' 
008D2B: 4F 47 52 41 4D 
008D30: 07 2F 53 59 >683  sysname  str   '/SYSTEM'  
008D34: 53 54 45 4D 
008D38: 07 2F 47 46 >684  gfilename str  '/GFILES'  
008D3C: 49 4C 45 53 
008D40: 09 2F 44 4F >685  dnldname str   '/DOWNLOAD' 
008D44: 57 4E 4C 4F 41 44 
008D4A: 07 2F 55 50 >686  upldname str   '/UPLOAD'  
008D4E: 4C 4F 41 44 
008D52: 0A 2F 42 55 >687  bltnname str   '/BULLETINS' 
008D56: 4C 4C 45 54 49 4E 53 
008D5D: 05 2F 4D 41 >688  mailname str   '/MAIL'    
008D61: 49 4C 
008D63: 05 2F 54 45 >689  tempname str   '/TEMP'    
008D67: 4D 50 
008D69: 05 2F 53 54 >690  stacname str   '/STAC'    
008D6D: 41 43 
008D6F: 05 2F 56 4F >691  svolname str   '/VOL.'    
008D73: 4C 2E 
                    >692  
008D75: 01          >693  p_spfx   db    1          
008D76: FE 01       >694           dw    lnbuf-2    
                    >695  
008D78: 02          >696  p_geof   db    $02        
008D79: 00          >697           db    0          
008D7A: 00 00 00    >698           db    0,0,0      
                    >699  
008D7D: 0A          >700  p_ginfo  db    $0a        
008D7E: 00 00       >701           dw    0          
008D80: 00          >702           db    0          
008D81: 00          >703           db    0          
008D82: 00 00       >704           dw    0          
008D84: 00          >705           db    0          
008D85: 00 00       >706           dw    0          
008D87: 00 00       >707           dw    0          
008D89: 00 00       >708           dw    0          
008D8B: 00 00       >709           dw    0          
008D8D: 00 00       >710           dw    0          
                    >711  
008D8F: 02          >712  p_ren    db    $02        
008D90: 80 02       >713           dw    lnbuf+128  
008D92: 00 03       >714           dw    flname     
                    >715  
008D94: 01          >716  p_pfx    db    1          
008D95: 00 02       >717           dw    lnbuf      
                    >718  
008D97: 01          >719  p_pfx2   db    1          
008D98: A0 8D       >720           dw    conpfx     
                    >721  
008D9A: 01          >722  p_pfx3   db    1          
008D9B: C8 8D       >723           dw    dstpfx     
                    >724  
008D9D: 01          >725  p_pfx4   db    1          
008D9E: F0 8D       >726           dw    prgpfx     
                    >727  
008DA0: 00 00 00 00 >728  conpfx   ds    40,0       ; max length
008DA4: 00 00 00 00 00 00 00 00 
008DAC: 00 00 00 00 00 00 00 00 
008DB4: 00 00 00 00 00 00 00 00 
008DBC: 00 00 00 00 00 00 00 00 
008DC4: 00 00 00 00 
                    >729  
008DC8: 00 00 00 00 >730  dstpfx   ds    40,0       ; max length
008DCC: 00 00 00 00 00 00 00 00 
008DD4: 00 00 00 00 00 00 00 00 
008DDC: 00 00 00 00 00 00 00 00 
008DE4: 00 00 00 00 00 00 00 00 
008DEC: 00 00 00 00 
                    >731  
008DF0: 00 00 00 00 >732  prgpfx   ds    40,0       ; max length
008DF4: 00 00 00 00 00 00 00 00 
008DFC: 00 00 00 00 00 00 00 00 
008E04: 00 00 00 00 00 00 00 00 
008E0C: 00 00 00 00 00 00 00 00 
008E14: 00 00 00 00 
                    >733  
008E18: 02          >734  p_onlin  db    2          
008E19: 00          >735           db    0          
008E1A: A1 8D       >736           dw    conpfx+1   
                    >737  
008E1C: 02          >738  p_onln   db    2          
008E1D: 00          >739           db    0          
008E1E: C9 8D       >740           dw    dstpfx+1   
                    >741  
008E20: 07          >742  p_crpth  db    7          
008E21: C8 8D       >743           dw    dstpfx     
008E23: C3          >744           db    $c3        
008E24: 0F          >745           db    $0f        
008E25: 00 00       >746           dw    $0000      
008E27: 0D          >747           db    $0d        
008E28: 00 00       >748           dw    0          
008E2A: 00 00       >749           dw    0          
                     20            put   viddvr     
                    >1    *-------------------------------
                    >2    * video driver for config
                    >3    *-------------------------------
                    >4    
                    >5    *-------------------------------
                    >6    * Date: 3/11/88
                    >7    *-------------------------------
                    >8    
            =C054   >9    page1    equ   $c054      
            =C055   >10   page2    equ   $c055      
                    >11   
                    >12   VideoStartup              
008E2C: 8D 0C C0    >13            sta   $c00c      ;clr80vid
008E2F: 8D 00 C0    >14            sta   $c000      ;clr80col
008E32: 8D 54 C0    >15            sta   page1      
                    >16   
008E35: A9 00       >17            lda   #0         ; set to page 1
008E37: 85 10       >18            sta   inverse    ; set to normal mode
008E39: 60          >19            rts              
                    >20   
                    >21   *-------------------------------
                    >22   
008E3A: A9 06       >23   cls      lda   #6         ;clear screen
008E3C: 85 25       >24            sta   cv         ;line 6 on down
                    >25   
008E3E: A5 25       >26   clslup2  lda   cv         ;clear to end of screen
008E40: 0A          >27            asl   a          ;cv := cv * 2
008E41: A8          >28            tay              
008E42: B9 4F 8F    >29            lda   LineAddress,y 
008E45: 85 0D       >30            sta   base       
008E47: C8          >31            iny              
008E48: B9 4F 8F    >32            lda   LineAddress,y 
008E4B: 85 0E       >33            sta   base+1     
                    >34   
008E4D: A0 27       >35            ldy   #39        
008E4F: A9 A0       >36            lda   #$a0       
008E51: 91 0D       >37   :loop    sta   (base),y   
008E53: 88          >38            dey              
008E54: 10 FB =8E51 >39            bpl   :loop      
                    >40   
008E56: E6 25       >41            inc   cv         
008E58: A5 25       >42            lda   cv         
008E5A: C9 18       >43            cmp   #24        
008E5C: D0 E0 =8E3E >44            bne   clslup2    
                    >45   
008E5E: A9 00       >46            lda   #0         ;0,7
008E60: 85 24       >47            sta   ch         
008E62: A9 07       >48            lda   #7         
008E64: 85 25       >49            sta   cv         
008E66: 60          >50            rts              
                    >51   
                    >52   *-------------------------------
                    >53   
008E67: 86 25       >54   cleos    stx   cv         
008E69: 4C 3E 8E    >55            jmp   clslup2    
                    >56   
008E6C: 48          >57   cleol    pha              
008E6D: A5 24       >58            lda   ch         ; save location of cursor
008E6F: 48          >59            pha              
008E70: A5 25       >60            lda   cv         
008E72: 48          >61            pha              
                    >62   
008E73: A9 20       >63   cleol2   lda   #' '       
008E75: 20 08 8F    >64            jsr   cout       ; put space over char
008E78: A5 24       >65            lda   ch         
008E7A: D0 F7 =8E73 >66            bne   cleol2     ; go until it wraps to next line
                    >67   
008E7C: 68          >68            pla              
008E7D: 85 25       >69            sta   cv         ; put cursor back
008E7F: 68          >70            pla              
008E80: 85 24       >71            sta   ch         
008E82: 68          >72            pla              
008E83: 60          >73            rts              
                    >74   
                    >75   *-------------------------------
                    >76   
008E84: 48          >77   TopBox   pha              
                    >78   
008E85: A9 00       >79            lda   #0         
008E87: 85 25       >80            sta   cv         
                    >81   
008E89: 20 CA 8E    >82            jsr   doILine    
008E8C: E6 25       >83            inc   cv         
008E8E: 20 B1 8E    >84            jsr   doEdge     
008E91: E6 25       >85            inc   cv         
008E93: 20 B1 8E    >86            jsr   doEdge     
008E96: E6 25       >87            inc   cv         
008E98: 20 B1 8E    >88            jsr   doEdge     
008E9B: E6 25       >89            inc   cv         
008E9D: 20 B1 8E    >90            jsr   doEdge     
008EA0: E6 25       >91            inc   cv         
008EA2: 20 CA 8E    >92            jsr   doILine    
                    >93   
008EA5: A0 27       >94            ldy   #39        
008EA7: A9 20       >95            lda   #$20       
008EA9: 91 0D       >96            sta   (base),y   
008EAB: A0 00       >97            ldy   #0         
008EAD: 91 0D       >98            sta   (base),y   
                    >99   
008EAF: 68          >100           pla              
008EB0: 60          >101           rts              
                    >102  
                    >103  *-------------------------------
                    >104  
008EB1: 20 D7 8E    >105  doEdge   jsr   makebase   
                    >106  
008EB4: A0 00       >107           ldy   #0         
008EB6: A9 20       >108           lda   #$20       
008EB8: 91 0D       >109           sta   (base),y   
                    >110  
008EBA: A0 26       >111           ldy   #38        
008EBC: A9 A0       >112           lda   #$a0       
008EBE: 91 0D       >113  :loop    sta   (base),y   
008EC0: 88          >114           dey              
008EC1: D0 FB =8EBE >115           bne   :loop      
                    >116  
008EC3: A0 27       >117           ldy   #39        
008EC5: A9 20       >118           lda   #$20       
008EC7: 91 0D       >119           sta   (base),y   
008EC9: 60          >120           rts              
                    >121  
                    >122  *-------------------------------
                    >123  * print an inverse line across the screen
                    >124  
008ECA: 20 D7 8E    >125  doILine  jsr   makebase   
                    >126  
008ECD: A0 27       >127           ldy   #39        
008ECF: A9 DF       >128           lda   #$df       
008ED1: 91 0D       >129  :loop    sta   (base),y   
008ED3: 88          >130           dey              
008ED4: 10 FB =8ED1 >131           bpl   :loop      
008ED6: 60          >132           rts              
                    >133  
                    >134  *-------------------------------
                    >135  
008ED7: A5 25       >136  makebase lda   cv         
008ED9: 0A          >137           asl   a          
008EDA: A8          >138           tay              ;setup indirect address
008EDB: B9 4F 8F    >139           lda   LineAddress,y 
008EDE: 85 0D       >140           sta   base       
008EE0: C8          >141           iny              
008EE1: B9 4F 8F    >142           lda   LineAddress,y 
008EE4: 85 0E       >143           sta   base+1     
008EE6: 60          >144           rts              
                    >145  
                    >146  *-------------------------------
                    >147  
008EE7: 48          >148  plotchr  pha              ; save
008EE8: 20 D7 8E    >149           jsr   makebase   ;setup indirect for screen address
008EEB: A4 24       >150           ldy   ch         
008EED: 68          >151           pla              
                    >152  
008EEE: 09 80       >153           ora   #$80       ;set high bit
                    >154  
                    >155  * check for ][ plus
                    >156  
008EF0: 86 09       >157           stx   x_save     ;save x
008EF2: AE B3 FB    >158           ldx   $fbb3      
008EF5: E0 EA       >159           cpx   #$ea       ;][ plus?
008EF7: D0 0A =8F03 >160           bne   plotchr1   ;nope
                    >161  
                    >162  * convert everything to uppercase
                    >163  
008EF9: C9 E1       >164           cmp   #"a"       ;lower?
008EFB: 90 06 =8F03 >165           bcc   plotchr1   ;nope
008EFD: C9 FB       >166           cmp   #"z"+1     ;lower?
008EFF: B0 02 =8F03 >167           bcs   plotchr1   ;nope
008F01: E9 1F       >168           sbc   #$1f       ;make upper
                    >169  
008F03: A6 09       >170  plotchr1 ldx   x_save     
008F05: 91 0D       >171           sta   (base),y   ;put it onto the screen
008F07: 60          >172           rts              
                    >173  
                    >174  *-------------------------------
                    >175  * output a character
                    >176  
008F08: 86 09       >177  cout     stx   x_save     ; save everything
008F0A: 84 0A       >178           sty   y_save     
008F0C: 48          >179           pha              
                    >180  
008F0D: C9 0D       >181           cmp   #cr        
008F0F: F0 17 =8F28 >182           beq   cout2      
008F11: C9 0A       >183           cmp   #lf        
008F13: F0 17 =8F2C >184           beq   cout3      
008F15: C9 08       >185           cmp   #bs        
008F17: F0 23 =8F3C >186           beq   cout5      
008F19: C9 20       >187           cmp   #' '       
008F1B: 90 19 =8F36 >188           bcc   cout4      
                    >189  
008F1D: 20 E7 8E    >190           jsr   plotchr    ; plot the sucker
                    >191  
008F20: E6 24       >192           inc   ch         ; move over 1 space
008F22: A4 24       >193           ldy   ch         
008F24: C0 28       >194           cpy   #40        ; wrap-around?
008F26: D0 0E =8F36 >195           bne   cout4      ; nope
                    >196  
008F28: A0 00       >197  cout2    ldy   #0         ; reset horiz
008F2A: 84 24       >198           sty   ch         
                    >199  
008F2C: E6 25       >200  cout3    inc   cv         ; go down 1 line
008F2E: A5 25       >201           lda   cv         ; is it in range?
008F30: C9 18       >202           cmp   #24        
008F32: D0 02 =8F36 >203           bne   cout4      ; nope
                    >204  
008F34: C6 25       >205           dec   cv         ; put it back
                    >206  
008F36: 68          >207  cout4    pla              
008F37: A6 09       >208           ldx   x_save     ; restore stuff
008F39: A4 0A       >209           ldy   y_save     
008F3B: 60          >210           rts              
                    >211  
008F3C: C6 24       >212  cout5    dec   ch         ; backup
008F3E: 10 F6 =8F36 >213           bpl   cout4      ; all is well
                    >214  
008F40: A9 28       >215           lda   #40        ; move to end of line
008F42: 85 24       >216           sta   ch         
                    >217  
008F44: A5 25       >218           lda   cv         ; are we at the top
008F46: C9 00       >219           cmp   #0         
008F48: F0 EC =8F36 >220           beq   cout4      ; yep
                    >221  
008F4A: C6 25       >222           dec   cv         
008F4C: 4C 36 8F    >223           jmp   cout4      ; ok, we are done
                    >224  
                    >225  *-------------------------------
                    >226  
008F4F: 00 04       >227  LineAddress dw $400       
008F51: 80 04       >228           dw    $480       
008F53: 00 05       >229           dw    $500       
008F55: 80 05       >230           dw    $580       
008F57: 00 06       >231           dw    $600       ;first 1/3 of text screen
008F59: 80 06       >232           dw    $680       
008F5B: 00 07       >233           dw    $700       
008F5D: 80 07       >234           dw    $780       
                    >235  
008F5F: 28 04       >236           dw    $428       
008F61: A8 04       >237           dw    $4a8       
008F63: 28 05       >238           dw    $528       
008F65: A8 05       >239           dw    $5a8       
008F67: 28 06       >240           dw    $628       ;second 1/3 of text screen
008F69: A8 06       >241           dw    $6a8       
008F6B: 28 07       >242           dw    $728       
008F6D: A8 07       >243           dw    $7a8       
                    >244  
008F6F: 50 04       >245           dw    $450       
008F71: D0 04       >246           dw    $4d0       
008F73: 50 05       >247           dw    $550       
008F75: D0 05       >248           dw    $5d0       
008F77: 50 06       >249           dw    $650       ;last 1/3 of text screen
008F79: D0 06       >250           dw    $6d0       
008F7B: 50 07       >251           dw    $750       
008F7D: D0 07       >252           dw    $7d0       
                     21            put   modem      
                    >1    *-------------------------------
                    >2    * Date: 3/11/88
                    >3    *-------------------------------
                    >4    
                    >5    *-------------------------------
                    >6    * modems
                    >7    
                    >8    nullmdm  ext              ;null modem driver
                    >9    cat103   ext              ;300 baud cat driver
                    >10   cat212   ext              ;1200 baud cat driver
                    >11   mm2      ext              ;micromodem II driver
                    >12   ssc      ext              ;super serial driver
                    >13   gsport1  ext              ;location for gs port driver
                    >14   gsport2  ext              ;loc for gs port slot #2
                    >15   gs1hst   ext              ;location for GS Port1 HST
                    >16   gs2hst   ext              ;location for GS Port2 HST
                    >17   ultra1   ext              ;location for GS Port1 Ultra
                    >18   ultra2   ext              ;location for GS Port2 Ultra
                    >19   singlespd ext             ;single speed driver
                    >20   multispd ext              ;multi-speed <return> driver
                    >21   nocar    ext              ;no carrier driver
                    >22   
                    >23   *-------------------------------
                    >24   * init strings
                    >25   
                    >26   usr2400  ext              ;init string for usr 2400
                    >27   usr9600  ext              ;init string for usr 9600
                    >28   apl1200  ext              
                    >29   hayes1200 ext             
                    >30   hayes2400 ext             
                    >31   hayes9600 ext             
                    >32   pro2400  ext              
                    >33   generic  ext              
                    >34   epic     ext              
                    >35   datalink24 ext            
                    >36   ultra9600 ext             
                    >37   
                    >38   *-------------------------------
                    >39   * Reconfigure modem
                    >40   *-------------------------------
                    >41   
008F7F: 2C 8E 82    >42   re_mdm   bit   init       
008F82: 30 0A =8F8E >43            bmi   re_mdmx    
                    >44   
008F84: A2 0F       >45            ldx   #<start    ; setup esc handler
008F86: A9 81       >46            lda   #>start    
008F88: 20 18 86    >47            jsr   escape     
008F8B: 4C 95 8F    >48            jmp   re_mdm0    
                    >49   
008F8E: A2 B6       >50   re_mdmx  ldx   #<doinit   
008F90: A9 9D       >51            lda   #>doinit   ; setup aux esc handler
008F92: 20 18 86    >52            jsr   escape     
                    >53   
008F95: A9 01       >54   re_mdm0  lda   #1         ; set input length at 1
008F97: 85 0F       >55            sta   maxlen     
008F99: A9 90       >56            lda   #%10010000 
008F9B: 8D AF 83    >57            sta   inpmode    
                    >58   
008F9E: 20 84 8E    >59   re_mdm3  jsr   TopBox     
008FA1: 20 9E 82    >60            jsr   print      
008FA4: 01 03 06    >61            db    1,3,6      
008FA7: 2D 20 52 65 >62            asc   '- Reconfigure Modem Driver -',00 
008FAB: 63 6F 6E 66 69 67 75 72 
008FB3: 65 20 4D 6F 64 65 6D 20 
008FBB: 44 72 69 76 65 72 20 2D 
008FC3: 00 
                    >63   
008FC4: 20 3A 8E    >64            jsr   cls        
008FC7: 20 9E 82    >65            jsr   print      
008FCA: 01 07 00    >66            db    1,7,0      
008FCD: 20 31 20 2D >67            asc   ' 1 - No Modem/Local mode',0d,0d 
008FD1: 20 4E 6F 20 4D 6F 64 65 
008FD9: 6D 2F 4C 6F 63 61 6C 20 
008FE1: 6D 6F 64 65 0D 0D 
008FE7: 20 32 20 2D >68            asc   ' 2 - Apple-Cat 103 - 300 baud',0d 
008FEB: 20 41 70 70 6C 65 2D 43 
008FF3: 61 74 20 31 30 33 20 2D 
008FFB: 20 33 30 30 20 62 61 75 
009003: 64 0D 
009005: 20 33 20 2D >69            asc   ' 3 - Apple-Cat 212 - 300/1200 baud',0d 
009009: 20 41 70 70 6C 65 2D 43 
009011: 61 74 20 32 31 32 20 2D 
009019: 20 33 30 30 2F 31 32 30 
009021: 30 20 62 61 75 64 0D 
009028: 20 34 20 2D >70            asc   ' 4 - DC Hayes Micromodem II',0d 
00902C: 20 44 43 20 48 61 79 65 
009034: 73 20 4D 69 63 72 6F 6D 
00903C: 6F 64 65 6D 20 49 49 0D 
009044: 20 35 20 2D >71            asc   ' 5 - Zoom Modem IIe',0d,0d 
009048: 20 5A 6F 6F 6D 20 4D 6F 
009050: 64 65 6D 20 49 49 65 0D 
009058: 0D 
009059: 20 36 20 2D >72            asc   ' 6 - Epic 2400 Classic II',0d 
00905D: 20 45 70 69 63 20 32 34 
009065: 30 30 20 43 6C 61 73 73 
00906D: 69 63 20 49 49 0D 
009073: 20 37 20 2D >73            asc   ' 7 - Applied Engineering DataLink 2400',0d,0d 
009077: 20 41 70 70 6C 69 65 64 
00907F: 20 45 6E 67 69 6E 65 65 
009087: 72 69 6E 67 20 44 61 74 
00908F: 61 4C 69 6E 6B 20 32 34 
009097: 30 30 0D 0D 
00909B: 20 38 20 2D >74            asc   ' 8 - Super Serial Card driver',0d 
00909F: 20 53 75 70 65 72 20 53 
0090A7: 65 72 69 61 6C 20 43 61 
0090AF: 72 64 20 64 72 69 76 65 
0090B7: 72 0D 
0090B9: 20 39 20 2D >75            asc   ' 9 - Apple IIgs Serial Port driver',0d 
0090BD: 20 41 70 70 6C 65 20 49 
0090C5: 49 67 73 20 53 65 72 69 
0090CD: 61 6C 20 50 6F 72 74 20 
0090D5: 64 72 69 76 65 72 0D 
0090DC: 31 30 20 2D >76            asc   '10 - Single Speed SSC driver',0d 
0090E0: 20 53 69 6E 67 6C 65 20 
0090E8: 53 70 65 65 64 20 53 53 
0090F0: 43 20 64 72 69 76 65 72 
0090F8: 0D 
0090F9: 31 31 20 2D >77            asc   '11 - Multiple Spd SSC driver (IIc port)',0d 
0090FD: 20 4D 75 6C 74 69 70 6C 
009105: 65 20 53 70 64 20 53 53 
00910D: 43 20 64 72 69 76 65 72 
009115: 20 28 49 49 63 20 70 6F 
00911D: 72 74 29 0D 
009121: 31 32 20 2D >78            asc   '12 - No Carrier SSC driver',0d,0d 
009125: 20 4E 6F 20 43 61 72 72 
00912D: 69 65 72 20 53 53 43 20 
009135: 64 72 69 76 65 72 0D 0D 
00913D: 57 68 69 63 >79            asc   'Which? [1-12] ',00 
009141: 68 3F 20 5B 31 2D 31 32 
009149: 5D 20 00 
                    >80   
00914C: A2 0C       >81            ldx   #12        ; get serial device
00914E: 20 B0 83    >82            jsr   inpnum     
009151: 8D FF 1F    >83            sta   serialtype ;save the device type
                    >84   
009154: 0A          >85            asl   a          ;point0 points to the
009155: AA          >86            tax              ;serial device driver
009156: BD 4F 97    >87            lda   devtable,x 
009159: 85 11       >88            sta   point0     
00915B: E8          >89            inx              
00915C: BD 4F 97    >90            lda   devtable,x 
00915F: 85 12       >91            sta   point0+1   
                    >92   
009161: A9 00       >93            lda   #<mdmdrv   ;tell it to move the modem
009163: 85 14       >94            sta   point1     ;driver
009165: A9 0E       >95            lda   #>mdmdrv   
009167: 85 15       >96            sta   point1+1   
                    >97   
009169: A9 0C       >98            lda   #12        ;default is generic
00916B: 0A          >99            asl   a          ;point init string to the
00916C: AA          >100           tax              ;right place
00916D: BD 69 97    >101           lda   strtable,x 
009170: 85 FD       >102           sta   point3     
009172: E8          >103           inx              
009173: BD 69 97    >104           lda   strtable,x 
009176: 85 FE       >105           sta   point3+1   
                    >106  
009178: AD FF 1F    >107           lda   serialtype ;is it internal?
00917B: C9 08       >108           cmp   #8         
00917D: B0 1C =919B >109           bcs   getinit    ;nope, get an init string
00917F: C9 07       >110           cmp   #7         ;was it AE Datalink 2400?
009181: F0 10 =9193 >111           beq   :dl24      ;use DL init string
009183: C9 06       >112           cmp   #6         ;was it the Epic internal?
009185: F0 0F =9196 >113           beq   :epic24    ;yes, set for epic string
009187: C9 01       >114           cmp   #1         ;nullmodem?
009189: D0 05 =9190 >115           bne   :internal  ;nope, just internal
00918B: 48          >116           pha              ;push garbage data
00918C: 48          >117           pha              
00918D: 4C E1 96    >118           jmp   movepage   ;move & fix into place
                    >119  
009190: 4C 06 95    >120  :internal jmp  getslot    ;must have been internal, skip next
                    >121  
009193: A9 0E       >122  :dl24    lda   #14        ;datalink string is #14
009195: 2C          >123           hex   2c         ;skip next instruction
                    >124  
009196: A9 01       >125  :epic24  lda   #1         ;default for epic is &s1&d2
009198: 4C 17 93    >126           jmp   getinit1   ;move init sting into right place
                    >127  
                    >128  *-------------------------------
                    >129  * get the init string for the modem
                    >130  
00919B: 20 3A 8E    >131  getinit  jsr   cls        
00919E: 20 9E 82    >132           jsr   print      
0091A1: 01 07 00    >133           db    1,7,0      
0091A4: 43 68 6F 6F >134           asc   'Choose Modem:',0d,0d 
0091A8: 73 65 20 4D 6F 64 65 6D 
0091B0: 3A 0D 0D 
0091B3: 20 31 20 2D >135           asc   ' 1 - Epic 2400 Plus',0d 
0091B7: 20 45 70 69 63 20 32 34 
0091BF: 30 30 20 50 6C 75 73 0D 
0091C7: 20 32 20 2D >136           asc   ' 2 - USRobotics Courier 2400',0d 
0091CB: 20 55 53 52 6F 62 6F 74 
0091D3: 69 63 73 20 43 6F 75 72 
0091DB: 69 65 72 20 32 34 30 30 
0091E3: 0D 
0091E4: 20 33 20 2D >137           asc   ' 3 - USRobotics Courier HST',0d 
0091E8: 20 55 53 52 6F 62 6F 74 
0091F0: 69 63 73 20 43 6F 75 72 
0091F8: 69 65 72 20 48 53 54 0D 
009200: 20 34 20 2D >138           asc   ' 4 - Apple Modem 1200',0d 
009204: 20 41 70 70 6C 65 20 4D 
00920C: 6F 64 65 6D 20 31 32 30 
009214: 30 0D 
009216: 20 35 20 2D >139           asc   ' 5 - Prometheus Promodem 1200',0d 
00921A: 20 50 72 6F 6D 65 74 68 
009222: 65 75 73 20 50 72 6F 6D 
00922A: 6F 64 65 6D 20 31 32 30 
009232: 30 0D 
009234: 20 36 20 2D >140           asc   ' 6 - Prometheus Promodem 2400',0d 
009238: 20 50 72 6F 6D 65 74 68 
009240: 65 75 73 20 50 72 6F 6D 
009248: 6F 64 65 6D 20 32 34 30 
009250: 30 0D 
009252: 20 37 20 2D >141           asc   ' 7 - Novation SmartCat',0d 
009256: 20 4E 6F 76 61 74 69 6F 
00925E: 6E 20 53 6D 61 72 74 43 
009266: 61 74 0D 
009269: 20 38 20 2D >142           asc   ' 8 - Novation Professional 2400',0d 
00926D: 20 4E 6F 76 61 74 69 6F 
009275: 6E 20 50 72 6F 66 65 73 
00927D: 73 69 6F 6E 61 6C 20 32 
009285: 34 30 30 0D 
009289: 20 39 20 2D >143           asc   ' 9 - Hayes 1200',0d 
00928D: 20 48 61 79 65 73 20 31 
009295: 32 30 30 0D 
009299: 31 30 20 2D >144           asc   '10 - Hayes 2400',0d 
00929D: 20 48 61 79 65 73 20 32 
0092A5: 34 30 30 0D 
0092A9: 31 31 20 2D >145           asc   '11 - Hayes V-Series 9600',0d 
0092AD: 20 48 61 79 65 73 20 56 
0092B5: 2D 53 65 72 69 65 73 20 
0092BD: 39 36 30 30 0D 
0092C2: 31 32 20 2D >146           asc   '12 - Hayes Ultra 9600/PP 9600sa'0d 
0092C6: 20 48 61 79 65 73 20 55 
0092CE: 6C 74 72 61 20 39 36 30 
0092D6: 30 2F 50 50 20 39 36 30 
0092DE: 30 73 61 0D 
0092E2: B1 B3 A0 AD >147           asc   !13        - Generic 'AT' Compatible!,0d,0d
0092E6: A0 C7 E5 EE E5 F2 E9 E3 
0092EE: A0 A7 C1 D4 A7 A0 C3 EF 
0092F6: ED F0 E1 F4 E9 E2 EC E5 
0092FE: 0D 0D 
009300: 57 68 69 63 >148           asc   'Which? [1-13] ',00 
009304: 68 3F 20 5B 31 2D 31 33 
00930C: 5D 20 00 
                    >149  
00930F: A2 0D       >150           ldx   #13        
009311: 20 B0 83    >151           jsr   inpnum     
009314: 8D FE 1F    >152           sta   modemtype  
                    >153  
009317: 0A          >154  getinit1 asl   a          ;point init string to the
009318: AA          >155           tax              ;right place
009319: BD 69 97    >156           lda   strtable,x 
00931C: 85 FD       >157           sta   point3     
00931E: E8          >158           inx              
00931F: BD 69 97    >159           lda   strtable,x 
009322: 85 FE       >160           sta   point3+1   
                    >161  
                    >162  *-------------------------------
                    >163  
009324: 20 3A 8E    >164  setinit  jsr   cls        
009327: 20 9E 82    >165           jsr   print      
00932A: 01 07 00    >166           db    1,7,0      
00932D: 54 68 65 20 >167           asc   'The init string for this modem is:',0d,0d,00 
009331: 69 6E 69 74 20 73 74 72 
009339: 69 6E 67 20 66 6F 72 20 
009341: 74 68 69 73 20 6D 6F 64 
009349: 65 6D 20 69 73 3A 0D 0D 
009351: 00 
                    >168  
009352: A0 00       >169           ldy   #0         
009354: B1 FD       >170  :loop    lda   (point3),y 
009356: 99 00 18    >171           sta   initbuf,y  
009359: F0 06 =9361 >172           beq   :done      
00935B: 20 08 8F    >173           jsr   cout       
00935E: C8          >174           iny              
00935F: D0 F3 =9354 >175           bne   :loop      
                    >176  
009361: 20 9E 82    >177  :done    jsr   print      
009364: 0D          >178           hex   0d         
009365: 50 72 65 73 >179           asc   'Press [RETURN] to accept this as'0d 
009369: 73 20 5B 52 45 54 55 52 
009371: 4E 5D 20 74 6F 20 61 63 
009379: 63 65 70 74 20 74 68 69 
009381: 73 20 61 73 0D 
009386: 64 65 66 61 >180           asc   'default, or enter a new init string.',0d 
00938A: 75 6C 74 2C 20 6F 72 20 
009392: 65 6E 74 65 72 20 61 20 
00939A: 6E 65 77 20 69 6E 69 74 
0093A2: 20 73 74 72 69 6E 67 2E 
0093AA: 0D 
0093AB: 3A 00       >181           asc   ':',00     
                    >182  
0093AD: A9 27       >183           lda   #39        ; only allow 39 chars
0093AF: 85 0F       >184           sta   maxlen     
0093B1: A9 A0       >185           lda   #%10100000 
0093B3: 8D AF 83    >186           sta   inpmode    ;ascii
0093B6: 20 3C 83    >187           jsr   inpln      ; get the input
0093B9: AC 00 02    >188           ldy   lnbuf      
0093BC: C0 0D       >189           cpy   #cr        
0093BE: F0 13 =93D3 >190           beq   getans     ; use default
                    >191  
0093C0: A0 FF       >192           ldy   #-1        
0093C2: C8          >193  :loop2   iny              ;move the typed init string
0093C3: B9 00 02    >194           lda   lnbuf,y    
0093C6: 99 00 18    >195           sta   initbuf,y  
0093C9: C9 0D       >196           cmp   #cr        
0093CB: D0 F5 =93C2 >197           bne   :loop2     
                    >198  
0093CD: C8          >199           iny              
0093CE: A9 00       >200           lda   #0         
0093D0: 99 00 18    >201           sta   initbuf,y  
                    >202  
                    >203  *-------------------------------
                    >204  * get the answer string
                    >205  
0093D3: 20 3A 8E    >206  getans   jsr   cls        
0093D6: 20 9E 82    >207           jsr   print      
0093D9: 01 07 00    >208           db    1,7,0      
0093DC: 54 68 65 20 >209           asc   'The answer string for this modem is:',0d,0d,00 
0093E0: 61 6E 73 77 65 72 20 73 
0093E8: 74 72 69 6E 67 20 66 6F 
0093F0: 72 20 74 68 69 73 20 6D 
0093F8: 6F 64 65 6D 20 69 73 3A 
009400: 0D 0D 00 
                    >210  
009403: A0 00       >211           ldy   #0         
009405: B9 87 97    >212  :loop    lda   atastr,y   
009408: 99 30 18    >213           sta   ansbuf,y   
00940B: F0 06 =9413 >214           beq   :done      
00940D: 20 08 8F    >215           jsr   cout       
009410: C8          >216           iny              
009411: D0 F2 =9405 >217           bne   :loop      
                    >218  
009413: 20 9E 82    >219  :done    jsr   print      
009416: 0D          >220           hex   0d         
009417: 50 72 65 73 >221           asc   'Press [RETURN] to accept this, or',0d 
00941B: 73 20 5B 52 45 54 55 52 
009423: 4E 5D 20 74 6F 20 61 63 
00942B: 63 65 70 74 20 74 68 69 
009433: 73 2C 20 6F 72 0D 
009439: 65 6E 74 65 >222           asc   'enter a new answer string.',0d 
00943D: 72 20 61 20 6E 65 77 20 
009445: 61 6E 73 77 65 72 20 73 
00944D: 74 72 69 6E 67 2E 0D 
009454: 3A 00       >223           asc   ':',00     
                    >224  
009456: A9 0F       >225           lda   #15        ; only allow 15 chars
009458: 85 0F       >226           sta   maxlen     
00945A: 20 3C 83    >227           jsr   inpln      ; get the input
00945D: AC 00 02    >228           ldy   lnbuf      
009460: C0 0D       >229           cpy   #cr        
009462: F0 13 =9477 >230           beq   getdcd     ; use default
                    >231  
009464: A0 FF       >232           ldy   #-1        
009466: C8          >233  :loop2   iny              ;move the typed answer string
009467: B9 00 02    >234           lda   lnbuf,y    
00946A: 99 30 18    >235           sta   ansbuf,y   
00946D: C9 0D       >236           cmp   #cr        
00946F: D0 F5 =9466 >237           bne   :loop2     
                    >238  
009471: C8          >239           iny              
009472: A9 00       >240           lda   #0         
009474: 99 30 18    >241           sta   ansbuf,y   
                    >242  
                    >243  *-------------------------------
                    >244  * get the dcd drop type
                    >245  
009477: 20 9E 82    >246  getdcd   jsr   print      
00947A: 0D 0D       >247           hex   0d,0d      
00947C: 57 68 61 74 >248           asc   'What type of carrier detect should'0d 
009480: 20 74 79 70 65 20 6F 66 
009488: 20 63 61 72 72 69 65 72 
009490: 20 64 65 74 65 63 74 20 
009498: 73 68 6F 75 6C 64 0D 
00949F: 74 68 65 20 >249           asc   'the modem driver use?',0d,0d 
0094A3: 6D 6F 64 65 6D 20 64 72 
0094AB: 69 76 65 72 20 75 73 65 
0094B3: 3F 0D 0D 
0094B6: 20 31 20 2D >250           asc   ' 1 - DSR Carrier Detect [Normal]',0d 
0094BA: 20 44 53 52 20 43 61 72 
0094C2: 72 69 65 72 20 44 65 74 
0094CA: 65 63 74 20 5B 4E 6F 72 
0094D2: 6D 61 6C 5D 0D 
0094D7: 20 32 20 2D >251           asc   ' 2 - DCD Carrier Detect',0d,0d 
0094DB: 20 44 43 44 20 43 61 72 
0094E3: 72 69 65 72 20 44 65 74 
0094EB: 65 63 74 0D 0D 
0094F0: 57 68 69 63 >252           asc   'Which? [1-2] ',00 
0094F4: 68 3F 20 5B 31 2D 32 5D 
0094FC: 20 00 
                    >253  
0094FE: A2 02       >254           ldx   #2         
009500: 20 B0 83    >255           jsr   inpnum     
009503: 8D FD 1F    >256           sta   cdtype     
                    >257  
                    >258  *-------------------------------
                    >259  * get the proper slot
                    >260  
009506: 20 3A 8E    >261  getslot  jsr   cls        
009509: AD FF 1F    >262           lda   serialtype 
00950C: C9 09       >263           cmp   #9         
00950E: F0 3A =954A >264           beq   :gsport    
                    >265  
009510: 20 9E 82    >266           jsr   print      
009513: 01 07 00    >267           db    1,7,0      
009516: 57 68 69 63 >268           asc   'Which slot should the modem driver use?'0d 
00951A: 68 20 73 6C 6F 74 20 73 
009522: 68 6F 75 6C 64 20 74 68 
00952A: 65 20 6D 6F 64 65 6D 20 
009532: 64 72 69 76 65 72 20 75 
00953A: 73 65 3F 0D 
00953E: 5B 31 2D 37 >269           asc   '[1-7] ',00 
009542: 5D 20 00 
009545: A2 07       >270           ldx   #7         
009547: 4C 6C 95    >271           jmp   :over      
                    >272  
00954A: 20 9E 82    >273  :gsport  jsr   print      
00954D: 01 07 00    >274           db    1,7,0      
009550: 57 68 69 63 >275           asc   'Which Serial Port? [1-2] ',00 
009554: 68 20 53 65 72 69 61 6C 
00955C: 20 50 6F 72 74 3F 20 5B 
009564: 31 2D 32 5D 20 00 
                    >276  
00956A: A2 02       >277           ldx   #2         
00956C: 20 B0 83    >278  :over    jsr   inpnum     
00956F: 48          >279           pha              
                    >280  
009570: AE FF 1F    >281           ldx   serialtype 
009573: E0 09       >282           cpx   #9         ;was it the IIgs serial port?
009575: D0 58 =95CF >283           bne   :notgsport ;nope
                    >284  
009577: C9 01       >285           cmp   #1         ;was it port #1?
009579: D0 0B =9586 >286           bne   :port2     ;nope, must be port 2
                    >287  
00957B: A9 00       >288           lda   #<gsport1  ;move gs port, slot 1
00957D: 85 11       >289           sta   point0     
00957F: A9 80       >290           lda   #>gsport1  
009581: 85 12       >291           sta   point0+1   
009583: 4C 8E 95    >292           jmp   :hst       
                    >293  
009586: A9 00       >294  :port2   lda   #<gsport2  ;move gs port slot 2
009588: 85 11       >295           sta   point0     
00958A: A9 80       >296           lda   #>gsport2  
00958C: 85 12       >297           sta   point0+1   
                    >298  
                    >299  * CODE FOR HST GS MODEM PORT! *
                    >300  
00958E: 68          >301  :hst     pla              ; get back slot #
00958F: 48          >302           pha              
009590: AE FE 1F    >303           ldx   modemtype  
009593: E0 03       >304           cpx   #3         ; did they pick HST?
009595: D0 1A =95B1 >305           bne   :ultra     ; nope so go on
                    >306  
009597: C9 01       >307           cmp   #1         ;was it port #1?
009599: D0 0B =95A6 >308           bne   :hst2      
                    >309  
00959B: A9 00       >310           lda   #<gs1hst   ;move gs port slot 2
00959D: 85 11       >311           sta   point0     
00959F: A9 80       >312           lda   #>gs1hst   
0095A1: 85 12       >313           sta   point0+1   
0095A3: 4C CF 95    >314           jmp   :notgsport 
                    >315  
0095A6: A9 00       >316  :hst2    lda   #<gs2hst   ;move gs port slot 2
0095A8: 85 11       >317           sta   point0     
0095AA: A9 80       >318           lda   #>gs2hst   
0095AC: 85 12       >319           sta   point0+1   
0095AE: 4C CF 95    >320           jmp   :notgsport 
                    >321  
0095B1: AE FE 1F    >322  :ultra   ldx   modemtype  
0095B4: E0 0D       >323           cpx   #13        ; did they pick ULTRA/PP?
0095B6: D0 17 =95CF >324           bne   :notgsport ; nope so go on
                    >325  
0095B8: C9 01       >326           cmp   #1         ;was it port #1?
0095BA: D0 0B =95C7 >327           bne   :ult2      
                    >328  
0095BC: A9 00       >329           lda   #<ultra1   ;move gs port slot 2
0095BE: 85 11       >330           sta   point0     
0095C0: A9 80       >331           lda   #>ultra1   
0095C2: 85 12       >332           sta   point0+1   
0095C4: 4C CF 95    >333           jmp   :notgsport 
                    >334  
0095C7: A9 00       >335  :ult2    lda   #<ultra2   ;move gs port slot 2
0095C9: 85 11       >336           sta   point0     
0095CB: A9 80       >337           lda   #>ultra2   
0095CD: 85 12       >338           sta   point0+1   
                    >339  
                    >340  :notgsport                
0095CF: AD FF 1F    >341           lda   serialtype ;was it an internal?
0095D2: C9 07       >342           cmp   #7         
0095D4: B0 03 =95D9 >343           bcs   :external  ;no, init baud needed
0095D6: 4C E0 96    >344           jmp   :internal  ;yes, init spd not needed
                    >345  
0095D9: 20 9E 82    >346  :external jsr  print      
0095DC: 01 0A 00    >347           db    1,10,0     
0095DF: 41 74 20 77 >348           asc   'At what baud rate should the port/card',0d 
0095E3: 68 61 74 20 62 61 75 64 
0095EB: 20 72 61 74 65 20 73 68 
0095F3: 6F 75 6C 64 20 74 68 65 
0095FB: 20 70 6F 72 74 2F 63 61 
009603: 72 64 0D 
009606: 62 65 20 69 >349           asc   'be initialized?  (Choose the maximum',0d 
00960A: 6E 69 74 69 61 6C 69 7A 
009612: 65 64 3F 20 20 28 43 68 
00961A: 6F 6F 73 65 20 74 68 65 
009622: 20 6D 61 78 69 6D 75 6D 
00962A: 0D 
00962B: 62 61 75 64 >350           asc   'baud rate of your modem)',0d,0d 
00962F: 20 72 61 74 65 20 6F 66 
009637: 20 79 6F 75 72 20 6D 6F 
00963F: 64 65 6D 29 0D 0D 
009645: 20 31 20 2D >351           asc   ' 1 -   300 baud',0d 
009649: 20 20 20 33 30 30 20 62 
009651: 61 75 64 0D 
009655: 20 32 20 2D >352           asc   ' 2 -  1200 baud',0d 
009659: 20 20 31 32 30 30 20 62 
009661: 61 75 64 0D 
009665: 20 33 20 2D >353           asc   ' 3 -  2400 baud',0d 
009669: 20 20 32 34 30 30 20 62 
009671: 61 75 64 0D 
009675: 20 34 20 2D >354           asc   ' 4 -  4800 baud',0d 
009679: 20 20 34 38 30 30 20 62 
009681: 61 75 64 0D 
009685: 20 35 20 2D >355           asc   ' 5 -  9600 baud',0d 
009689: 20 20 39 36 30 30 20 62 
009691: 61 75 64 0D 
009695: 20 36 20 2D >356           asc   ' 6 - 19200 baud',0d 
009699: 20 31 39 32 30 30 20 62 
0096A1: 61 75 64 0D 
0096A5: 20 37 20 2D >357           asc   ' 7 - 38400 baud (only for v.32 modems)',0d,0d 
0096A9: 20 33 38 34 30 30 20 62 
0096B1: 61 75 64 20 28 6F 6E 6C 
0096B9: 79 20 66 6F 72 20 76 2E 
0096C1: 33 32 20 6D 6F 64 65 6D 
0096C9: 73 29 0D 0D 
0096CD: 57 68 69 63 >358           asc   'Which? [1-6] ',00 
0096D1: 68 3F 20 5B 31 2D 36 5D 
0096D9: 20 00 
                    >359  
0096DB: A2 07       >360           ldx   #7         
0096DD: 20 B0 83    >361           jsr   inpnum     
0096E0: 48          >362  :internal pha             
                    >363  
0096E1: A2 03       >364  movepage ldx   #3         ;move 3 illustrious pages
0096E3: A0 00       >365  :loop2   ldy   #0         
0096E5: B1 11       >366  :loop    lda   (point0),y ;source
0096E7: 91 14       >367           sta   (point1),y ;destination
0096E9: C8          >368           iny              
0096EA: D0 F9 =96E5 >369           bne   :loop      
0096EC: E6 12       >370           inc   point0+1   
0096EE: E6 15       >371           inc   point1+1   
0096F0: CA          >372           dex              
0096F1: D0 F0 =96E3 >373           bne   :loop2     
                    >374  
0096F3: 68          >375           pla              ;get init speed
0096F4: AA          >376           tax              
0096F5: CA          >377           dex              ;one less
0096F6: 8E 01 0E    >378           stx   mdmdrv+1   ;save it
                    >379  
0096F9: 68          >380           pla              ;get the slot
0096FA: 0A          >381           asl   a          
0096FB: 0A          >382           asl   a          
0096FC: 0A          >383           asl   a          
0096FD: 0A          >384           asl   a          ;a := a*16
0096FE: 8D 00 0E    >385           sta   mdmdrv     ;store the slot
                    >386  
009701: CE FD 1F    >387           dec   cdtype     
009704: AD FF 1F    >388           lda   serialtype 
009707: C9 09       >389           cmp   #9         ;was it the gs?
009709: D0 13 =971E >390           bne   :notgs     ;nope, go there, SSC
                    >391  
00970B: AD FD 1F    >392           lda   cdtype     ;get drop type
00970E: D0 07 =9717 >393           bne   :notgsdsr  ;dcd wanted, so stick it
009710: A9 20       >394           lda   #$20       ;else use dsr drop
009712: 8D BF 11    >395           sta   cdbyte     
009715: D0 18 =972F >396           bne   copyans    
                    >397  
009717: A9 08       >398  :notgsdsr lda  #$08       ;setup for dcd drop
009719: 8D BF 11    >399           sta   cdbyte     
00971C: D0 11 =972F >400           bne   copyans    
                    >401  
00971E: AD FD 1F    >402  :notgs   lda   cdtype     ;ssc
009721: D0 07 =972A >403           bne   :notdsr    ;dcd drop wanted, go there
009723: A9 40       >404           lda   #%01000000 ;check only dsr (normal)
009725: 8D BF 11    >405           sta   cdbyte     
009728: D0 05 =972F >406           bne   copyans    
                    >407  
00972A: A9 20       >408  :notdsr  lda   #%00100000 ;otherwise check DCD
00972C: 8D BF 11    >409           sta   cdbyte     
                    >410  
                    >411  *-------------------------------
                    >412  
00972F: A0 00       >413  copyans  ldy   #0         
009731: B9 30 18    >414  :loop    lda   ansbuf,y   ;copy the answer string
009734: 99 C0 11    >415           sta   ansstr,y   
009737: F0 03 =973C >416           beq   copyinit   
009739: C8          >417           iny              
00973A: D0 F5 =9731 >418           bne   :loop      
                    >419  
00973C: A0 00       >420  copyinit ldy   #0         ;copy the init string
00973E: B9 00 18    >421  :loop    lda   initbuf,y  
009741: 99 D0 11    >422           sta   initstr,y  
009744: F0 03 =9749 >423           beq   :writeit   
009746: C8          >424           iny              
009747: D0 F5 =973E >425           bne   :loop      
                    >426  
009749: 20 D0 86    >427  :writeit jsr   chinit     ; check for init
00974C: 4C C7 86    >428           jmp   wrtchg     ; write the changes
                    >429  
                    >430  *-------------------------------
                    >431  * modem drivers
                    >432  
00974F: 00 00       >433  devtable dw    0          ;extra for offset 0
009751: 00 80       >434           da    nullmdm    ;null modem driver
009753: 00 80       >435           da    cat103     ;300 baud cat driver
009755: 00 80       >436           da    cat212     ;1200 baud cat driver
009757: 00 80       >437           da    mm2        ;micromodem II driver
009759: 00 80       >438           da    mm2        ;Zoom Modem
00975B: 00 80       >439           da    ssc        ;AE DataLink 2400
00975D: 00 80       >440           da    ssc        ;epic 2400 classic
00975F: 00 80       >441           da    ssc        ;super serial driver
009761: 00 80       >442           da    gsport2    ;location for gs port driver
009763: 00 80       >443           da    singlespd  ;single speed driver
009765: 00 80       >444           da    multispd   ;multi-speed <return> driver
009767: 00 80       >445           da    nocar      ;no carrier 300 baud driver
                    >446  
009769: 00 00       >447  strtable dw    0          
00976B: 00 80       >448           da    epic       ;1
00976D: 00 80       >449           da    usr2400    ;2
00976F: 00 80       >450           da    usr9600    ;3
009771: 00 80       >451           da    apl1200    ;4
009773: 00 80       >452           da    usr2400    ;5
009775: 00 80       >453           da    usr2400    ;6
009777: 00 80       >454           da    hayes2400  ;7
009779: 00 80       >455           da    pro2400    ;8
00977B: 00 80       >456           da    hayes1200  ;9
00977D: 00 80       >457           da    hayes2400  ;10
00977F: 00 80       >458           da    hayes9600  ;11
009781: 00 80       >459           da    ultra9600  ;12
009783: 00 80       >460           da    generic    ;13
009785: 00 80       >461           da    datalink24 ;14
                    >462  
009787: 41 54 41 0D >463  atastr   asc   'ATA',0d,00 
00978B: 00 
                     22            put   video      
                    >1    * Video Driver re-configuration
                    >2    *-------------------------------
                    >3    
                    >4    vid40    ext              
                    >5    vid80    ext              
                    >6    vid40pl  ext              
                    >7    videx    ext              
                    >8    
00978C: 20 84 8E    >9    re_vid   jsr   TopBox     
00978F: 20 9E 82    >10            jsr   print      
009792: 01 03 07    >11            db    1,3,7      
009795: 2D 20 43 6F >12            asc   '- Configure Video Driver -',00 
009799: 6E 66 69 67 75 72 65 20 
0097A1: 56 69 64 65 6F 20 44 72 
0097A9: 69 76 65 72 20 2D 00 
                    >13   
0097B0: 20 3A 8E    >14            jsr   cls        
0097B3: A2 0F       >15            ldx   #<start    ; setup esc handler
0097B5: A9 81       >16            lda   #>start    
0097B7: 20 18 86    >17            jsr   escape     
                    >18   
0097BA: 20 9E 82    >19            jsr   print      
0097BD: 01 07 00    >20            db    1,7,0      
0097C0: 20 31 20 2D >21            asc   ' 1 - Apple ][+ w/o lower case',0d 
0097C4: 20 41 70 70 6C 65 20 5D 
0097CC: 5B 2B 20 77 2F 6F 20 6C 
0097D4: 6F 77 65 72 20 63 61 73 
0097DC: 65 0D 
0097DE: 20 32 20 2D >22            asc   ' 2 - Apple ][+ w/ lower case',0d 
0097E2: 20 41 70 70 6C 65 20 5D 
0097EA: 5B 2B 20 77 2F 20 6C 6F 
0097F2: 77 65 72 20 63 61 73 65 
0097FA: 0D 
0097FB: 20 33 20 2D >23            asc   ' 3 - Apple ][+ w/ Videx 80 col',0d 
0097FF: 20 41 70 70 6C 65 20 5D 
009807: 5B 2B 20 77 2F 20 56 69 
00980F: 64 65 78 20 38 30 20 63 
009817: 6F 6C 0D 
00981A: 20 34 20 2D >24            asc   ' 4 - Apple //e in 40 col mode',0d 
00981E: 20 41 70 70 6C 65 20 2F 
009826: 2F 65 20 69 6E 20 34 30 
00982E: 20 63 6F 6C 20 6D 6F 64 
009836: 65 0D 
009838: 20 35 20 2D >25            asc   ' 5 - Apple //e in 80 col mode',0d 
00983C: 20 41 70 70 6C 65 20 2F 
009844: 2F 65 20 69 6E 20 38 30 
00984C: 20 63 6F 6C 20 6D 6F 64 
009854: 65 0D 
009856: 20 36 20 2D >26            asc   ' 6 - Apple //c in 40 col mode',0d 
00985A: 20 41 70 70 6C 65 20 2F 
009862: 2F 63 20 69 6E 20 34 30 
00986A: 20 63 6F 6C 20 6D 6F 64 
009872: 65 0D 
009874: 20 37 20 2D >27            asc   ' 7 - Apple //c in 80 col mode',0d 
009878: 20 41 70 70 6C 65 20 2F 
009880: 2F 63 20 69 6E 20 38 30 
009888: 20 63 6F 6C 20 6D 6F 64 
009890: 65 0D 
009892: 20 38 20 2D >28            asc   ' 8 - Apple IIgs in 40 col mode',0d 
009896: 20 41 70 70 6C 65 20 49 
00989E: 49 67 73 20 69 6E 20 34 
0098A6: 30 20 63 6F 6C 20 6D 6F 
0098AE: 64 65 0D 
0098B1: 20 39 20 2D >29            asc   ' 9 - Apple IIgs in 80 col mode',0d,0d 
0098B5: 20 41 70 70 6C 65 20 49 
0098BD: 49 67 73 20 69 6E 20 38 
0098C5: 30 20 63 6F 6C 20 6D 6F 
0098CD: 64 65 0D 0D 
0098D1: 57 68 69 63 >30            asc   'Which? [1-9] ',00 
0098D5: 68 3F 20 5B 31 2D 39 5D 
0098DD: 20 00 
                    >31   
0098DF: A2 09       >32            ldx   #9         ;get video #
0098E1: 20 B0 83    >33            jsr   inpnum     
                    >34   
0098E4: 0A          >35            asl   a          ;point0 points to the
0098E5: AA          >36            tax              ;video device driver
0098E6: BD 11 99    >37            lda   :vidtable,x 
0098E9: 85 11       >38            sta   point0     
0098EB: E8          >39            inx              
0098EC: BD 11 99    >40            lda   :vidtable,x 
0098EF: 85 12       >41            sta   point0+1   
                    >42   
0098F1: A9 00       >43            lda   #<viddrv   ;tell it to move the video
0098F3: 85 14       >44            sta   point1     ;driver
0098F5: A9 09       >45            lda   #>viddrv   
0098F7: 85 15       >46            sta   point1+1   
                    >47   
0098F9: A2 03       >48            ldx   #3         ;move 3 illustrious pages
0098FB: A0 00       >49   :loop2   ldy   #0         
0098FD: B1 11       >50   :loop    lda   (point0),y ;source
0098FF: 91 14       >51            sta   (point1),y ;destination
009901: C8          >52            iny              
009902: D0 F9 =98FD >53            bne   :loop      
009904: E6 12       >54            inc   point0+1   
009906: E6 15       >55            inc   point1+1   
009908: CA          >56            dex              
009909: D0 F0 =98FB >57            bne   :loop2     
                    >58   
00990B: 20 D0 86    >59            jsr   chinit     ; check for init
00990E: 4C C7 86    >60            jmp   wrtchg     ; write the changes
                    >61   
009911: 00 00       >62   :vidtable dw   0          
009913: 00 80       >63            da    vid40      
009915: 00 80       >64            da    vid40pl    
009917: 00 80       >65            da    videx      
009919: 00 80       >66            da    vid40      
00991B: 00 80       >67            da    vid80      
00991D: 00 80       >68            da    vid40      
00991F: 00 80       >69            da    vid80      
009921: 00 80       >70            da    vid40      
009923: 00 80       >71            da    vid80      
                     23            put   clock      
                    >1    *-------------------------------
                    >2    * reconfigure clocks
                    >3    *-------------------------------
                    >4    
                    >5    gsclock  ext              ;gs clock driver
                    >6    serialpro ext             ;serialpro  driver
                    >7    thunder  ext              ;thunderclock/timemaster driver
                    >8    iicsys   ext              ;iic system clock
                    >9    mountain ext              ;mountain clock
                    >10   prodos   ext              ;standard prodos stuff
                    >11   nullclk  ext              ;no clock
                    >12   noslot   ext              ;no slot clock
                    >13   versa    ext              ;prometheus versacard
                    >14   ultra    ext              ;ultra clock driver
                    >15   
                    >16   
                    >17   
009925: 20 84 8E    >18   re_clk   jsr   TopBox     
009928: 20 9E 82    >19            jsr   print      
00992B: 01 03 0A    >20            db    1,3,10     
00992E: 2D 20 52 65 >21            asc   '- Reconfigure Clock -',00 
009932: 63 6F 6E 66 69 67 75 72 
00993A: 65 20 43 6C 6F 63 6B 20 
009942: 2D 00 
                    >22   
009944: 20 3A 8E    >23            jsr   cls        
                    >24   
                    >25   * sec           ;remove asteriks to make IIgs
                    >26   * jsr $fe1f     ;clock self-installing
                    >27   * bcs IIeClk
                    >28   * jmp gsclk
                    >29   
009947: 20 9E 82    >30   IIeClk   jsr   print      
00994A: 01 07 00    >31            db    1,7,0      
00994D: 20 31 20 2D >32            asc   ' 1 - Thunderclock Compatible',0d 
009951: 20 54 68 75 6E 64 65 72 
009959: 63 6C 6F 63 6B 20 43 6F 
009961: 6D 70 61 74 69 62 6C 65 
009969: 0D 
00996A: 20 32 20 2D >33            asc   ' 2 - A.E. Timemaster II H.O.',0d 
00996E: 20 41 2E 45 2E 20 54 69 
009976: 6D 65 6D 61 73 74 65 72 
00997E: 20 49 49 20 48 2E 4F 2E 
009986: 0D 
009987: 20 33 20 2D >34            asc   ' 3 - A.E. Serial Pro',0d 
00998B: 20 41 2E 45 2E 20 53 65 
009993: 72 69 61 6C 20 50 72 6F 
00999B: 0D 
00999C: 20 34 20 2D >35            asc   ' 4 - A.E. Ultra Clock',0d 
0099A0: 20 41 2E 45 2E 20 55 6C 
0099A8: 74 72 61 20 43 6C 6F 63 
0099B0: 6B 0D 
0099B2: 20 35 20 2D >36            asc   ' 5 - A.E. //c System Clock',0d 
0099B6: 20 41 2E 45 2E 20 2F 2F 
0099BE: 63 20 53 79 73 74 65 6D 
0099C6: 20 43 6C 6F 63 6B 0D 
0099CD: 20 36 20 2D >37            asc   ' 6 - SMT No-Slot Clock',0d 
0099D1: 20 53 4D 54 20 4E 6F 2D 
0099D9: 53 6C 6F 74 20 43 6C 6F 
0099E1: 63 6B 0D 
0099E4: 20 37 20 2D >38            asc   ' 7 - ProDOS Compatible Clock',0d 
0099E8: 20 50 72 6F 44 4F 53 20 
0099F0: 43 6F 6D 70 61 74 69 62 
0099F8: 6C 65 20 43 6C 6F 63 6B 
009A00: 0D 
009A01: 20 38 20 2D >39            asc   ' 8 - Mountain Hardware Clock',0d 
009A05: 20 4D 6F 75 6E 74 61 69 
009A0D: 6E 20 48 61 72 64 77 61 
009A15: 72 65 20 43 6C 6F 63 6B 
009A1D: 0D 
009A1E: 20 39 20 2D >40            asc   ' 9 - Prometheus Versacard',0d 
009A22: 20 50 72 6F 6D 65 74 68 
009A2A: 65 75 73 20 56 65 72 73 
009A32: 61 63 61 72 64 0D 
009A38: 31 30 20 2D >41            asc   '10 - IIgs Built-in Clock',0d 
009A3C: 20 49 49 67 73 20 42 75 
009A44: 69 6C 74 2D 69 6E 20 43 
009A4C: 6C 6F 63 6B 0D 
009A51: 31 31 20 2D >42            asc   '11 - No Clock in System',0d,0d 
009A55: 20 4E 6F 20 43 6C 6F 63 
009A5D: 6B 20 69 6E 20 53 79 73 
009A65: 74 65 6D 0D 0D 
009A6A: 57 68 69 63 >43            asc   'Which? [1-11] ',00 
009A6E: 68 3F 20 5B 31 2D 31 31 
009A76: 5D 20 00 
                    >44   
009A79: A2 0B       >45            ldx   #11        
009A7B: 20 B0 83    >46            jsr   inpnum     
                    >47   
009A7E: 48          >48            pha              
009A7F: 0A          >49            asl   a          
009A80: AA          >50            tax              
009A81: BD 55 9B    >51            lda   :clktable,x 
009A84: 85 11       >52            sta   point0     
009A86: E8          >53            inx              
009A87: BD 55 9B    >54            lda   :clktable,x 
009A8A: 85 12       >55            sta   point0+1   
                    >56   
009A8C: 68          >57            pla              
009A8D: C9 04       >58            cmp   #4         ;ultra
009A8F: F0 4A =9ADB >59            beq   :noslot    
009A91: C9 06       >60            cmp   #6         ;no slot clock
009A93: F0 46 =9ADB >61            beq   :noslot    
009A95: C9 07       >62            cmp   #7         ;prodos compatable
009A97: F0 42 =9ADB >63            beq   :noslot    
009A99: C9 0A       >64            cmp   #10        ;iigs built in
009A9B: F0 3E =9ADB >65            beq   :noslot    
009A9D: C9 0B       >66            cmp   #11        ;no clock
009A9F: F0 3A =9ADB >67            beq   :noslot    
                    >68   
009AA1: 20 9E 82    >69            jsr   print      
009AA4: 01 15 00    >70            db    1,21,0     
009AA7: 57 68 69 63 >71            asc   'Which slot/port does the clock use?'0d 
009AAB: 68 20 73 6C 6F 74 2F 70 
009AB3: 6F 72 74 20 64 6F 65 73 
009ABB: 20 74 68 65 20 63 6C 6F 
009AC3: 63 6B 20 75 73 65 3F 0D 
009ACB: 5B 31 2D 37 >72            asc   '[1-7] '00 
009ACF: 5D 20 00 
                    >73   
009AD2: A2 07       >74            ldx   #7         ; get slot
009AD4: 20 B0 83    >75            jsr   inpnum     
009AD7: 0A          >76            asl   a          
009AD8: 0A          >77            asl   a          
009AD9: 0A          >78            asl   a          
009ADA: 0A          >79            asl   a          
009ADB: 48          >80   :noslot  pha              ;save slot
                    >81   
009ADC: 20 3A 8E    >82            jsr   cls        
009ADF: 20 9E 82    >83            jsr   print      
009AE2: 01 07 00    >84            db    1,7,0      
009AE5: 57 68 61 74 >85            asc   'What time format do you want?',0d,0d 
009AE9: 20 74 69 6D 65 20 66 6F 
009AF1: 72 6D 61 74 20 64 6F 20 
009AF9: 79 6F 75 20 77 61 6E 74 
009B01: 3F 0D 0D 
009B04: 20 31 20 2D >86            asc   ' 1 - 12 hour',0d 
009B08: 20 31 32 20 68 6F 75 72 
009B10: 0D 
009B11: 20 32 20 2D >87            asc   ' 2 - 24 hour',0d,0d 
009B15: 20 32 34 20 68 6F 75 72 
009B1D: 0D 0D 
009B1F: 57 68 69 63 >88            asc   'Which? [1-2]: ',00 
009B23: 68 3F 20 5B 31 2D 32 5D 
009B2B: 3A 20 00 
                    >89   
009B2E: A2 02       >90            ldx   #2         ; get mode
009B30: 20 B0 83    >91            jsr   inpnum     
009B33: A2 80       >92            ldx   #$80       
009B35: C9 01       >93            cmp   #1         
009B37: F0 02 =9B3B >94            beq   :24hr      
009B39: A2 00       >95            ldx   #$00       
                    >96   
009B3B: 8A          >97   :24hr    txa              ;put mode in accum.
009B3C: 48          >98            pha              ;save mode
                    >99   
                    >100  
009B3D: A0 00       >101           ldy   #0         ;move the single page
009B3F: B1 11       >102  :loop    lda   (point0),y ;source
009B41: 99 00 0D    >103           sta   clkdrv,y   ;destination
009B44: C8          >104           iny              
009B45: D0 F8 =9B3F >105           bne   :loop      
                    >106  
009B47: 68          >107           pla              ;get the mode back
009B48: 8D 01 0D    >108           sta   clkdrv+1   
009B4B: 68          >109           pla              ;get the slot back
009B4C: 8D 00 0D    >110           sta   clkdrv     
                    >111  
009B4F: 20 D0 86    >112           jsr   chinit     ; check for init
009B52: 4C C7 86    >113           jmp   wrtchg     ; write the changes
                    >114  
009B55: 00 00       >115  :clktable dw   0          
009B57: 00 80       >116           da    thunder    
009B59: 00 80       >117           da    thunder    
009B5B: 00 80       >118           da    serialpro  
009B5D: 00 80       >119           da    ultra      
009B5F: 00 80       >120           da    iicsys     
009B61: 00 80       >121           da    noslot     
009B63: 00 80       >122           da    prodos     
009B65: 00 80       >123           da    mountain   
009B67: 00 80       >124           da    versa      
009B69: 00 80       >125           da    gsclock    
009B6B: 00 80       >126           da    nullclk    
                    >127  
                    >128  *-------------------------------
                    >129  * IIgs clock is installed by itself
                    >130  
009B6D: 20 9E 82    >131  gsclk    jsr   print      
009B70: 01 07 00    >132           db    1,7,0      
009B73: 49 49 67 73 >133           asc   'IIgs Clock installed automatically...',00 
009B77: 20 43 6C 6F 63 6B 20 69 
009B7F: 6E 73 74 61 6C 6C 65 64 
009B87: 20 61 75 74 6F 6D 61 74 
009B8F: 69 63 61 6C 6C 79 2E 2E 
009B97: 2E 00 
009B99: 20 62 86    >134           jsr   getcr      
                    >135  
009B9C: A0 00       >136           ldy   #0         
009B9E: B9 00 80    >137  :loop    lda   gsclock,y  
009BA1: 99 00 0D    >138           sta   clkdrv,y   
009BA4: C8          >139           iny              
009BA5: D0 F7 =9B9E >140           bne   :loop      
                    >141  
009BA7: 20 D0 86    >142           jsr   chinit     
009BAA: 4C C7 86    >143           jmp   wrtchg     
                    >144  
                    >145  
                     24            put   printer    
                    >1    * Printer re-configuration
                    >2    *-------------------------------
                    >3    
                    >4    nullprint ext             ;null printer driver
                    >5    serial   ext              ;serial/cout printer driver
                    >6    grappler ext              ;parallel grappler printer driver
                    >7    parallel ext              ;parallel printer driver
                    >8    
009BAD: 20 84 8E    >9    re_pr    jsr   TopBox     
009BB0: 20 9E 82    >10            jsr   print      
009BB3: 01 03 0A    >11            db    1,3,10     
009BB6: 2D 20 50 72 >12            asc   '- Printer Interfaces -',00 
009BBA: 69 6E 74 65 72 20 49 6E 
009BC2: 74 65 72 66 61 63 65 73 
009BCA: 20 2D 00 
                    >13   
009BCD: 20 3A 8E    >14            jsr   cls        
009BD0: A2 0F       >15            ldx   #<start    ; setup esc handler
009BD2: A9 81       >16            lda   #>start    
009BD4: 20 18 86    >17            jsr   escape     
                    >18   
009BD7: 20 9E 82    >19            jsr   print      
009BDA: 01 07 00    >20            db    1,7,0      
009BDD: 20 31 20 2D >21            asc   ' 1 - Apple //c built-in port',0d 
009BE1: 20 41 70 70 6C 65 20 2F 
009BE9: 2F 63 20 62 75 69 6C 74 
009BF1: 2D 69 6E 20 70 6F 72 74 
009BF9: 0D 
009BFA: 20 32 20 2D >22            asc   ' 2 - Apple Super Serial Card (SSC)',0d 
009BFE: 20 41 70 70 6C 65 20 53 
009C06: 75 70 65 72 20 53 65 72 
009C0E: 69 61 6C 20 43 61 72 64 
009C16: 20 28 53 53 43 29 0D 
009C1D: 20 33 20 2D >23            asc   ' 3 - Apple IIgs built-in port',0d 
009C21: 20 41 70 70 6C 65 20 49 
009C29: 49 67 73 20 62 75 69 6C 
009C31: 74 2D 69 6E 20 70 6F 72 
009C39: 74 0D 
009C3B: 20 34 20 2D >24            asc   ' 4 - Generic Printer Driver',0d 
009C3F: 20 47 65 6E 65 72 69 63 
009C47: 20 50 72 69 6E 74 65 72 
009C4F: 20 44 72 69 76 65 72 0D 
009C57: 20 35 20 2D >25            asc   ' 5 - Star Micronics Grafstar',0d 
009C5B: 20 53 74 61 72 20 4D 69 
009C63: 63 72 6F 6E 69 63 73 20 
009C6B: 47 72 61 66 73 74 61 72 
009C73: 0D 
009C74: 20 36 20 2D >26            asc   ' 6 - Orange Micro Grappler card',0d 
009C78: 20 4F 72 61 6E 67 65 20 
009C80: 4D 69 63 72 6F 20 47 72 
009C88: 61 70 70 6C 65 72 20 63 
009C90: 61 72 64 0D 
009C94: 20 37 20 2D >27            asc   ' 7 - Apple Parallel interface',0d 
009C98: 20 41 70 70 6C 65 20 50 
009CA0: 61 72 61 6C 6C 65 6C 20 
009CA8: 69 6E 74 65 72 66 61 63 
009CB0: 65 0D 
009CB2: 20 38 20 2D >28            asc   ' 8 - Epson APL printer card',0d 
009CB6: 20 45 70 73 6F 6E 20 41 
009CBE: 50 4C 20 70 72 69 6E 74 
009CC6: 65 72 20 63 61 72 64 0D 
009CCE: 20 39 20 2D >29            asc   ' 9 - Appricorn Parallel card',0d 
009CD2: 20 41 70 70 72 69 63 6F 
009CDA: 72 6E 20 50 61 72 61 6C 
009CE2: 6C 65 6C 20 63 61 72 64 
009CEA: 0D 
009CEB: 31 30 20 2D >30            asc   '10 - Tyvec Printer Interface',0d 
009CEF: 20 54 79 76 65 63 20 50 
009CF7: 72 69 6E 74 65 72 20 49 
009CFF: 6E 74 65 72 66 61 63 65 
009D07: 0D 
009D08: 31 31 20 2D >31            asc   '11 - No Printer in system',0d,0d 
009D0C: 20 4E 6F 20 50 72 69 6E 
009D14: 74 65 72 20 69 6E 20 73 
009D1C: 79 73 74 65 6D 0D 0D 
009D23: 57 68 69 63 >32            asc   'Which? [1-11] ',00 
009D27: 68 3F 20 5B 31 2D 31 31 
009D2F: 5D 20 00 
                    >33   
009D32: A2 0B       >34            ldx   #11        ;get printer #
009D34: 20 B0 83    >35            jsr   inpnum     
                    >36   
009D37: C9 05       >37            cmp   #5         
009D39: 90 13 =9D4E >38            blt   :serial    
009D3B: C9 07       >39            cmp   #7         
009D3D: 90 16 =9D55 >40            blt   :grappler  
009D3F: C9 0B       >41            cmp   #11        
009D41: 90 19 =9D5C >42            blt   :parallel  
                    >43   
009D43: A9 00       >44   :null    lda   #<nullprint 
009D45: 85 11       >45            sta   point0     
009D47: A9 80       >46            lda   #>nullprint 
009D49: 85 12       >47            sta   point0+1   
009D4B: 4C A1 9D    >48            jmp   :noslot    
                    >49   
009D4E: A9 00       >50   :serial  lda   #<serial   
009D50: A2 80       >51            ldx   #>serial   
009D52: 4C 60 9D    >52            jmp   :getslot   
                    >53   
009D55: A9 00       >54   :grappler lda  #<grappler 
009D57: A2 80       >55            ldx   #>grappler 
009D59: 4C 60 9D    >56            jmp   :getslot   
                    >57   
009D5C: A9 00       >58   :parallel lda  #<parallel 
009D5E: A2 80       >59            ldx   #>parallel 
                    >60   
009D60: 85 11       >61   :getslot sta   point0     
009D62: 86 12       >62            stx   point0+1   
                    >63   
009D64: 20 9E 82    >64            jsr   print      
009D67: 01 15 00    >65            db    1,21,0     
009D6A: 57 68 69 63 >66            asc   'Which slot/port does your printer',0d 
009D6E: 68 20 73 6C 6F 74 2F 70 
009D76: 6F 72 74 20 64 6F 65 73 
009D7E: 20 79 6F 75 72 20 70 72 
009D86: 69 6E 74 65 72 0D 
009D8C: 75 73 65 3F >67            asc   'use? [1-7] ',00 
009D90: 20 5B 31 2D 37 5D 20 00 
                    >68   
009D98: A2 07       >69            ldx   #7         ; get slot
009D9A: 20 B0 83    >70            jsr   inpnum     
009D9D: 0A          >71            asl   a          
009D9E: 0A          >72            asl   a          
009D9F: 0A          >73            asl   a          
009DA0: 0A          >74            asl   a          
009DA1: 48          >75   :noslot  pha              ;save slot
                    >76   
009DA2: A0 00       >77            ldy   #0         ;move the single page
009DA4: B1 11       >78   :loop    lda   (point0),y ;source
009DA6: 99 00 0C    >79            sta   prdrv,y    ;destination
009DA9: C8          >80            iny              
009DAA: D0 F8 =9DA4 >81            bne   :loop      
                    >82   
009DAC: 68          >83            pla              ;get the slot back
009DAD: 8D 00 0C    >84            sta   prdrv      
                    >85   
009DB0: 20 D0 86    >86            jsr   chinit     ; check for init
009DB3: 4C C7 86    >87            jmp   wrtchg     ; write the changes
                     25            put   init       
                    >1    *-------------------------------
                    >2    * config/init
                    >3    *-------------------------------
                    >4    * Date: 1/3/23
                    >5    *-------------------------------
                    >6    
009DB6: A2 00       >7    doinit   ldx   #<begin    ; setup esc handler
009DB8: A9 80       >8             lda   #>begin    
009DBA: 20 18 86    >9             jsr   escape     
                    >10   
009DBD: 20 3A 8E    >11            jsr   cls        
                    >12   
009DC0: A9 1E       >13            lda   #30        
009DC2: 85 0F       >14            sta   maxlen     
009DC4: A9 00       >15            lda   #%00000000 
009DC6: 8D AF 83    >16            sta   inpmode    
                    >17   
009DC9: 20 9E 82    >18            jsr   print      
009DCC: 57 68 61 74 >19            asc   'What are you going to call your system?',0d 
009DD0: 20 61 72 65 20 79 6F 75 
009DD8: 20 67 6F 69 6E 67 20 74 
009DE0: 6F 20 63 61 6C 6C 20 79 
009DE8: 6F 75 72 20 73 79 73 74 
009DF0: 65 6D 3F 0D 
009DF4: 3A 00       >20            asc   ':',00     
009DF6: 20 3C 83    >21            jsr   inpln      
                    >22   
009DF9: A2 F5       >23            ldx   #<datadef  
009DFB: A9 AB       >24            lda   #>datadef  
009DFD: A0 0D       >25            ldy   #cr        
009DFF: 20 47 84    >26            jsr   copyinp    ; copy name into file
009E02: 86 06       >27            stx   temp4      
009E04: 85 07       >28            sta   temp4+1    
                    >29   
009E06: A9 14       >30            lda   #20        ; limit length
009E08: 85 0F       >31            sta   maxlen     
                    >32   
009E0A: 20 9E 82    >33            jsr   print      
009E0D: 0D          >34            hex   0d         
009E0E: 45 6E 74 65 >35            asc   'Enter your FULL name. (20 chars max)',0d 
009E12: 72 20 79 6F 75 72 20 46 
009E1A: 55 4C 4C 20 6E 61 6D 65 
009E22: 2E 20 28 32 30 20 63 68 
009E2A: 61 72 73 20 6D 61 78 29 
009E32: 0D 
009E33: 3A 00       >36            asc   ':',00     
009E35: 20 3C 83    >37            jsr   inpln      ; get name
                    >38   
009E38: A2 76       >39            ldx   #<user     ; copy line uppercase
009E3A: A9 AB       >40            lda   #>user     
009E3C: A0 0D       >41            ldy   #cr        
009E3E: 20 73 84    >42            jsr   ucopyinp   
009E41: A0 0D       >43            ldy   #cr        
009E43: 20 47 84    >44            jsr   copyinp    ; copy the line
009E46: 86 04       >45            stx   temp3      
009E48: 85 05       >46            sta   temp3+1    
                    >47   
009E4A: A6 06       >48            ldx   temp4      
009E4C: A5 07       >49            lda   temp4+1    
009E4E: A0 0D       >50            ldy   #cr        
009E50: 20 47 84    >51            jsr   copyinp    
009E53: 86 06       >52            stx   temp4      
009E55: 85 07       >53            sta   temp4+1    
                    >54   
009E57: A0 00       >55            ldy   #0         
009E59: B9 76 AB    >56   init1d   lda   user,y     
009E5C: C8          >57            iny              
009E5D: C9 20       >58            cmp   #$20       
009E5F: D0 F8 =9E59 >59            bne   init1d     
009E61: 88          >60            dey              
009E62: A9 2C       >61            lda   #','       
009E64: 99 76 AB    >62            sta   user,y     
                    >63   
009E67: A9 C0       >64   init2    lda   #%11000000 
009E69: 8D AF 83    >65            sta   inpmode    
                    >66   
009E6C: 20 9E 82    >67            jsr   print      
009E6F: 0D          >68            hex   0d         
009E70: 45 6E 74 65 >69            asc   'Enter your telephone number',0d 
009E74: 72 20 79 6F 75 72 20 74 
009E7C: 65 6C 65 70 68 6F 6E 65 
009E84: 20 6E 75 6D 62 65 72 0D 
009E8C: 28 58 58 58 >70            asc   '(XXX-XXX-XXXX): ',00 
009E90: 2D 58 58 58 2D 58 58 58 
009E98: 58 29 3A 20 00 
                    >71   
009E9D: 20 3C 83    >72            jsr   inpln      ; get tele number
009EA0: C0 0C       >73            cpy   #12        
009EA2: D0 C3 =9E67 >74            bne   init2      
                    >75   
009EA4: A2 C4       >76            ldx   #<usrtele  
009EA6: A9 AB       >77            lda   #>usrtele  
009EA8: A0 00       >78            ldy   #0         
009EAA: 20 47 84    >79            jsr   copyinp    ; copy the line
                    >80   
009EAD: A9 10       >81            lda   #16        
009EAF: 85 0F       >82            sta   maxlen     ; set length for city
009EB1: A9 00       >83            lda   #%00000000 
009EB3: 8D AF 83    >84            sta   inpmode    
                    >85   
009EB6: 20 9E 82    >86            jsr   print      
009EB9: 0D          >87            hex   0d         
009EBA: 57 68 61 74 >88            asc   'What city do you call from? (16 char)',0d 
009EBE: 20 63 69 74 79 20 64 6F 
009EC6: 20 79 6F 75 20 63 61 6C 
009ECE: 6C 20 66 72 6F 6D 3F 20 
009ED6: 28 31 36 20 63 68 61 72 
009EDE: 29 0D 
009EE0: 3A 00       >89            asc   ':',00     
                    >90   
009EE2: 20 3C 83    >91            jsr   inpln      ; get where from
009EE5: A6 04       >92            ldx   temp3      
009EE7: A5 05       >93            lda   temp3+1    
009EE9: A0 2C       >94            ldy   #','       
009EEB: 20 47 84    >95            jsr   copyinp    ; copy the input
009EEE: 86 02       >96            stx   temp2      
009EF0: 85 03       >97            sta   temp2+1    
                    >98   
009EF2: A9 02       >99            lda   #2         
009EF4: 85 0F       >100           sta   maxlen     ;set length for state
009EF6: A9 C0       >101           lda   #%11000000 
009EF8: 8D AF 83    >102           sta   inpmode    
                    >103  
009EFB: 20 9E 82    >104  init2a   jsr   print      
009EFE: 0D          >105           hex   0d         
009EFF: 57 68 61 74 >106           asc   'What state do you call from? (XX):',00 
009F03: 20 73 74 61 74 65 20 64 
009F0B: 6F 20 79 6F 75 20 63 61 
009F13: 6C 6C 20 66 72 6F 6D 3F 
009F1B: 20 28 58 58 29 3A 00 
                    >107  
009F22: 20 3C 83    >108           jsr   inpln      ;get state
009F25: C0 02       >109           cpy   #2         
009F27: D0 D2 =9EFB >110           bne   init2a     
009F29: A6 02       >111           ldx   temp2      
009F2B: A5 03       >112           lda   temp2+1    
009F2D: A0 0D       >113           ldy   #cr        
009F2F: 20 47 84    >114           jsr   copyinp    ;copy to date area
                    >115  
009F32: A9 08       >116           lda   #8         
009F34: 85 0F       >117           sta   maxlen     
                    >118  
009F36: 20 3A 8E    >119  init3    jsr   cls        
009F39: 20 9E 82    >120           jsr   print      
009F3C: 45 6E 74 65 >121           asc   'Enter a 4-8 char password:',00 
009F40: 72 20 61 20 34 2D 38 20 
009F48: 63 68 61 72 20 70 61 73 
009F50: 73 77 6F 72 64 3A 00 
                    >122  
009F57: 20 3C 83    >123           jsr   inpln      
009F5A: C0 04       >124           cpy   #4         
009F5C: 90 D8 =9F36 >125           bcc   init3      
                    >126  
009F5E: A2 BC       >127           ldx   #<usrpass  
009F60: A9 AB       >128           lda   #>usrpass  
009F62: A0 00       >129           ldy   #0         
009F64: 20 47 84    >130           jsr   copyinp    ; copy the line
                    >131  
009F67: A9 14       >132           lda   #20        
009F69: 85 0F       >133           sta   maxlen     
                    >134  
009F6B: 20 9E 82    >135           jsr   print      
009F6E: 0D          >136           hex   0d         
009F6F: 45 6E 74 65 >137           asc   'Enter a second password for remote',0d 
009F73: 72 20 61 20 73 65 63 6F 
009F7B: 6E 64 20 70 61 73 73 77 
009F83: 6F 72 64 20 66 6F 72 20 
009F8B: 72 65 6D 6F 74 65 0D 
009F92: 73 79 73 6F >138           asc   'sysop access (1-20 chars)',0d 
009F96: 70 20 61 63 63 65 73 73 
009F9E: 20 28 31 2D 32 30 20 63 
009FA6: 68 61 72 73 29 0D 
009FAC: 3A 00       >139           asc   ':',00     
                    >140  
009FAE: 20 3C 83    >141           jsr   inpln      ; get second password
009FB1: A6 06       >142           ldx   temp4      
009FB3: A5 07       >143           lda   temp4+1    
009FB5: A0 0D       >144           ldy   #cr        
009FB7: 20 47 84    >145           jsr   copyinp    ; copy password into data file
009FBA: 86 06       >146           stx   temp4      
009FBC: 85 07       >147           sta   temp4+1    ; save new pointers
                    >148  
009FBE: A0 00       >149           ldy   #0         
009FC0: B9 94 AC    >150  init3a   lda   xdata,y    ; copy rest of the data file
009FC3: 91 06       >151           sta   (temp4),y  
009FC5: C8          >152           iny              
009FC6: C9 00       >153           cmp   #0         
009FC8: D0 F6 =9FC0 >154           bne   init3a     
                    >155  
009FCA: 20 3A 8E    >156           jsr   cls        ; clear screen
009FCD: 20 9E 82    >157           jsr   print      
009FD0: 01 07 08    >158           db    1,7,8      
009FD3: 2D 20 53 79 >159           asc   '- System  Information -',0d,0d 
009FD7: 73 74 65 6D 20 20 49 6E 
009FDF: 66 6F 72 6D 61 74 69 6F 
009FE7: 6E 20 2D 0D 0D 
009FEC: 53 79 73 74 >160           asc   'System Name: ',00 
009FF0: 65 6D 20 4E 61 6D 65 3A 
009FF8: 20 00 
                    >161  
009FFA: A2 F5       >162           ldx   #<datadef  
009FFC: A9 AB       >163           lda   #>datadef  
009FFE: A0 8D       >164           ldy   #cr+128    
00A000: 20 A2 84    >165           jsr   prstr      ; show system name
00A003: 86 06       >166           stx   temp4      
00A005: 85 07       >167           sta   temp4+1    
                    >168  
00A007: 20 9E 82    >169           jsr   print      
00A00A: 0D 0D       >170           hex   0d,0d      
00A00C: 53 79 73 6F >171           asc   'Sysop Name: ',00 
00A010: 70 20 4E 61 6D 65 3A 20 
00A018: 00 
                    >172  
00A019: A6 06       >173           ldx   temp4      
00A01B: A5 07       >174           lda   temp4+1    
00A01D: A0 8D       >175           ldy   #cr+128    
00A01F: 20 A2 84    >176           jsr   prstr      ; show sysop name
00A022: 86 06       >177           stx   temp4      
00A024: 85 07       >178           sta   temp4+1    
                    >179  
00A026: 20 9E 82    >180           jsr   print      
00A029: 0D 0D       >181           hex   0d,0d      
00A02B: 53 79 73 6F >182           asc   'Sysop Phone Number: ',00 
00A02F: 70 20 50 68 6F 6E 65 20 
00A037: 4E 75 6D 62 65 72 3A 20 
00A03F: 00 
                    >183  
00A040: A2 C4       >184           ldx   #<usrtele  
00A042: A9 AB       >185           lda   #>usrtele  
00A044: A0 0D       >186           ldy   #13        
00A046: 20 A2 84    >187           jsr   prstr      ; show tele number
                    >188  
00A049: 20 9E 82    >189           jsr   print      
00A04C: 0D 0D       >190           hex   0d,0d      
00A04E: 53 79 73 6F >191           asc   'Sysop is From: ',00 
00A052: 70 20 69 73 20 46 72 6F 
00A05A: 6D 3A 20 00 
                    >192  
00A05E: A6 04       >193           ldx   temp3      
00A060: A5 05       >194           lda   temp3+1    
00A062: A0 8D       >195           ldy   #cr+128    
00A064: 20 A2 84    >196           jsr   prstr      ; show where from
                    >197  
00A067: 20 9E 82    >198           jsr   print      
00A06A: 0D 0D       >199           hex   0d,0d      
00A06C: 4C 6F 67 6F >200           asc   'Logon Password:  ',00 
00A070: 6E 20 50 61 73 73 77 6F 
00A078: 72 64 3A 20 20 00 
                    >201  
00A07E: A2 BC       >202           ldx   #<usrpass  
00A080: A9 AB       >203           lda   #>usrpass  
00A082: A0 09       >204           ldy   #9         
00A084: 20 A2 84    >205           jsr   prstr      ; show main password
                    >206  
00A087: 20 9E 82    >207           jsr   print      
00A08A: 0D 0D       >208           hex   0d,0d      
00A08C: 52 65 6D 6F >209           asc   'Remote Password: ',00 
00A090: 74 65 20 50 61 73 73 77 
00A098: 6F 72 64 3A 20 00 
                    >210  
00A09E: A6 06       >211           ldx   temp4      
00A0A0: A5 07       >212           lda   temp4+1    
00A0A2: A0 8D       >213           ldy   #cr+128    
00A0A4: 20 A2 84    >214           jsr   prstr      ; show remote password
                    >215  
00A0A7: 20 9E 82    >216           jsr   print      
00A0AA: 0D 0D       >217           hex   0d,0d      
00A0AC: 49 73 20 74 >218           asc   'Is this information correct [Y/N] ? ',00 
00A0B0: 68 69 73 20 69 6E 66 6F 
00A0B8: 72 6D 61 74 69 6F 6E 20 
00A0C0: 63 6F 72 72 65 63 74 20 
00A0C8: 5B 59 2F 4E 5D 20 3F 20 
00A0D0: 00 
                    >219  
00A0D1: 20 10 84    >220           jsr   inpyn      
00A0D4: 90 03 =A0D9 >221           bcc   init4      
00A0D6: 4C B6 9D    >222           jmp   doinit     
                    >223  
                    >224  *-------------------------------
                    >225  
00A0D9: A9 FF       >226  init4    lda   #-1        
00A0DB: 8D 8E 82    >227           sta   init       ; set init mode
                    >228  
00A0DE: 20 8C 97    >229  einit0   jsr   re_vid     
00A0E1: A2 DE       >230  einit1   ldx   #<einit0   
00A0E3: A9 A0       >231           lda   #>einit0   
00A0E5: 20 18 86    >232           jsr   escape     
00A0E8: 20 7F 8F    >233           jsr   re_mdm     
00A0EB: A2 E1       >234  einit2   ldx   #<einit1   
00A0ED: A9 A0       >235           lda   #>einit1   ; if esc, go back 1 level
00A0EF: 20 18 86    >236           jsr   escape     
00A0F2: 20 AD 9B    >237           jsr   re_pr      
00A0F5: A2 EB       >238  einit3   ldx   #<einit2   
00A0F7: A9 A0       >239           lda   #>einit2   
00A0F9: 20 18 86    >240           jsr   escape     
00A0FC: 20 25 99    >241           jsr   re_clk     
                    >242  
                    >243  *-------------------------------
                    >244  
00A0FF: A0 15       >245           ldy   #<devnam   
00A101: A9 00       >246           lda   #0         
00A103: 99 00 08    >247  :loop    sta   confbuf,y  ; zero out pathname buffer
00A106: C8          >248           iny              
00A107: D0 FA =A103 >249           bne   :loop      
                    >250  
                    >251  *-------------------------------
                    >252  * start the hardware config
                    >253  
00A109: A2 F5       >254  hard1    ldx   #<einit3   
00A10B: A9 A0       >255           lda   #>einit3   ; backup 1 level
00A10D: 20 18 86    >256           jsr   escape     
                    >257  
00A110: 20 84 8E    >258           jsr   TopBox     
00A113: 20 9E 82    >259           jsr   print      
00A116: 01 03 04    >260           db    1,3,4      
00A119: 2D 20 43 6F >261           asc   '- Copy Files to Storage Device -',00 
00A11D: 70 79 20 46 69 6C 65 73 
00A125: 20 74 6F 20 53 74 6F 72 
00A12D: 61 67 65 20 44 65 76 69 
00A135: 63 65 20 2D 00 
                    >262  
00A13A: 86 09       >263           stx   x_save     
00A13C: AE B3 FB    >264           ldx   $fbb3      
00A13F: E0 EA       >265           cpx   #$ea       ;][ plus?
00A141: D0 0A =A14D >266           bne   :notplus   ;nope
                    >267  
00A143: A6 09       >268           ldx   x_save     
00A145: A9 00       >269           lda   #0         
00A147: 8D 38 A5    >270           sta   setxfer    
00A14A: 4C AF A2    >271           jmp   :nostac    
                    >272  
00A14D: A6 09       >273  :notplus ldx   x_save     
00A14F: 20 3A 8E    >274           jsr   cls        
00A152: 20 9E 82    >275           jsr   print      
00A155: 47 42 42 53 >276           asc   'GBBS "Pro" v2.3 comes with a basic file',0d 
00A159: 20 22 50 72 6F 22 20 76 
00A161: 32 2E 33 20 63 6F 6D 65 
00A169: 73 20 77 69 74 68 20 61 
00A171: 20 62 61 73 69 63 20 66 
00A179: 69 6C 65 0D 
00A17D: 74 72 61 6E >277           asc   'transfer  system built-in.  Do you want',0d 
00A181: 73 66 65 72 20 20 73 79 
00A189: 73 74 65 6D 20 62 75 69 
00A191: 6C 74 2D 69 6E 2E 20 20 
00A199: 44 6F 20 79 6F 75 20 77 
00A1A1: 61 6E 74 0D 
00A1A5: 74 6F 20 69 >278           asc   'to install the  more  advanced SuperTac',0d 
00A1A9: 6E 73 74 61 6C 6C 20 74 
00A1B1: 68 65 20 20 6D 6F 72 65 
00A1B9: 20 20 61 64 76 61 6E 63 
00A1C1: 65 64 20 53 75 70 65 72 
00A1C9: 54 61 63 0D 
00A1CD: 66 69 6C 65 >279           asc   'file transfer system [Y/N] ? ',00 
00A1D1: 20 74 72 61 6E 73 66 65 
00A1D9: 72 20 73 79 73 74 65 6D 
00A1E1: 20 5B 59 2F 4E 5D 20 3F 
00A1E9: 20 00 
                    >280  
00A1EB: 20 10 84    >281           jsr   inpyn      
00A1EE: 90 08 =A1F8 >282           bcc   :stac      
00A1F0: A9 00       >283           lda   #0         
00A1F2: 8D 38 A5    >284           sta   setxfer    
00A1F5: 4C AF A2    >285           jmp   :nostac    
                    >286  
00A1F8: A9 01       >287  :stac    lda   #1         
00A1FA: 8D 38 A5    >288           sta   setxfer    
                    >289  
00A1FD: 20 9E 82    >290           jsr   print      
00A200: 0D 0D 0D    >291           hex   0d,0d,0d   
00A203: 50 6C 65 61 >292           asc   'Please enter the number of volumes that',0d 
00A207: 73 65 20 65 6E 74 65 72 
00A20F: 20 74 68 65 20 6E 75 6D 
00A217: 62 65 72 20 6F 66 20 76 
00A21F: 6F 6C 75 6D 65 73 20 74 
00A227: 68 61 74 0D 
00A22B: 73 68 6F 75 >293           asc   'should  be  alloceted  to the  SuperTac',0d 
00A22F: 6C 64 20 20 62 65 20 20 
00A237: 61 6C 6C 6F 63 65 74 65 
00A23F: 64 20 20 74 6F 20 74 68 
00A247: 65 20 20 53 75 70 65 72 
00A24F: 54 61 63 0D 
00A253: 66 69 6C 65 >294           asc   'file transfer system.',0d,0d,0d 
00A257: 20 74 72 61 6E 73 66 65 
00A25F: 72 20 73 79 73 74 65 6D 
00A267: 2E 0D 0D 0D 
00A26B: 4E 75 6D 62 >295           asc   'Number of volumes? [1-99] ',00 
00A26F: 65 72 20 6F 66 20 76 6F 
00A277: 6C 75 6D 65 73 3F 20 5B 
00A27F: 31 2D 39 39 5D 20 00 
                    >296  
00A286: A2 63       >297           ldx   #99        ;max is 99
00A288: 20 B0 83    >298           jsr   inpnum     
00A28B: 8D 52 A7    >299           sta   volumes    
                    >300  
00A28E: 20 24 85    >301           jsr   bindec8    
00A291: 8D 08 AD    >302           sta   stacacc+2  ;sysop high (10's)
00A294: 8E 09 AD    >303           stx   stacacc+3  ;sysop high (1's)
00A297: 8D 0D AD    >304           sta   stacacc+7  ;user high
00A29A: 8E 0E AD    >305           stx   stacacc+8  ;user high
00A29D: 8D 12 AD    >306           sta   stacacc+12 ;elite high
00A2A0: 8E 13 AD    >307           stx   stacacc+13 ;elite high
00A2A3: 8D 17 AD    >308           sta   stacacc+17 ;priv high
00A2A6: 8E 18 AD    >309           stx   stacacc+18 ;priv high
00A2A9: 8D 1C AD    >310           sta   stacacc+22 ;board manager high
00A2AC: 8E 1D AD    >311           stx   stacacc+23 ;board manager high
                    >312  
00A2AF: 20 3A 8E    >313  :nostac  jsr   cls        
00A2B2: 20 9E 82    >314           jsr   print      
00A2B5: 50 6C 65 61 >315           asc   'Please enter the slot and drive of your',0d 
00A2B9: 73 65 20 65 6E 74 65 72 
00A2C1: 20 74 68 65 20 73 6C 6F 
00A2C9: 74 20 61 6E 64 20 64 72 
00A2D1: 69 76 65 20 6F 66 20 79 
00A2D9: 6F 75 72 0D 
00A2DD: 6D 61 73 73 >316           asc   'mass storage  device.  If your media is',0d 
00A2E1: 20 73 74 6F 72 61 67 65 
00A2E9: 20 20 64 65 76 69 63 65 
00A2F1: 2E 20 20 49 66 20 79 6F 
00A2F9: 75 72 20 6D 65 64 69 61 
00A301: 20 69 73 0D 
00A305: 72 65 6D 6F >317           asc   'removable, then  please make sure there',0d 
00A309: 76 61 62 6C 65 2C 20 74 
00A311: 68 65 6E 20 20 70 6C 65 
00A319: 61 73 65 20 6D 61 6B 65 
00A321: 20 73 75 72 65 20 74 68 
00A329: 65 72 65 0D 
00A32D: 69 73 20 66 >318           asc   'is formatted media in place.',0d,0d,0d 
00A331: 6F 72 6D 61 74 74 65 64 
00A339: 20 6D 65 64 69 61 20 69 
00A341: 6E 20 70 6C 61 63 65 2E 
00A349: 0D 0D 0D 
00A34C: 20 20 20 20 >319           asc   '     Slot? [1-7] ',00 
00A350: 20 53 6C 6F 74 3F 20 5B 
00A358: 31 2D 37 5D 20 00 
00A35E: A2 07       >320           ldx   #7         
00A360: 20 B0 83    >321           jsr   inpnum     
00A363: 8D 6E AB    >322           sta   slot       ; save the slot
                    >323  
00A366: 20 9E 82    >324           jsr   print      
00A369: 0D          >325           hex   0d         
00A36A: 20 20 20 20 >326           asc   '    Drive? [1-2] ',00 
00A36E: 44 72 69 76 65 3F 20 5B 
00A376: 31 2D 32 5D 20 00 
00A37C: A2 02       >327           ldx   #2         
00A37E: 20 B0 83    >328           jsr   inpnum     
00A381: 8D 6F AB    >329           sta   drive      ; save the drive
00A384: CE 6F AB    >330           dec   drive      ; make into [0-1] range
                    >331  
00A387: 20 9E 82    >332           jsr   print      
00A38A: 0D 0D 0D    >333           hex   0d,0d,0d   
00A38D: 49 73 20 74 >334           asc   'Is the above correct [Y/N] ? ',00 
00A391: 68 65 20 61 62 6F 76 65 
00A399: 20 63 6F 72 72 65 63 74 
00A3A1: 20 5B 59 2F 4E 5D 20 3F 
00A3A9: 20 00 
00A3AB: 20 10 84    >335           jsr   inpyn      
00A3AE: 90 03 =A3B3 >336           bcc   *+5        
00A3B0: 4C AF A2    >337           jmp   :nostac    ;nope
                    >338  
00A3B3: 20 3A 8E    >339           jsr   cls        
00A3B6: 20 9E 82    >340           jsr   print      
00A3B9: 49 66 20 79 >341           asc   'If you  continue, a  directory GBBS.PRO',0d 
00A3BD: 6F 75 20 20 63 6F 6E 74 
00A3C5: 69 6E 75 65 2C 20 61 20 
00A3CD: 20 64 69 72 65 63 74 6F 
00A3D5: 72 79 20 47 42 42 53 2E 
00A3DD: 50 52 4F 0D 
00A3E1: 77 69 6C 6C >342           asc   'will be created on  your  mass  storage',0d 
00A3E5: 20 62 65 20 63 72 65 61 
00A3ED: 74 65 64 20 6F 6E 20 20 
00A3F5: 79 6F 75 72 20 20 6D 61 
00A3FD: 73 73 20 20 73 74 6F 72 
00A405: 61 67 65 0D 
00A409: 64 65 76 69 >343           asc   'device.  All  required  files  will  be',0d 
00A40D: 63 65 2E 20 20 41 6C 6C 
00A415: 20 20 72 65 71 75 69 72 
00A41D: 65 64 20 20 66 69 6C 65 
00A425: 73 20 20 77 69 6C 6C 20 
00A42D: 20 62 65 0D 
00A431: 63 6F 70 69 >344           asc   'copied into this directory. No existing',0d 
00A435: 65 64 20 69 6E 74 6F 20 
00A43D: 74 68 69 73 20 64 69 72 
00A445: 65 63 74 6F 72 79 2E 20 
00A44D: 4E 6F 20 65 78 69 73 74 
00A455: 69 6E 67 0D 
00A459: 66 69 6C 65 >345           asc   'files will be destroyed.',00 
00A45D: 73 20 77 69 6C 6C 20 62 
00A465: 65 20 64 65 73 74 72 6F 
00A46D: 79 65 64 2E 00 
                    >346  
00A472: 20 62 86    >347           jsr   getcr      
                    >348  
00A475: A9 00       >349           lda   #0         ; no more turning away..
00A477: 20 18 86    >350           jsr   escape     ; [p. floyd]
                    >351  
00A47A: 20 AB 8A    >352           jsr   chkspc     ; check drive space
00A47D: C9 03       >353           cmp   #3         ; are there are at least 768 blocks free?
00A47F: 90 03 =A484 >354           bcc   :nospace   ; not enough room
00A481: 4C 39 A5    >355           jmp   hard2      
                    >356  
00A484: 20 3A 8E    >357  :nospace jsr   cls        
00A487: 20 9E 82    >358           jsr   print      
00A48A: 54 68 65 20 >359           asc   'The  storage  device checked  does  not',0d 
00A48E: 20 73 74 6F 72 61 67 65 
00A496: 20 20 64 65 76 69 63 65 
00A49E: 20 63 68 65 63 6B 65 64 
00A4A6: 20 20 64 6F 65 73 20 20 
00A4AE: 6E 6F 74 0D 
00A4B2: 63 6F 6E 74 >360           asc   'contain enough storage space to run the',0d 
00A4B6: 61 69 6E 20 65 6E 6F 75 
00A4BE: 67 68 20 73 74 6F 72 61 
00A4C6: 67 65 20 73 70 61 63 65 
00A4CE: 20 74 6F 20 72 75 6E 20 
00A4D6: 74 68 65 0D 
00A4DA: 73 79 73 74 >361           asc   'system. You need to make some more room',0d 
00A4DE: 65 6D 2E 20 59 6F 75 20 
00A4E6: 6E 65 65 64 20 74 6F 20 
00A4EE: 6D 61 6B 65 20 73 6F 6D 
00A4F6: 65 20 6D 6F 72 65 20 72 
00A4FE: 6F 6F 6D 0D 
00A502: 6F 6E 20 20 >362           asc   'on  this  device,  or  choose   another',0d 
00A506: 74 68 69 73 20 20 64 65 
00A50E: 76 69 63 65 2C 20 20 6F 
00A516: 72 20 20 63 68 6F 6F 73 
00A51E: 65 20 20 20 61 6E 6F 74 
00A526: 68 65 72 0D 
00A52A: 64 65 76 69 >363           asc   'device.',0d 
00A52E: 63 65 2E 0D 
                    >364  
00A532: 20 62 86    >365           jsr   getcr      
00A535: 4C AF A2    >366           jmp   :nostac    ; goto hard/floppy question
                    >367  
00A538: 00          >368  setxfer  db    0          
                    >369  
00A539: 20 3A 8E    >370  hard2    jsr   cls        
00A53C: 20 9E 82    >371           jsr   print      
00A53F: 54 68 65 20 >372           asc   'The configuration  program is now going',0d 
00A543: 63 6F 6E 66 69 67 75 72 
00A54B: 61 74 69 6F 6E 20 20 70 
00A553: 72 6F 67 72 61 6D 20 69 
00A55B: 73 20 6E 6F 77 20 67 6F 
00A563: 69 6E 67 0D 
00A567: 74 6F 20 63 >373           asc   'to copy  all the  files  needed  to run',0d 
00A56B: 6F 70 79 20 20 61 6C 6C 
00A573: 20 74 68 65 20 20 66 69 
00A57B: 6C 65 73 20 20 6E 65 65 
00A583: 64 65 64 20 20 74 6F 20 
00A58B: 72 75 6E 0D 
00A58F: 47 42 42 53 >374           asc   'GBBS Pro onto your mass storage device.',00 
00A593: 20 50 72 6F 20 6F 6E 74 
00A59B: 6F 20 79 6F 75 72 20 6D 
00A5A3: 61 73 73 20 73 74 6F 72 
00A5AB: 61 67 65 20 64 65 76 69 
00A5B3: 63 65 2E 00 
                    >375  
00A5B7: 20 8E 86    >376           jsr   getg       ; get permission
00A5BA: 20 3A 8E    >377           jsr   cls        
                    >378  
00A5BD: 20 13 8D    >379           jsr   setgbbs    ;create xxx/gbbs.pro/
00A5C0: 20 EC 8A    >380           jsr   setspec    ;update the drive spec list
                    >381  
00A5C3: 20 AB 8A    >382           jsr   chkspc     ;reset path to original drive
00A5C6: 20 BC 8B    >383           jsr   setprg     ;create & log xxx/gbbs.pro/program
                    >384  
00A5C9: 20 53 A7    >385           jsr   make1      ;do copy in 2 parts
00A5CC: 20 D2 A7    >386           jsr   make1a     
                    >387  
                    >388  * copy the rest of the files
                    >389  
00A5CF: 20 AB 8A    >390           jsr   chkspc     ;reset path to original drive
00A5D2: 20 DF 8B    >391           jsr   setsys     ;create & log xxx/gbbs.pro/system
00A5D5: 20 51 A8    >392           jsr   make2      
                    >393  
00A5D8: 20 AB 8A    >394           jsr   chkspc     ;reset path to original drive
00A5DB: 20 02 8C    >395           jsr   setgfile   ;create & log xxx/gbbs.pro/gfiles
00A5DE: 20 EF A8    >396           jsr   make3      
                    >397  
00A5E1: 20 AB 8A    >398           jsr   chkspc     ;reset path to original drive
00A5E4: 20 25 8C    >399           jsr   setdnload  ;create & log xxx/gbbs.pro/download
00A5E7: 20 5E A9    >400           jsr   make4      
                    >401  
00A5EA: 20 AB 8A    >402           jsr   chkspc     ;reset path to original drive
00A5ED: 20 48 8C    >403           jsr   setupload  ;create xxx/gbbs.pro/upload
                    >404  
00A5F0: 20 AB 8A    >405           jsr   chkspc     ;reset path to original drive
00A5F3: 20 6B 8C    >406           jsr   setbltn    ;create & log xxx/gbbs.pro/bulletins
00A5F6: 20 CE A9    >407           jsr   make5      
                    >408  
00A5F9: 20 AB 8A    >409           jsr   chkspc     ;reset path to original drive
00A5FC: 20 8E 8C    >410           jsr   setmail    ;create xxx/gbbs.pro/mail
                    >411  
00A5FF: 20 AB 8A    >412           jsr   chkspc     ;reset path to original drive
00A602: 20 B1 8C    >413           jsr   settemp    ;create xxx/gbbs.pro/temp
                    >414  
00A605: AD 38 A5    >415           lda   setxfer    ;did they want a transfer system?
00A608: D0 03 =A60D >416           bne   :doit      ;yes, set it up
00A60A: 4C 67 A6    >417           jmp   noxfer     ;nope, skip the next step
                    >418  
00A60D: 20 AB 8A    >419  :doit    jsr   chkspc     ;reset path to original drive
00A610: 20 BC 8B    >420           jsr   setprg     ;create & log xxx/gbbs.pro/program
00A613: 20 3C AA    >421           jsr   make7      
                    >422  
00A616: 20 AB 8A    >423           jsr   chkspc     ;reset path to original drive
00A619: 20 EA 8C    >424           jsr   setstac    ;create & log xxx/gbbs.pro/stac/vol.
00A61C: 20 B5 AA    >425           jsr   make8      
                    >426  
                    >427  * setup supertac volumes
                    >428  
00A61F: A9 00       >429           lda   #0         
00A621: 8D 51 A7    >430           sta   curvol     ;start at volume 1
00A624: EE C8 8D    >431           inc   dstpfx     ;add one to length of destination prefix
                    >432  
00A627: EE 51 A7    >433  :loop    inc   curvol     ;add one to current volume
00A62A: AD 51 A7    >434           lda   curvol     ;which volume are we at?
00A62D: C9 0A       >435           cmp   #10        ;did we do 10 yet?
00A62F: 90 1F =A650 >436           bcc   :less10    ;nope, we have less than 10
00A631: C9 0B       >437           cmp   #11        ;more than 9, but how much more?
00A633: B0 03 =A638 >438           bcs   :over10    ;>= 11, so we not right on 10
00A635: EE C8 8D    >439           inc   dstpfx     ;smack dab on 10, so length is one greater
                    >440  
00A638: 20 24 85    >441  :over10  jsr   bindec8    ;convert volume we're on to decimal
                    >442  
00A63B: AC C8 8D    >443           ldy   dstpfx     ;get current length
00A63E: 88          >444           dey              ;character before the end
00A63F: 99 C8 8D    >445           sta   dstpfx,y   ;store 10's
00A642: 8A          >446           txa              ;get 1's
00A643: C8          >447           iny              ;next character forward
00A644: 99 C8 8D    >448           sta   dstpfx,y   ;store 1's
                    >449  
00A647: 20 00 BF    >450           jsr   mli        ; create /xxx/gbbs.pro/stac/vol.XX
00A64A: C0          >451           db    $c0        ; create new path
00A64B: 20 8E       >452           dw    p_crpth    
00A64D: 4C 5F A6    >453           jmp   :over      
                    >454  
00A650: AE C8 8D    >455  :less10  ldx   dstpfx     ;add single number to end of prefix
00A653: 18          >456           clc              
00A654: 69 30       >457           adc   #'0'       ;make it ascii
00A656: 9D C8 8D    >458           sta   dstpfx,x   
                    >459  
00A659: 20 00 BF    >460           jsr   mli        ; create /xxx/gbbs.pro/stac/vol.X
00A65C: C0          >461           db    $c0        ; create new path
00A65D: 20 8E       >462           dw    p_crpth    
                    >463  
00A65F: AD 51 A7    >464  :over    lda   curvol     ;how many volumes done
00A662: CD 52 A7    >465           cmp   volumes    ;done 'em all yet?
00A665: D0 C0 =A627 >466           bne   :loop      ;nope, do some more
                    >467  
                    >468  *-------------------------------
                    >469  
00A667: 20 3A 8E    >470  noxfer   jsr   cls        
00A66A: 20 9E 82    >471           jsr   print      
00A66D: 59 6F 75 72 >472           asc   'Your  system  is now  configured and is'0d 
00A671: 20 20 73 79 73 74 65 6D 
00A679: 20 20 69 73 20 6E 6F 77 
00A681: 20 20 63 6F 6E 66 69 67 
00A689: 75 72 65 64 20 61 6E 64 
00A691: 20 69 73 0D 
00A695: 72 65 61 64 >473           asc   'ready to run. To bring  up your  system',0d 
00A699: 79 20 74 6F 20 72 75 6E 
00A6A1: 2E 20 54 6F 20 62 72 69 
00A6A9: 6E 67 20 20 75 70 20 79 
00A6B1: 6F 75 72 20 20 73 79 73 
00A6B9: 74 65 6D 0D 
00A6BD: 66 6F 72 20 >474           asc   'for operation, do the following:',0d,0d 
00A6C1: 6F 70 65 72 61 74 69 6F 
00A6C9: 6E 2C 20 64 6F 20 74 68 
00A6D1: 65 20 66 6F 6C 6C 6F 77 
00A6D9: 69 6E 67 3A 0D 0D 
00A6DF: 42 6F 6F 74 >475           asc   'Boot up  your mass  storage  device and',0d 
00A6E3: 20 75 70 20 20 79 6F 75 
00A6EB: 72 20 6D 61 73 73 20 20 
00A6F3: 73 74 6F 72 61 67 65 20 
00A6FB: 20 64 65 76 69 63 65 20 
00A703: 61 6E 64 0D 
00A707: 74 79 70 65 >476           asc   'type "PREFIX GBBS.PRO/PROGRAM".',0d,0d 
00A70B: 20 22 50 52 45 46 49 58 
00A713: 20 47 42 42 53 2E 50 52 
00A71B: 4F 2F 50 52 4F 47 52 41 
00A723: 4D 22 2E 0D 0D 
00A728: 54 79 70 65 >477           asc   'Type "-ACOS" to start your system.',00 
00A72C: 20 22 2D 41 43 4F 53 22 
00A734: 20 74 6F 20 73 74 61 72 
00A73C: 74 20 79 6F 75 72 20 73 
00A744: 79 73 74 65 6D 2E 00 
                    >478  
00A74B: 20 62 86    >479           jsr   getcr      
00A74E: 4C 82 B2    >480           jmp   do_quit    
                    >481  
00A751: 00          >482  curvol   db    0          
00A752: 00          >483  volumes  db    0          
                    >484  
                    >485  *-------------------------------
                    >486  * copy boot stuff over
                    >487  *-------------------------------
                    >488  
00A753: A2 21       >489  make1    ldx   #<disk1    ; is first disk online?
00A755: A9 AD       >490           lda   #>disk1    
00A757: 20 FF 86    >491           jsr   verify     
00A75A: 90 40 =A79C >492           bcc   :online    ; yes, it is
                    >493  
00A75C: 20 3A 8E    >494           jsr   cls        
00A75F: 20 9E 82    >495           jsr   print      
00A762: 50 6C 65 61 >496           asc   'Please place GBBS Pro Disk #1,',0d 
00A766: 73 65 20 70 6C 61 63 65 
00A76E: 20 47 42 42 53 20 50 72 
00A776: 6F 20 44 69 73 6B 20 23 
00A77E: 31 2C 0D 
00A781: 2F 47 42 42 >497           asc   '/GBBS.CONFIG online.',00 
00A785: 53 2E 43 4F 4E 46 49 47 
00A78D: 20 6F 6E 6C 69 6E 65 2E 
00A795: 00 
                    >498  
00A796: 20 8E 86    >499           jsr   getg       ; wait for ok
00A799: 4C 53 A7    >500           jmp   make1      ;check it to make sure
                    >501  
00A79C: 20 3A 8E    >502  :online  jsr   cls        
00A79F: 20 9E 82    >503           jsr   print      
00A7A2: 43 6F 70 79 >504           asc   'Copying ACOS...',00 
00A7A6: 69 6E 67 20 41 43 4F 53 
00A7AE: 2E 2E 2E 00 
                    >505  
00A7B2: A2 53       >506           ldx   #<list1    ; copy acos & acos.obj
00A7B4: A9 AD       >507           lda   #>list1    
00A7B6: 20 C9 89    >508           jsr   copy       
                    >509  
                    >510  *-------------------------------
                    >511  
00A7B9: 20 6F 89    >512           jsr   logdst     ; log to destination
00A7BC: A2 5E       >513           ldx   #<gname2   
00A7BE: A9 AB       >514           lda   #>gname2   ; open file
00A7C0: 20 82 89    >515           jsr   movname    
00A7C3: 20 5C 87    >516           jsr   open       
                    >517  
00A7C6: A2 00       >518           ldx   #<confbuf  
00A7C8: A9 08       >519           lda   #>confbuf  ; write configured system out
00A7CA: A0 14       >520           ldy   #20        ; write 10 pages (5 blocks)
00A7CC: 20 E1 87    >521           jsr   wrblk      
00A7CF: 4C 7E 87    >522           jmp   close      ; close file and return
                    >523  
                    >524  *-------------------------------
                    >525  * copy segments into XXX/GBBS.PRO/PROGRAM
                    >526  
00A7D2: A2 2E       >527  make1a   ldx   #<disk2    ; is program disk in place?
00A7D4: A9 AD       >528           lda   #>disk2    
00A7D6: 20 FF 86    >529           jsr   verify     
00A7D9: 90 42 =A81D >530           bcc   :online    ; yes, it is
                    >531  
00A7DB: 20 3A 8E    >532           jsr   cls        
00A7DE: 20 9E 82    >533           jsr   print      
00A7E1: 50 6C 65 61 >534           asc   'Please place GBBS Pro Disk #2,',0d 
00A7E5: 73 65 20 70 6C 61 63 65 
00A7ED: 20 47 42 42 53 20 50 72 
00A7F5: 6F 20 44 69 73 6B 20 23 
00A7FD: 32 2C 0D 
00A800: 2F 47 42 42 >535           asc   '/GBBS.SEGMENTS online.',00 
00A804: 53 2E 53 45 47 4D 45 4E 
00A80C: 54 53 20 6F 6E 6C 69 6E 
00A814: 65 2E 00 
                    >536  
00A817: 20 8E 86    >537           jsr   getg       ; wait for ok
00A81A: 4C D2 A7    >538           jmp   make1a     
                    >539  
00A81D: 20 3A 8E    >540  :online  jsr   cls        
00A820: 20 9E 82    >541           jsr   print      
00A823: 43 6F 70 79 >542           asc   'Copying GBBS "Pro" Program Segments...',00 
00A827: 69 6E 67 20 47 42 42 53 
00A82F: 20 22 50 72 6F 22 20 50 
00A837: 72 6F 67 72 61 6D 20 53 
00A83F: 65 67 6D 65 6E 74 73 2E 
00A847: 2E 2E 00 
                    >543  
00A84A: A2 68       >544           ldx   #<list1a   ; copy segments to xxx/gbbs.pro/program
00A84C: A9 AD       >545           lda   #>list1a   
00A84E: 4C C9 89    >546           jmp   copy       
                    >547  
                    >548  *-------------------------------
                    >549  * make XXX/GBBS.PRO/SYSTEM
                    >550  
00A851: A2 3D       >551  make2    ldx   #<disk3    ; is system disk in place?
00A853: A9 AD       >552           lda   #>disk3    
00A855: 20 FF 86    >553           jsr   verify     
00A858: 90 3E =A898 >554           bcc   :online    ; yes, it is
                    >555  
00A85A: 20 3A 8E    >556           jsr   cls        
00A85D: 20 9E 82    >557           jsr   print      
00A860: 50 6C 65 61 >558           asc   'Please place GBBS Pro Disk #3,',0d 
00A864: 73 65 20 70 6C 61 63 65 
00A86C: 20 47 42 42 53 20 50 72 
00A874: 6F 20 44 69 73 6B 20 23 
00A87C: 33 2C 0D 
00A87F: 2F 47 42 42 >559           asc   '/GBBS.FILE online.',00 
00A883: 53 2E 46 49 4C 45 20 6F 
00A88B: 6E 6C 69 6E 65 2E 00 
                    >560  
00A892: 20 8E 86    >561           jsr   getg       ; wait for ok
00A895: 4C 51 A8    >562           jmp   make2      
                    >563  
00A898: 20 3A 8E    >564  :online  jsr   cls        
00A89B: 20 9E 82    >565           jsr   print      
00A89E: 43 6F 70 79 >566           asc   'Copying System Files...',00 
00A8A2: 69 6E 67 20 53 79 73 74 
00A8AA: 65 6D 20 46 69 6C 65 73 
00A8B2: 2E 2E 2E 00 
                    >567  
00A8B6: A2 CB       >568           ldx   #<list2    ; copy system files
00A8B8: A9 AD       >569           lda   #>list2    
00A8BA: 20 C9 89    >570           jsr   copy       
                    >571  
00A8BD: 20 6F 89    >572           jsr   logdst     ; log to seg sub
00A8C0: A2 8F       >573           ldx   #<usrname  ; open user file
00A8C2: A9 82       >574           lda   #>usrname  
00A8C4: 20 82 89    >575           jsr   movname    
00A8C7: 20 5C 87    >576           jsr   open       
                    >577  
00A8CA: A2 F6       >578           ldx   #<user-128 ; write out sysop data
00A8CC: A9 AA       >579           lda   #>user-128 
00A8CE: A0 02       >580           ldy   #2         ; write 1 page (2 blocks)
00A8D0: 20 E1 87    >581           jsr   wrblk      
                    >582  
00A8D3: 20 7E 87    >583           jsr   close      ; finish up
                    >584  
00A8D6: A2 70       >585           ldx   #<dtanam1  
00A8D8: A9 AB       >586           lda   #>dtanam1  ; open data1 file
00A8DA: 20 82 89    >587           jsr   movname    
00A8DD: 20 5C 87    >588           jsr   open       
                    >589  
00A8E0: A2 F5       >590           ldx   #<datadef  
00A8E2: A9 AB       >591           lda   #>datadef  
00A8E4: A0 04       >592           ldy   #4         ; write 2 pages (4 blocks)
00A8E6: 20 E1 87    >593           jsr   wrblk      
00A8E9: 20 7E 87    >594           jsr   close      
00A8EC: 4C 68 89    >595           jmp   logcon     ; log back
                    >596  
                    >597  *-------------------------------
                    >598  * copy files into XXX/GBBS.PRO/GFILES
                    >599  
00A8EF: A2 3D       >600  make3    ldx   #<disk3    ; is system disk in place?
00A8F1: A9 AD       >601           lda   #>disk3    
00A8F3: 20 FF 86    >602           jsr   verify     
00A8F6: 90 40 =A938 >603           bcc   :online    ; yes, it is
                    >604  
00A8F8: 20 3A 8E    >605           jsr   cls        
00A8FB: 20 9E 82    >606           jsr   print      
00A8FE: 50 6C 65 61 >607           asc   'Please place GBBS Pro Disk #3,',0d 
00A902: 73 65 20 70 6C 61 63 65 
00A90A: 20 47 42 42 53 20 50 72 
00A912: 6F 20 44 69 73 6B 20 23 
00A91A: 33 2C 0D 
00A91D: 2F 47 42 42 >608           asc   '/GBBS.SYSTEM online.',00 
00A921: 53 2E 53 59 53 54 45 4D 
00A929: 20 6F 6E 6C 69 6E 65 2E 
00A931: 00 
                    >609  
00A932: 20 8E 86    >610           jsr   getg       ; wait for ok
00A935: 4C EF A8    >611           jmp   make3      
                    >612  
00A938: 20 3A 8E    >613  :online  jsr   cls        
00A93B: 20 9E 82    >614           jsr   print      
00A93E: 43 6F 70 79 >615           asc   'Copying General Files...',00 
00A942: 69 6E 67 20 47 65 6E 65 
00A94A: 72 61 6C 20 46 69 6C 65 
00A952: 73 2E 2E 2E 00 
                    >616  
00A957: A2 25       >617           ldx   #<list3    ; copy files to xxx/gbbs.pro/gfiles
00A959: A9 AF       >618           lda   #>list3    
00A95B: 4C C9 89    >619           jmp   copy       
                    >620  
                    >621  *-------------------------------
                    >622  * copy files into XXX/GBBS.PRO/DOWNLOAD
                    >623  
00A95E: A2 3D       >624  make4    ldx   #<disk3    ; is system disk in place?
00A960: A9 AD       >625           lda   #>disk3    
00A962: 20 FF 86    >626           jsr   verify     
00A965: 90 40 =A9A7 >627           bcc   :online    ; yes, it is
                    >628  
00A967: 20 3A 8E    >629           jsr   cls        
00A96A: 20 9E 82    >630           jsr   print      
00A96D: 50 6C 65 61 >631           asc   'Please place GBBS Pro Disk #3,',0d 
00A971: 73 65 20 70 6C 61 63 65 
00A979: 20 47 42 42 53 20 50 72 
00A981: 6F 20 44 69 73 6B 20 23 
00A989: 33 2C 0D 
00A98C: 2F 47 42 42 >632           asc   '/GBBS.SYSTEM online.',00 
00A990: 53 2E 53 59 53 54 45 4D 
00A998: 20 6F 6E 6C 69 6E 65 2E 
00A9A0: 00 
                    >633  
00A9A1: 20 8E 86    >634           jsr   getg       ; wait for ok
00A9A4: 4C 5E A9    >635           jmp   make4      
                    >636  
00A9A7: 20 3A 8E    >637  :online  jsr   cls        
00A9AA: 20 9E 82    >638           jsr   print      
00A9AD: 43 6F 70 79 >639           asc   'Copying Download Files...',00 
00A9B1: 69 6E 67 20 44 6F 77 6E 
00A9B9: 6C 6F 61 64 20 46 69 6C 
00A9C1: 65 73 2E 2E 2E 00 
                    >640  
00A9C7: A2 33       >641           ldx   #<list4    ; copy files to xxx/gbbs.pro/download
00A9C9: A9 AF       >642           lda   #>list4    
00A9CB: 4C C9 89    >643           jmp   copy       
                    >644  
                    >645  *-------------------------------
                    >646  * copy files into XXX/GBBS.PRO/BULLETINS
                    >647  
00A9CE: A2 3D       >648  make5    ldx   #<disk3    ; is system disk in place?
00A9D0: A9 AD       >649           lda   #>disk3    
00A9D2: 20 FF 86    >650           jsr   verify     
00A9D5: 90 40 =AA17 >651           bcc   :online    ; yes, it is
                    >652  
00A9D7: 20 3A 8E    >653           jsr   cls        
00A9DA: 20 9E 82    >654           jsr   print      
00A9DD: 50 6C 65 61 >655           asc   'Please place GBBS Pro Disk #3,',0d 
00A9E1: 73 65 20 70 6C 61 63 65 
00A9E9: 20 47 42 42 53 20 50 72 
00A9F1: 6F 20 44 69 73 6B 20 23 
00A9F9: 33 2C 0D 
00A9FC: 2F 47 42 42 >656           asc   '/GBBS.SYSTEM online.',00 
00AA00: 53 2E 53 59 53 54 45 4D 
00AA08: 20 6F 6E 6C 69 6E 65 2E 
00AA10: 00 
                    >657  
00AA11: 20 8E 86    >658           jsr   getg       ; wait for ok
00AA14: 4C CE A9    >659           jmp   make5      
                    >660  
00AA17: 20 3A 8E    >661  :online  jsr   cls        
00AA1A: 20 9E 82    >662           jsr   print      
00AA1D: 43 6F 70 79 >663           asc   'Copying Message File...',00 
00AA21: 69 6E 67 20 4D 65 73 73 
00AA29: 61 67 65 20 46 69 6C 65 
00AA31: 2E 2E 2E 00 
                    >664  
00AA35: A2 4B       >665           ldx   #<list5    ; copy file to xxx/gbbs.pro/bulletins
00AA37: A9 AF       >666           lda   #>list5    
00AA39: 4C C9 89    >667           jmp   copy       
                    >668  
                    >669  *-------------------------------
                    >670  * copy files into XXX/GBBS.PRO/MAIL
                    >671  
                    >672  *make6 ldx #<disk3 ; is system disk in place?
                    >673  * lda #>disk3
                    >674  * jsr verify
                    >675  * bcc :online ; yes, it is
                    >676  
                    >677  * jsr cls
                    >678  * jsr print
                    >679  * asc 'Please place GBBS Pro Disk #3,',0d
                    >680  * asc '/GBBS.SYSTEM online.',00
                    >681  
                    >682  * jsr getg ; wait for ok
                    >683  * jmp make6
                    >684  
                    >685  *:online jsr cls
                    >686  * jsr print
                    >687  * asc 'Copying Mail File...',00
                    >688  
                    >689  * ldx #<list6 ; copy file to xxx/gbbs.pro/mail
                    >690  * lda #>list6
                    >691  * jmp copy
                    >692  
                    >693  *-------------------------------
                    >694  * copy supertac stuff
                    >695  
00AA3C: A2 48       >696  make7    ldx   #<disk4    ; is supertac disk in place?
00AA3E: A9 AD       >697           lda   #>disk4    
00AA40: 20 FF 86    >698           jsr   verify     
00AA43: 90 3E =AA83 >699           bcc   :online    ; yes, it is
                    >700  
00AA45: 20 3A 8E    >701           jsr   cls        
00AA48: 20 9E 82    >702           jsr   print      
00AA4B: 50 6C 65 61 >703           asc   'Please place GBBS Pro Disk #4,',0d 
00AA4F: 73 65 20 70 6C 61 63 65 
00AA57: 20 47 42 42 53 20 50 72 
00AA5F: 6F 20 44 69 73 6B 20 23 
00AA67: 34 2C 0D 
00AA6A: 2F 47 42 42 >704           asc   '/GBBS.STAC online.',00 
00AA6E: 53 2E 53 54 41 43 20 6F 
00AA76: 6E 6C 69 6E 65 2E 00 
                    >705  
00AA7D: 20 8E 86    >706           jsr   getg       ; wait for ok
00AA80: 4C 3C AA    >707           jmp   make7      
                    >708  
00AA83: 20 3A 8E    >709  :online  jsr   cls        
00AA86: 20 9E 82    >710           jsr   print      
00AA89: 43 6F 70 79 >711           asc   'Copying SuperTac Program segments...',00 
00AA8D: 69 6E 67 20 53 75 70 65 
00AA95: 72 54 61 63 20 50 72 6F 
00AA9D: 67 72 61 6D 20 73 65 67 
00AAA5: 6D 65 6E 74 73 2E 2E 2E 
00AAAD: 00 
                    >712  
00AAAE: A2 4F       >713           ldx   #<list7    ; copy files to xxx/gbbs.pro/program
00AAB0: A9 AF       >714           lda   #>list7    
00AAB2: 4C C9 89    >715           jmp   copy       
                    >716  
                    >717  *-------------------------------
                    >718  * copy supertac support files
                    >719  
00AAB5: A2 48       >720  make8    ldx   #<disk4    ; is supertac disk in place?
00AAB7: A9 AD       >721           lda   #>disk4    
00AAB9: 20 FF 86    >722           jsr   verify     
00AABC: 90 3E =AAFC >723           bcc   :online    ; yes, it is
                    >724  
00AABE: 20 3A 8E    >725           jsr   cls        
00AAC1: 20 9E 82    >726           jsr   print      
00AAC4: 50 6C 65 61 >727           asc   'Please place GBBS Pro Disk #4,',0d 
00AAC8: 73 65 20 70 6C 61 63 65 
00AAD0: 20 47 42 42 53 20 50 72 
00AAD8: 6F 20 44 69 73 6B 20 23 
00AAE0: 34 2C 0D 
00AAE3: 2F 47 42 42 >728           asc   '/GBBS.STAC online.',00 
00AAE7: 53 2E 53 54 41 43 20 6F 
00AAEF: 6E 6C 69 6E 65 2E 00 
                    >729  
00AAF6: 20 8E 86    >730           jsr   getg       ; wait for ok
00AAF9: 4C B5 AA    >731           jmp   make8      
                    >732  
00AAFC: 20 3A 8E    >733  :online  jsr   cls        
00AAFF: 20 9E 82    >734           jsr   print      
00AB02: 43 6F 70 79 >735           asc   'Copying SuperTac Support files...',00 
00AB06: 69 6E 67 20 53 75 70 65 
00AB0E: 72 54 61 63 20 53 75 70 
00AB16: 70 6F 72 74 20 66 69 6C 
00AB1E: 65 73 2E 2E 2E 00 
                    >736  
00AB24: A2 A3       >737           ldx   #<list8    ; copy files to xxx/gbbs.pro/stac/vol.
00AB26: A9 AF       >738           lda   #>list8    
00AB28: 20 C9 89    >739           jsr   copy       
                    >740  
                    >741  * copy the access file to the supertac stuff
                    >742  
00AB2B: 20 6F 89    >743           jsr   logdst     
                    >744  
00AB2E: A2 67       >745           ldx   #<access   ;open access file
00AB30: A9 AB       >746           lda   #>access   
00AB32: 20 82 89    >747           jsr   movname    
00AB35: 20 5C 87    >748           jsr   open       
                    >749  
00AB38: A2 06       >750           ldx   #<stacacc  ;write out data
00AB3A: A9 AD       >751           lda   #>stacacc  
00AB3C: A0 01       >752           ldy   #1         ;write 128 bytes
00AB3E: 20 E1 87    >753           jsr   wrblk      
                    >754  
00AB41: 20 7E 87    >755           jsr   close      ;finish up
00AB44: 20 68 89    >756           jsr   logcon     ;log back to config
00AB47: 60          >757           rts              ;oi, we be done!
                    >758  
                    >759  *-------------------------------
                    >760  * print the slot or drive
                    >761  
00AB48: AD 6E AB    >762  prslot   lda   slot       
00AB4B: 18          >763           clc              
00AB4C: 69 30       >764           adc   #'0'       ; print slot
00AB4E: 4C 08 8F    >765           jmp   cout       
                    >766  
00AB51: AD 6F AB    >767  prdriv   lda   drive      
00AB54: 18          >768           clc              ; print drive
00AB55: 69 31       >769           adc   #'1'       
00AB57: 4C 08 8F    >770           jmp   cout       
                    >771  
                    >772  *-------------------------------
                    >773  * variables
                    >774  *-------------------------------
                    >775  
00AB5A: A2 20 A0 00 >776  diskid   db    $a2,$20,$a0,$00 
                    >777  
00AB5E: 08 41 43 4F >778  gname2   str   'ACOS.OBJ' 
00AB62: 53 2E 4F 42 4A 
00AB67: 06 41 43 43 >779  access   str   'ACCESS'   
00AB6B: 45 53 53 
                    >780  
00AB6E: 00          >781  slot     db    0          
00AB6F: 00          >782  drive    db    0          
00AB70: 05 44 41 54 >783  dtanam1  str   'DATA1'    
00AB74: 41 31 
                    >784  
00AB76: 00 00 00 00 >785  user     ds    70,0       
00AB7A: 00 00 00 00 00 00 00 00 
00AB82: 00 00 00 00 00 00 00 00 
00AB8A: 00 00 00 00 00 00 00 00 
00AB92: 00 00 00 00 00 00 00 00 
00AB9A: 00 00 00 00 00 00 00 00 
00ABA2: 00 00 00 00 00 00 00 00 
00ABAA: 00 00 00 00 00 00 00 00 
00ABB2: 00 00 00 00 00 00 00 00 
00ABBA: 00 00 
00ABBC: 20 20 20 20 >786  usrpass  asc   '        ' 
00ABC0: 20 20 20 20 
00ABC4: 78 78 78 2D >787  usrtele  asc   'xxx-xxx-xxxx' 
00ABC8: 78 78 78 2D 78 78 78 78 
00ABD0: 00 00       >788           dw    0          ;when$
00ABD2: FE FF FF    >789           db    %11111110,%11111111,%11111111 
00ABD5: FF 07       >790           db    %11111111,%00000111 
00ABD7: 50 00 00 00 >791           db    $50,$00,$00,$00,$00,$00,$00,$00,$00,$00 
00ABDB: 00 00 00 00 00 00 
00ABE1: 00 00 00 00 >792           ds    20,0       ;bytes
00ABE5: 00 00 00 00 00 00 00 00 
00ABED: 00 00 00 00 00 00 00 00 
                    >793  
00ABF5: 53 79 73 74 >794  datadef  asc   'System Name',0d 
00ABF9: 65 6D 20 4E 61 6D 65 0D 
00AC01: 53 79 73 6F >795           asc   'Sysop Name',0d 
00AC05: 70 20 4E 61 6D 65 0D 
00AC0C: 53 65 63 6F >796           asc   'Second Password',0d 
00AC10: 6E 64 20 50 61 73 73 77 
00AC18: 6F 72 64 0D 
                    >797  
00AC1C: 00 00 00 00 >798           ds    120,0      
00AC20: 00 00 00 00 00 00 00 00 
00AC28: 00 00 00 00 00 00 00 00 
00AC30: 00 00 00 00 00 00 00 00 
00AC38: 00 00 00 00 00 00 00 00 
00AC40: 00 00 00 00 00 00 00 00 
00AC48: 00 00 00 00 00 00 00 00 
00AC50: 00 00 00 00 00 00 00 00 
00AC58: 00 00 00 00 00 00 00 00 
00AC60: 00 00 00 00 00 00 00 00 
00AC68: 00 00 00 00 00 00 00 00 
00AC70: 00 00 00 00 00 00 00 00 
00AC78: 00 00 00 00 00 00 00 00 
00AC80: 00 00 00 00 00 00 00 00 
00AC88: 00 00 00 00 00 00 00 00 
00AC90: 00 00 00 00 
                    >799  
00AC94: 2D 2D 2D 2D >800  xdata    asc   '---------------------------------------',0d 
00AC98: 2D 2D 2D 2D 2D 2D 2D 2D 
00ACA0: 2D 2D 2D 2D 2D 2D 2D 2D 
00ACA8: 2D 2D 2D 2D 2D 2D 2D 2D 
00ACB0: 2D 2D 2D 2D 2D 2D 2D 2D 
00ACB8: 2D 2D 2D 0D 
00ACBC: 43 74 72 6C >801           asc   'Ctrl-S Stop/Start  Spacebar to Exit',0d 
00ACC0: 2D 53 20 53 74 6F 70 2F 
00ACC8: 53 74 61 72 74 20 20 53 
00ACD0: 70 61 63 65 62 61 72 20 
00ACD8: 74 6F 20 45 78 69 74 0D 
00ACE0: 50 72 65 73 >802           asc   'Press N for Next Bulletin',0d 
00ACE4: 73 20 4E 20 66 6F 72 20 
00ACEC: 4E 65 78 74 20 42 75 6C 
00ACF4: 6C 65 74 69 6E 0D 
00ACFA: 31 2C 30 0D >803           asc   '1,0',0d   
00ACFE: 00          >804           db    0          
                    >805  
00ACFF: 20          >806  condata  asc   ' '        
00AD00: 4E          >807           asc   'N'        
00AD01: 02          >808           db    2          
00AD02: 20 28 40 50 >809           db    32,40,64,80 
                    >810  
00AD06: 31 0D       >811  stacacc  asc   '1',0d     ;sysop low access
00AD08: 35 30 0D    >812           asc   '50',0d    ;sysop high access
00AD0B: 31 0D       >813           asc   '1',0d     ;user low access
00AD0D: 35 30 0D    >814           asc   '50',0d    ;user high access
00AD10: 31 0D       >815           asc   '1',0d     ;elite low access
00AD12: 35 30 0D    >816           asc   '50',0d    ;elite high access
00AD15: 31 0D       >817           asc   '1',0d     ;priv low access
00AD17: 35 30 0D    >818           asc   '50',0d    ;priv high access
00AD1A: 31 0D       >819           asc   '1',0d     ;board manager low access
00AD1C: 35 30 0D    >820           asc   '50',0d    ;board manager high access
00AD1F: 0D 0D       >821           hex   0d,0d      
                    >822  
                    >823  *-------------------------------
                    >824  * lists for identifying files
                    >825  
00AD21: 0C 2F 47 42 >826  disk1    str   '/GBBS.CONFIG' 
00AD25: 42 53 2E 43 4F 4E 46 49 
00AD2D: 47 
00AD2E: 0E 2F 47 42 >827  disk2    str   '/GBBS.SEGMENTS' 
00AD32: 42 53 2E 53 45 47 4D 45 
00AD3A: 4E 54 53 
00AD3D: 0A 2F 47 42 >828  disk3    str   '/GBBS.FILE' 
00AD41: 42 53 2E 46 49 4C 45 
00AD48: 0A 2F 47 42 >829  disk4    str   '/GBBS.STAC' 
00AD4C: 42 53 2E 53 54 41 43 
                    >830  
                    >831  * files on disk1
                    >832  
00AD53: 61 63 6F 73 >833  list1    asc   'acos',00  
00AD57: 00 
00AD58: 61 63 6F 73 >834           asc   'acos.obj',00 
00AD5C: 2E 6F 62 6A 00 
00AD61: 65 6E 63 6F >835           asc   'encode',00 
00AD65: 64 65 00 
                    >836  
                    >837  * files on disk2
                    >838  
00AD68: 6C 6F 67 6F >839  list1a   asc   'logon.seg.s',00 
00AD6C: 6E 2E 73 65 67 2E 73 00 
00AD74: 6D 61 69 6E >840           asc   'main.seg.s',00 
00AD78: 2E 73 65 67 2E 73 00 
00AD7F: 6D 73 67 2E >841           asc   'msg.seg.s',00 
00AD83: 73 65 67 2E 73 00 
00AD89: 6D 61 69 6C >842           asc   'mail.seg.s',00 
00AD8D: 2E 73 65 67 2E 73 00 
00AD94: 76 6F 74 65 >843           asc   'vote.seg.s',00 
00AD98: 2E 73 65 67 2E 73 00 
00AD9F: 73 79 73 74 >844           asc   'system.seg.s',00 
00ADA3: 65 6D 2E 73 65 67 2E 73 
00ADAB: 00 
00ADAC: 73 79 73 74 >845           asc   'system2.seg.s',00 
00ADB0: 65 6D 32 2E 73 65 67 2E 
00ADB8: 73 00 
00ADBA: 75 73 65 72 >846           asc   'userpurge.seg.s',00 
00ADBE: 70 75 72 67 65 2E 73 65 
00ADC6: 67 2E 73 00 
00ADCA: 00          >847           db    00         
                    >848  
                    >849  * files on disk3
                    >850  
00ADCB: 62 62 73 00 >851  list2    asc   'bbs',00   
00ADCF: 64 61 74 61 >852           asc   'data',00  
00ADD3: 00 
00ADD4: 64 61 74 61 >853           asc   'data1',00 
00ADD8: 31 00 
00ADDA: 64 61 74 61 >854           asc   'data2',00 
00ADDE: 32 00 
00ADE0: 65 72 72 6F >855           asc   'error.list',00 
00ADE4: 72 2E 6C 69 73 74 00 
00ADEB: 68 6C 70 2E >856           asc   'hlp.edit',00 
00ADEF: 65 64 69 74 00 
00ADF4: 68 6C 70 2E >857           asc   'hlp.main',00 
00ADF8: 6D 61 69 6E 00 
00ADFD: 68 6C 70 2E >858           asc   'hlp.msg',00 
00AE01: 6D 73 67 00 
00AE05: 68 6C 70 2E >859           asc   'hlp.user',00 
00AE09: 75 73 65 72 00 
00AE0E: 68 6C 70 2E >860           asc   'hlp.xfer',00 
00AE12: 78 66 65 72 00 
00AE17: 6D 6E 75 2E >861           asc   'mnu.mail.40',00 
00AE1B: 6D 61 69 6C 2E 34 30 00 
00AE23: 6D 6E 75 2E >862           asc   'mnu.mail.80',00 
00AE27: 6D 61 69 6C 2E 38 30 00 
00AE2F: 6D 6E 75 2E >863           asc   'mnu.mails.40',00 
00AE33: 6D 61 69 6C 73 2E 34 30 
00AE3B: 00 
00AE3C: 6D 6E 75 2E >864           asc   'mnu.mails.80',00 
00AE40: 6D 61 69 6C 73 2E 38 30 
00AE48: 00 
00AE49: 6D 6E 75 2E >865           asc   'mnu.new',00 
00AE4D: 6E 65 77 00 
00AE51: 6D 6E 75 2E >866           asc   'mnu.system.40',00 
00AE55: 73 79 73 74 65 6D 2E 34 
00AE5D: 30 00 
00AE5F: 6D 6E 75 2E >867           asc   'mnu.system.80',00 
00AE63: 73 79 73 74 65 6D 2E 38 
00AE6B: 30 00 
00AE6D: 6D 6E 75 2E >868           asc   'mnu.val.40',00 
00AE71: 76 61 6C 2E 34 30 00 
00AE78: 6D 6E 75 2E >869           asc   'mnu.val.80',00 
00AE7C: 76 61 6C 2E 38 30 00 
00AE83: 73 79 73 2E >870           asc   'sys.autoval',00 
00AE87: 61 75 74 6F 76 61 6C 00 
00AE8F: 73 79 73 2E >871           asc   'sys.info',00 
00AE93: 69 6E 66 6F 00 
00AE98: 73 79 73 2E >872           asc   'sys.newinfo',00 
00AE9C: 6E 65 77 69 6E 66 6F 00 
00AEA4: 73 79 73 2E >873           asc   'sys.news',00 
00AEA8: 6E 65 77 73 00 
00AEAD: 73 79 73 2E >874           asc   'sys.questions',00 
00AEB1: 71 75 65 73 74 69 6F 6E 
00AEB9: 73 00 
00AEBB: 75 73 65 72 >875           asc   'users',00 
00AEBF: 73 00 
00AEC1: 76 2E 63 61 >876           asc   'v.catalog',00 
00AEC5: 74 61 6C 6F 67 00 
00AECB: 76 31 2E 31 >877           asc   'v1.1',00  
00AECF: 00 
00AED0: 76 31 2E 32 >878           asc   'v1.2',00  
00AED4: 00 
00AED5: 76 31 2E 33 >879           asc   'v1.3',00  
00AED9: 00 
00AEDA: 76 31 2E 34 >880           asc   'v1.4',00  
00AEDE: 00 
00AEDF: 77 65 6C 63 >881           asc   'welcome.email',00 
00AEE3: 6F 6D 65 2E 65 6D 61 69 
00AEEB: 6C 00 
00AEED: 61 63 6F 73 >882           asc   'acos.time',00 
00AEF1: 2E 74 69 6D 65 00 
00AEF7: 70 72 6F 74 >883           asc   'protocol.down',00 
00AEFB: 6F 63 6F 6C 2E 64 6F 77 
00AF03: 6E 00 
00AF05: 70 72 6F 74 >884           asc   'protocol.up',00 
00AF09: 6F 63 6F 6C 2E 75 70 00 
00AF11: 73 6E 61 70 >885           asc   'snapshot',00 
00AF15: 73 68 6F 74 00 
00AF1A: 78 63 61 74 >886           asc   'xcat',00  
00AF1E: 00 
00AF1F: 78 64 6F 73 >887           asc   'xdos',00  
00AF23: 00 
00AF24: 00          >888           db    00         
                    >889  
                    >890  
00AF25: 67 31 00    >891  list3    asc   'g1',00    
00AF28: 67 31 2E 31 >892           asc   'g1.1',00  
00AF2C: 00 
00AF2D: 67 31 2E 32 >893           asc   'g1.2',00  
00AF31: 00 
00AF32: 00          >894           db    00         
                    >895  
00AF33: 64 31 00    >896  list4    asc   'd1',00    
00AF36: 64 31 2E 31 >897           asc   'd1.1',00  
00AF3A: 00 
00AF3B: 64 31 2E 32 >898           asc   'd1.2',00  
00AF3F: 00 
00AF40: 64 31 2E 33 >899           asc   'd1.3',00  
00AF44: 00 
00AF45: 64 31 2E 34 >900           asc   'd1.4',00  
00AF49: 00 
00AF4A: 00          >901           db    00         
                    >902  
00AF4B: 62 31 00    >903  list5    asc   'b1',00    
00AF4E: 00          >904           db    00         
                    >905  
                    >906  *list6 asc 'mail',00
                    >907  * db 00
                    >908  
                    >909  * files on disk4
                    >910  
00AF4F: 73 75 70 65 >911  list7    asc   'supertac.s',00 
00AF53: 72 74 61 63 2E 73 00 
00AF5A: 73 75 70 65 >912           asc   'supertac.aux.s',00 
00AF5E: 72 74 61 63 2E 61 75 78 
00AF66: 2E 73 00 
00AF69: 73 75 70 65 >913           asc   'supertac.con.s',00 
00AF6D: 72 74 61 63 2E 63 6F 6E 
00AF75: 2E 73 00 
00AF78: 73 75 70 65 >914           asc   'supertac.log.s',00 
00AF7C: 72 74 61 63 2E 6C 6F 67 
00AF84: 2E 73 00 
00AF87: 73 75 70 65 >915           asc   'supertac.sys.s',00 
00AF8B: 72 74 61 63 2E 73 79 73 
00AF93: 2E 73 00 
00AF96: 70 75 72 67 >916           asc   'purge.seg.s',00 
00AF9A: 65 2E 73 65 67 2E 73 00 
00AFA2: 00          >917           db    00         
                    >918  
00AFA3: 70 72 6F 74 >919  list8    asc   'protocol.up',00 
00AFA7: 6F 63 6F 6C 2E 75 70 00 
00AFAF: 70 72 6F 74 >920           asc   'protocol.down',00 
00AFB3: 6F 63 6F 6C 2E 64 6F 77 
00AFBB: 6E 00 
00AFBD: 78 73 68 6F >921           asc   'xshow',00 
00AFC1: 77 00 
00AFC3: 78 63 61 74 >922           asc   'xcat',00  
00AFC7: 00 
00AFC8: 78 64 6F 73 >923           asc   'xdos',00  
00AFCC: 00 
00AFCD: 61 62 6F 75 >924           asc   'about.uploads',00 
00AFD1: 74 2E 75 70 6C 6F 61 64 
00AFD9: 73 00 
00AFDB: 6E 65 77 2E >925           asc   'new.uploads',00 
00AFDF: 75 70 6C 6F 61 64 73 00 
00AFE7: 64 6F 77 6E >926           asc   'downloads',00 
00AFEB: 6C 6F 61 64 73 00 
00AFF1: 76 6F 6C 2E >927           asc   'vol.headers',00 
00AFF5: 68 65 61 64 65 72 73 00 
00AFFD: 74 72 61 6E >928           asc   'translog',00 
00B001: 73 6C 6F 67 00 
00B006: 61 63 63 65 >929           asc   'access',00 
00B00A: 73 73 00 
00B00D: 6D 65 6E 75 >930           asc   'menu.supertac',00 
00B011: 2E 73 75 70 65 72 74 61 
00B019: 63 00 
00B01B: 6D 65 6E 75 >931           asc   'menu.sysop',00 
00B01F: 2E 73 79 73 6F 70 00 
00B026: 6D 65 6E 75 >932           asc   'menu.aux',00 
00B02A: 2E 61 75 78 00 
00B02F: 6D 65 6E 75 >933           asc   'menu.batch',00 
00B033: 2E 62 61 74 63 68 00 
00B03A: 6D 65 6E 75 >934           asc   'menu.con',00 
00B03E: 2E 63 6F 6E 00 
00B043: 6D 65 6E 75 >935           asc   'menu.translog',00 
00B047: 2E 74 72 61 6E 73 6C 6F 
00B04F: 67 00 
00B051: 00          >936           db    00         
                     26            put   pfilter    
                    >1    * Date: 3/11/88
                    >2    *-------------------------------
                    >3    
                    >4    *-------------------------------
                    >5    * profanity filter
                    >6    *-------------------------------
                    >7                              ; change profanity filter (yuk)
00B052: 20 76 89    >8    do_filt  jsr   logprg     ; log to 'acos.obj' drive
00B055: A2 95       >9             ldx   #<gname    
00B057: A9 82       >10            lda   #>gname    ; point to filename
00B059: 20 82 89    >11            jsr   movname    
00B05C: 20 5C 87    >12            jsr   open       ; open file
                    >13   
00B05F: A2 00       >14            ldx   #00        
00B061: AD 05 08    >15            lda   filter     ; point at filter table
00B064: 20 54 88    >16            jsr   setmark    
                    >17   
00B067: A2 00       >18            ldx   #<hdrbuf   
00B069: A9 12       >19            lda   #>hdrbuf   
00B06B: A0 02       >20            ldy   #2         ; read 1 page (2 blocks)
00B06D: 20 EB 87    >21            jsr   rdblk      
00B070: 20 7E 87    >22            jsr   close      ; thats it for now
                    >23   
00B073: 20 84 8E    >24   filt2    jsr   TopBox     
00B076: 20 9E 82    >25            jsr   print      
00B079: 01 03 07    >26            db    1,3,7      
00B07C: 2D 20 45 64 >27            asc   '- Edit Profanity Filter -',00 
00B080: 69 74 20 50 72 6F 66 61 
00B088: 6E 69 74 79 20 46 69 6C 
00B090: 74 65 72 20 2D 00 
00B096: 20 3A 8E    >28            jsr   cls        
                    >29   
00B099: A9 00       >30            lda   #0         ; start at #1
00B09B: 85 02       >31            sta   temp2      
                    >32   
00B09D: A6 02       >33   filt3    ldx   temp2      ; get entry number
00B09F: 20 67 B2    >34            jsr   fndword    ; find the word
00B0A2: B0 2D =B0D1 >35            bcs   filt5      ; opps, end of table
                    >36   
00B0A4: A5 24       >37            lda   ch         ; save current horiz
00B0A6: 48          >38            pha              
                    >39   
00B0A7: A5 02       >40            lda   temp2      ; print entry letter
00B0A9: 18          >41            clc              
00B0AA: 69 41       >42            adc   #'A'       
00B0AC: 20 08 8F    >43            jsr   cout       
00B0AF: E6 02       >44            inc   temp2      ; goto next entry next pass
                    >45   
00B0B1: A9 29       >46            lda   #')'       ; show a border
00B0B3: 20 08 8F    >47            jsr   cout       
00B0B6: E6 24       >48            inc   ch         ; move over 1 space
                    >49   
00B0B8: B9 00 12    >50   filt4    lda   hdrbuf,y   ; get data
00B0BB: 08          >51            php              
00B0BC: 20 08 8F    >52            jsr   cout       ; print data
00B0BF: C8          >53            iny              
00B0C0: 28          >54            plp              
00B0C1: 10 F5 =B0B8 >55            bpl   filt4      ; keep showing
                    >56   
00B0C3: 68          >57            pla              
00B0C4: 18          >58            clc              
00B0C5: 69 13       >59            adc   #19        
00B0C7: 85 24       >60            sta   ch         ; move over horiz position
                    >61   
00B0C9: A9 20       >62            lda   #' '       ; either wrap or move 1 space
00B0CB: 20 08 8F    >63            jsr   cout       
00B0CE: 4C 9D B0    >64            jmp   filt3      
                    >65   
00B0D1: 20 9E 82    >66   filt5    jsr   print      
00B0D4: 01 14 00    >67            db    1,20,0     
00B0D7: 43 6D 64 3A >68            asc   'Cmd: A=Add, D=Delete, Q=Quit ? ',00 
00B0DB: 20 41 3D 41 64 64 2C 20 
00B0E3: 44 3D 44 65 6C 65 74 65 
00B0EB: 2C 20 51 3D 51 75 69 74 
00B0F3: 20 3F 20 00 
                    >69   
00B0F7: A9 01       >70            lda   #1         
00B0F9: 85 0F       >71            sta   maxlen     ; get command
00B0FB: A9 80       >72            lda   #%10000000 
00B0FD: 8D AF 83    >73            sta   inpmode    
00B100: 20 3C 83    >74            jsr   inpln      
                    >75   
00B103: AD 00 02    >76            lda   lnbuf      
00B106: C9 41       >77            cmp   #'A'       
00B108: D0 03 =B10D >78            bne   :tryd      
00B10A: 4C 73 B1    >79            jmp   fl_add     
00B10D: C9 44       >80   :tryd    cmp   #'D'       
00B10F: F0 07 =B118 >81            beq   fl_del     
00B111: C9 51       >82   :tryq    cmp   #'Q'       
00B113: D0 BC =B0D1 >83            bne   filt5      
00B115: 4C 0C B2    >84            jmp   fl_quit    
                    >85   
                    >86   *-------------------------------
                    >87   * delete a word from list
                    >88   
00B118: A2 14       >89   fl_del   ldx   #20        
00B11A: 20 67 8E    >90            jsr   cleos      ; clear line
00B11D: 20 9E 82    >91            jsr   print      
00B120: 01 14 00    >92            db    1,20,0     
00B123: 44 65 6C 65 >93            asc   'Delete [A-',00 
00B127: 74 65 20 5B 41 2D 00 
                    >94   
00B12E: 18          >95            clc              
00B12F: A5 02       >96            lda   temp2      
00B131: 69 40       >97            adc   #'@'       
00B133: 20 08 8F    >98            jsr   cout       ; print range
                    >99   
00B136: 20 9E 82    >100           jsr   print      
00B139: 5D 20 3F 20 >101           asc   '] ? ',00  
00B13D: 00 
                    >102  
00B13E: A9 80       >103           lda   #%10000000 
00B140: 8D AF 83    >104           sta   inpmode    ; set mode
                    >105  
00B143: 20 3C 83    >106           jsr   inpln      ; get data
00B146: AD 00 02    >107           lda   lnbuf      
00B149: C9 41       >108           cmp   #'A'       
00B14B: 90 84 =B0D1 >109           bcc   filt5      ; move back, error
                    >110  
00B14D: 38          >111           sec              
00B14E: E9 41       >112           sbc   #'A'       ; make into [0-xxx] range
00B150: C5 02       >113           cmp   temp2      
00B152: 90 03 =B157 >114           bcc   *+5        
00B154: 4C D1 B0    >115           jmp   filt5      ; out of range
                    >116  
00B157: 48          >117           pha              
00B158: AA          >118           tax              
00B159: E8          >119           inx              
00B15A: 20 67 B2    >120           jsr   fndword    ; locate second word
00B15D: 84 03       >121           sty   temp2+1    ; save offset
00B15F: 68          >122           pla              
00B160: AA          >123           tax              
00B161: 20 67 B2    >124           jsr   fndword    ; locate first word
00B164: A6 03       >125           ldx   temp2+1    ; point to second word
                    >126  
00B166: BD 00 12    >127  fl_del2  lda   hdrbuf,x   ; move data
00B169: 99 00 12    >128           sta   hdrbuf,y   
00B16C: C8          >129           iny              
00B16D: E8          >130           inx              
00B16E: D0 F6 =B166 >131           bne   fl_del2    ; loop
00B170: 4C 73 B0    >132           jmp   filt2      ; show new screen
                    >133  
                    >134                            ; add a word to list
00B173: A2 14       >135  fl_add   ldx   #20        
00B175: 20 67 8E    >136           jsr   cleos      ; clear line
00B178: 20 9E 82    >137           jsr   print      
00B17B: 01 14 00    >138           db    1,20,0     
00B17E: 45 6E 74 65 >139           asc   'Enter new word: ',00 
00B182: 72 20 6E 65 77 20 77 6F 
00B18A: 72 64 3A 20 00 
                    >140  
00B18F: A9 10       >141           lda   #16        ; 16 chars max length
00B191: 85 0F       >142           sta   maxlen     
00B193: A9 80       >143           lda   #%10000000 
00B195: 8D AF 83    >144           sta   inpmode    ; set input mode
                    >145  
00B198: 20 3C 83    >146           jsr   inpln      ; get the data
00B19B: AD 00 02    >147           lda   lnbuf      
00B19E: C9 41       >148           cmp   #'A'       
00B1A0: 90 56 =B1F8 >149           bcc   fl_add4    ; abort
                    >150  
00B1A2: A6 02       >151           ldx   temp2      ; get last word
00B1A4: 20 67 B2    >152           jsr   fndword    ; find end
00B1A7: 84 03       >153           sty   temp2+1    ; save current end
                    >154  
00B1A9: A2 00       >155           ldx   #0         
00B1AB: BD 00 02    >156  fl_add2  lda   lnbuf,x    
00B1AE: C9 41       >157           cmp   #'A'       
00B1B0: 90 49 =B1FB >158           bcc   fl_add3    
                    >159  
00B1B2: 99 00 12    >160           sta   hdrbuf,y   ; add byte
00B1B5: E8          >161           inx              
00B1B6: C8          >162           iny              
00B1B7: D0 F2 =B1AB >163           bne   fl_add2    ; and loop
                    >164  
00B1B9: A9 00       >165           lda   #0         
00B1BB: A4 03       >166           ldy   temp2+1    ; mark old end of table
00B1BD: 99 00 12    >167           sta   hdrbuf,y   
                    >168  
00B1C0: 20 9E 82    >169           jsr   print      
00B1C3: 01 14 00    >170           db    1,20,0     
00B1C6: 45 72 72 6F >171           asc   'Error: Filter Table Overrun.   Press [RETURN] ',00 
00B1CA: 72 3A 20 46 69 6C 74 65 
00B1D2: 72 20 54 61 62 6C 65 20 
00B1DA: 4F 76 65 72 72 75 6E 2E 
00B1E2: 20 20 20 50 72 65 73 73 
00B1EA: 20 5B 52 45 54 55 52 4E 
00B1F2: 5D 20 00 
00B1F5: 20 62 86    >172           jsr   getcr      ; wait for cr
00B1F8: 4C D1 B0    >173  fl_add4  jmp   filt5      ; get new data
                    >174  
00B1FB: A9 00       >175  fl_add3  lda   #0         ; mark end of table
00B1FD: 99 00 12    >176           sta   hdrbuf,y   
00B200: 88          >177           dey              
00B201: B9 00 12    >178           lda   hdrbuf,y   ; mark as last char
00B204: 09 80       >179           ora   #$80       
00B206: 99 00 12    >180           sta   hdrbuf,y   
00B209: 4C 73 B0    >181           jmp   filt2      ; show new table
                    >182  
                    >183                            ; quit from filter changer
00B20C: A2 14       >184  fl_quit  ldx   #20        
00B20E: 20 67 8E    >185           jsr   cleos      ; clear bottom of screen
00B211: 20 9E 82    >186           jsr   print      
00B214: 01 14 00    >187           db    1,20,0     
00B217: 49 73 20 74 >188           asc   'Is the above table correct [Y/N] ? ',00 
00B21B: 68 65 20 61 62 6F 76 65 
00B223: 20 74 61 62 6C 65 20 63 
00B22B: 6F 72 72 65 63 74 20 5B 
00B233: 59 2F 4E 5D 20 3F 20 00 
00B23B: 20 10 84    >189           jsr   inpyn      
00B23E: 90 03 =B243 >190           bcc   fl_save    
00B240: 4C 0F 81    >191           jmp   start      ; nope!
                    >192  
00B243: 20 76 89    >193  fl_save  jsr   logprg     ; log to 'acos.obj' drive
00B246: A2 95       >194           ldx   #<gname    
00B248: A9 82       >195           lda   #>gname    ; setup name buffer
00B24A: 20 82 89    >196           jsr   movname    
00B24D: 20 5C 87    >197           jsr   open       ; open file
                    >198  
00B250: A2 00       >199           ldx   #00        
00B252: AD 05 08    >200           lda   filter     ; position to filter table
00B255: 20 54 88    >201           jsr   setmark    
                    >202  
00B258: A2 00       >203           ldx   #<hdrbuf   
00B25A: A9 12       >204           lda   #>hdrbuf   
00B25C: A0 02       >205           ldy   #2         ; write 1 page (2 blocks)
00B25E: 20 E1 87    >206           jsr   wrblk      
00B261: 20 7E 87    >207           jsr   close      ; thats it for now
00B264: 4C 0F 81    >208           jmp   start      
                    >209  
                    >210  
                    >211                            ; locate a word [indexed by x]
00B267: A0 00       >212  fndword  ldy   #0         
00B269: E0 00       >213           cpx   #0         ; we done?
00B26B: F0 0C =B279 >214           beq   fndwd2     ; yep
                    >215  
00B26D: B9 00 12    >216  fndwd1   lda   hdrbuf,y   ; loop until next word
00B270: F0 0E =B280 >217           beq   fndwd4     ; end of table
                    >218  
00B272: C8          >219           iny              ; goto next byte
00B273: 0A          >220           asl   a          ; check high bit
00B274: 90 F7 =B26D >221           bcc   fndwd1     
                    >222  
00B276: CA          >223           dex              ; count down entries
00B277: D0 F4 =B26D >224           bne   fndwd1     
                    >225  
00B279: B9 00 12    >226  fndwd2   lda   hdrbuf,y   
00B27C: F0 02 =B280 >227           beq   fndwd4     ; opps, that is end marker
                    >228  
00B27E: 18          >229  fndwd3   clc              
00B27F: 60          >230           rts              ; we are done
                    >231  
00B280: 38          >232  fndwd4   sec              ; opps, end of table
00B281: 60          >233           rts              
                    >234  
                    >235  *-------------------------------
                    >236  * Quit
                    >237  *-------------------------------
                    >238  
                    >239                            ; quit the program
00B282: 20 58 FC    >240  do_quit  jsr   $fc58      ; clear screen
00B285: 8D 51 C0    >241           sta   $c051      ; goto text mode
                    >242  
00B288: A9 FF       >243           lda   #$ff       ; reset inverse flag
00B28A: 85 32       >244           sta   $32        
                    >245  
                    >246  
00B28C: 20 00 BF    >247           jsr   mli        
00B28F: 65          >248           db    $65        ; quit
00B290: 93 B2       >249           dw    p_quit     
00B292: 60          >250           rts              
                    >251  
                    >252  
00B293: 04          >253  p_quit   db    4          
00B294: 00          >254           db    0          
00B295: 00 00       >255           dw    0          
00B297: 00          >256           db    0          
00B298: 00 00       >257           dw    0          
                     27            put   pstor      
                    >1    ********************************
                    >2    *                              *
                    >3    * GBBS Config - Prodos Storage *
                    >4    *                              *
                    >5    ********************************
                    >6    
                    >7    *-------------------------------
                    >8    * Date: 3/11/88
                    >9    *-------------------------------
                    >10   
00B29A: 20 3A 8E    >11   re_stor  jsr   cls        ; clear screen
                    >12   
00B29D: A9 00       >13            lda   #<hdrbuf   
00B29F: 85 00       >14            sta   temp       
00B2A1: A9 12       >15            lda   #>hdrbuf   
00B2A3: 85 01       >16            sta   temp+1     
                    >17   
00B2A5: A2 00       >18            ldx   #0         ; start pointers
00B2A7: A0 00       >19            ldy   #0         
00B2A9: 84 02       >20            sty   temp2      ; set device count at zero
00B2AB: BD 15 08    >21   stor2    lda   devnam,x   ; get drive info
00B2AE: 85 03       >22            sta   temp2+1    
                    >23   
00B2B0: BD 15 08    >24   stor3    lda   devnam,x   ; copy pathname
00B2B3: 91 00       >25            sta   (temp),y   
00B2B5: E8          >26            inx              
00B2B6: C8          >27            iny              
00B2B7: C6 03       >28            dec   temp2+1    
00B2B9: 10 F5 =B2B0 >29            bpl   stor3      
                    >30   
00B2BB: 18          >31            clc              
00B2BC: A5 00       >32            lda   temp       ; go to next address
00B2BE: 69 80       >33            adc   #128       
00B2C0: 85 00       >34            sta   temp       
00B2C2: A5 01       >35            lda   temp+1     
00B2C4: 69 00       >36            adc   #0         
00B2C6: 85 01       >37            sta   temp+1     
                    >38   
00B2C8: A0 00       >39            ldy   #0         
00B2CA: E6 02       >40            inc   temp2      ; inc number of pathnames
00B2CC: A5 02       >41            lda   temp2      
00B2CE: C9 0C       >42            cmp   #12        ; done all 12?
00B2D0: D0 D9 =B2AB >43            bne   stor2      ; nope
                    >44   
00B2D2: 20 84 8E    >45   stor4    jsr   TopBox     
00B2D5: 20 9E 82    >46            jsr   print      
00B2D8: 01 03 02    >47            db    1,3,2      
00B2DB: 2D 20 45 64 >48            asc   '- Edit Drive Specifier Allocation -',00 
00B2DF: 69 74 20 44 72 69 76 65 
00B2E7: 20 53 70 65 63 69 66 69 
00B2EF: 65 72 20 41 6C 6C 6F 63 
00B2F7: 61 74 69 6F 6E 20 2D 00 
00B2FF: 20 3A 8E    >49            jsr   cls        
                    >50   
00B302: A2 FF       >51            ldx   #-1        
00B304: E8          >52   stor5    inx              
00B305: 20 00 B5    >53            jsr   shwpfx     ; show drive
00B308: A9 0D       >54            lda   #cr        ; add end of line
00B30A: 20 08 8F    >55            jsr   cout       
00B30D: E0 0B       >56            cpx   #11        
00B30F: 90 F3 =B304 >57            bcc   stor5      ; show all 12 entries
                    >58   
00B311: 20 9E 82    >59   stor6    jsr   print      
00B314: 01 14 00    >60            db    1,20,0     
00B317: 45 64 69 74 >61            asc   'Edit: [A-L] or Q=Quit ? ',00 
00B31B: 3A 20 5B 41 2D 4C 5D 20 
00B323: 6F 72 20 51 3D 51 75 69 
00B32B: 74 20 3F 20 00 
                    >62   
00B330: A9 80       >63            lda   #%10000000 
00B332: 8D AF 83    >64            sta   inpmode    ; set mode 0
00B335: A9 01       >65            lda   #1         
00B337: 85 0F       >66            sta   maxlen     ; set length to 1
                    >67   
00B339: 20 3C 83    >68            jsr   inpln      ; get input
00B33C: AD 00 02    >69            lda   lnbuf      
00B33F: C9 51       >70            cmp   #'Q'       ; quit?
00B341: D0 03 =B346 >71            bne   stor7      ; yep
                    >72   
00B343: 4C E3 B3    >73            jmp   stor9      ; handle quit
                    >74   
00B346: 38          >75   stor7    sec              
00B347: E9 41       >76            sbc   #'A'       ; make into range
00B349: C9 0C       >77            cmp   #12        ; is it ok?
00B34B: B0 C4 =B311 >78            bcs   stor6      ; nope
                    >79   
00B34D: 48          >80            pha              
00B34E: AA          >81            tax              
00B34F: 20 F2 B4    >82            jsr   finddrv    ; find the drive location
                    >83   
00B352: A2 14       >84            ldx   #20        
00B354: 20 67 8E    >85            jsr   cleos      ; claer last line
                    >86   
00B357: A2 14       >87            ldx   #20        ; position
00B359: 86 25       >88            stx   cv         
00B35B: A2 00       >89            ldx   #0         
00B35D: 86 24       >90            stx   ch         
                    >91   
00B35F: 68          >92            pla              
00B360: 18          >93            clc              
00B361: 69 41       >94            adc   #'A'       ; show drive specifier
00B363: 20 08 8F    >95            jsr   cout       
00B366: 20 9E 82    >96            jsr   print      
00B369: 3A 20 2F 00 >97            asc   ': /',00   
                    >98   
00B36D: A9 1E       >99            lda   #30        ; make max length 32 total
00B36F: 85 0F       >100           sta   maxlen     
00B371: A9 A1       >101           lda   #%10100001 
00B373: 8D AF 83    >102           sta   inpmode    
                    >103  
00B376: 20 3C 83    >104           jsr   inpln      
00B379: B9 FF 01    >105           lda   lnbuf-1,y  
00B37C: C9 2F       >106           cmp   #'/'       ; check for ending slash
00B37E: D0 05 =B385 >107           bne   stor7f     
                    >108  
00B380: A9 0D       >109           lda   #cr        ; delete ending slash
00B382: 99 FF 01    >110           sta   lnbuf-1,y  
                    >111  
00B385: AD 00 02    >112  stor7f   lda   lnbuf      ; did they just do a return?
00B388: C9 0D       >113           cmp   #cr        
00B38A: D0 38 =B3C4 >114           bne   stor8      ;nope
                    >115  
00B38C: 20 9E 82    >116           jsr   print      
00B38F: 01 14 00    >117           db    1,20,0     
00B392: 43 6C 65 61 >118           asc   'Clear contents of this line [Y/N] ? ',00 
00B396: 72 20 63 6F 6E 74 65 6E 
00B39E: 74 73 20 6F 66 20 74 68 
00B3A6: 69 73 20 6C 69 6E 65 20 
00B3AE: 5B 59 2F 4E 5D 20 3F 20 
00B3B6: 00 
                    >119  
00B3B7: 20 10 84    >120           jsr   inpyn      ; get answer
00B3BA: B0 05 =B3C1 >121           bcs   stor7a     ; nope
                    >122  
00B3BC: A0 00       >123           ldy   #0         
00B3BE: 98          >124           tya              ; nullify an entry
00B3BF: 91 06       >125           sta   (temp4),y  
00B3C1: 4C D2 B2    >126  stor7a   jmp   stor4      ; do another
                    >127  
00B3C4: A2 00       >128  stor8    ldx   #0         
00B3C6: A0 02       >129           ldy   #2         
00B3C8: BD 00 02    >130  stor8a   lda   lnbuf,x    ; copy pathname
00B3CB: 91 06       >131           sta   (temp4),y  
00B3CD: E8          >132           inx              
00B3CE: C8          >133           iny              
00B3CF: C9 0D       >134           cmp   #cr        
00B3D1: D0 F5 =B3C8 >135           bne   stor8a     
                    >136  
00B3D3: A0 00       >137           ldy   #0         ; save length
00B3D5: 8A          >138           txa              
00B3D6: 91 06       >139           sta   (temp4),y  
00B3D8: C8          >140           iny              
00B3D9: A9 2F       >141           lda   #'/'       ; add leading slash
00B3DB: 91 06       >142           sta   (temp4),y  
00B3DD: 4C D2 B2    >143           jmp   stor4      ; show results
                    >144  
                    >145  
00B3E0: 4C 0F 81    >146  stor9a   jmp   start      ; abort out
                    >147  
00B3E3: A2 14       >148  stor9    ldx   #20        
00B3E5: 20 67 8E    >149           jsr   cleos      ; clear bottom
00B3E8: 20 9E 82    >150           jsr   print      
00B3EB: 01 14 00    >151           db    1,20,0     
00B3EE: 53 61 76 65 >152           asc   'Save the above configuration [Y/N] ? ',00 
00B3F2: 20 74 68 65 20 61 62 6F 
00B3FA: 76 65 20 63 6F 6E 66 69 
00B402: 67 75 72 61 74 69 6F 6E 
00B40A: 20 5B 59 2F 4E 5D 20 3F 
00B412: 20 00 
00B414: 20 10 84    >153           jsr   inpyn      
00B417: B0 C7 =B3E0 >154           bcs   stor9a     ; nope
                    >155  
00B419: A9 00       >156           lda   #<hdrbuf   
00B41B: 85 00       >157           sta   temp       ; point at pathnames
00B41D: A9 12       >158           lda   #>hdrbuf   
00B41F: 85 01       >159           sta   temp+1     
                    >160  
00B421: A2 00       >161           ldx   #0         
00B423: A0 00       >162           ldy   #0         
00B425: 84 02       >163           sty   temp2      ; start with drive A:
00B427: B1 00       >164  stor9b   lda   (temp),y   
00B429: 85 03       >165           sta   temp2+1    ; save length
                    >166  
00B42B: B1 00       >167  stor9c   lda   (temp),y   ; get data
00B42D: 9D 15 08    >168           sta   devnam,x   
00B430: E8          >169           inx              
00B431: E0 F0       >170           cpx   #$f0       ; is table ok?
00B433: F0 1F =B454 >171           beq   stor9d     ; nope, it is too big
                    >172  
00B435: C8          >173           iny              
00B436: C6 03       >174           dec   temp2+1    ; count down length
00B438: 10 F1 =B42B >175           bpl   stor9c     
                    >176  
00B43A: 18          >177           clc              
00B43B: A5 00       >178           lda   temp       
00B43D: 69 80       >179           adc   #$80       ; go to next field
00B43F: 85 00       >180           sta   temp       
00B441: A5 01       >181           lda   temp+1     
00B443: 69 00       >182           adc   #0         
00B445: 85 01       >183           sta   temp+1     
                    >184  
00B447: A0 00       >185           ldy   #0         ; reset pointer within field
00B449: E6 02       >186           inc   temp2      
00B44B: A5 02       >187           lda   temp2      ; done all 12 yet?
00B44D: C9 0C       >188           cmp   #12        
00B44F: D0 D6 =B427 >189           bne   stor9b     ; nope, loop
00B451: 4C C7 86    >190           jmp   wrtchg     ; write changes to disk
                    >191  
00B454: 20 3A 8E    >192  stor9d   jsr   cls        
00B457: 20 9E 82    >193           jsr   print      
00B45A: 45 52 52 4F >194           asc   'ERROR !',0d,0d 
00B45E: 52 20 21 0D 0D 
00B463: 4F 76 65 72 >195           asc   'Overflow error. Too much data within ' 
00B467: 66 6C 6F 77 20 65 72 72 
00B46F: 6F 72 2E 20 54 6F 6F 20 
00B477: 6D 75 63 68 20 64 61 74 
00B47F: 61 20 77 69 74 68 69 6E 
00B487: 20 
00B488: 64 72 69 76 >196           asc   'drive table. Cut down on the amount',0d,0d 
00B48C: 65 20 74 61 62 6C 65 2E 
00B494: 20 43 75 74 20 64 6F 77 
00B49C: 6E 20 6F 6E 20 74 68 65 
00B4A4: 20 61 6D 6F 75 6E 74 0D 
00B4AC: 0D 
00B4AD: 6F 66 20 64 >197           asc   'of data within the table.' 
00B4B1: 61 74 61 20 77 69 74 68 
00B4B9: 69 6E 20 74 68 65 20 74 
00B4C1: 61 62 6C 65 2E 
00B4C6: 01 14 00    >198           db    1,20,0     
00B4C9: 50 72 65 73 >199           asc   'Press [RETURN] to continue... ',00 
00B4CD: 73 20 5B 52 45 54 55 52 
00B4D5: 4E 5D 20 74 6F 20 63 6F 
00B4DD: 6E 74 69 6E 75 65 2E 2E 
00B4E5: 2E 20 00 
                    >200  
00B4E8: 20 E2 82    >201  stor9e   jsr   rdkey      ; wait for a return
00B4EB: C9 0D       >202           cmp   #cr        
00B4ED: D0 F9 =B4E8 >203           bne   stor9e     
00B4EF: 4C D2 B2    >204           jmp   stor4      ; get new stuff
                    >205  
                    >206  
                    >207                            ; point to the pathname of a device
00B4F2: A9 00       >208  finddrv  lda   #0         ; set lower to 0
00B4F4: 85 06       >209           sta   temp4      
00B4F6: 8A          >210           txa              
00B4F7: 4A          >211           lsr   a          
00B4F8: 66 06       >212           ror   temp4      ; put extra into low
00B4FA: 18          >213           clc              
00B4FB: 69 12       >214           adc   #>hdrbuf   
00B4FD: 85 07       >215           sta   temp4+1    ; setup high
00B4FF: 60          >216           rts              
                    >217  
                    >218                            ; show a pathname of a device
00B500: 20 F2 B4    >219  shwpfx   jsr   finddrv    ; position
00B503: 8A          >220           txa              
00B504: 18          >221           clc              
00B505: 69 41       >222           adc   #'A'       ; show drive name
00B507: 20 08 8F    >223           jsr   cout       
                    >224  
00B50A: A9 3A       >225           lda   #':'       ; add colon
00B50C: 20 08 8F    >226           jsr   cout       
                    >227  
00B50F: A9 20       >228           lda   #' '       ; put in space
00B511: 20 08 8F    >229           jsr   cout       
                    >230  
00B514: A0 00       >231           ldy   #0         ; check for data
00B516: B1 06       >232           lda   (temp4),y  
00B518: 85 03       >233           sta   temp2+1    
00B51A: F0 0F =B52B >234           beq   prdrv3     ; nope, there isnt any
                    >235  
00B51C: C8          >236  prdrv2   iny              
00B51D: B1 06       >237           lda   (temp4),y  ; get byte of name
00B51F: 20 3A 84    >238           jsr   conv       
00B522: 20 08 8F    >239           jsr   cout       ; show it
00B525: C6 03       >240           dec   temp2+1    
00B527: D0 F3 =B51C >241           bne   prdrv2     ; keep going
                    >242  
00B529: 18          >243           clc              
00B52A: 60          >244           rts              
                    >245  
00B52B: 38          >246  prdrv3   sec              ; no data
00B52C: 60          >247           rts              
                     28   * put boardedit
                     29   * put user
                     30   * put userpurge


End Merlin-16 assembly, 13613 bytes, 0 errors, 4613 lines, 464 symbols.

Elapsed time = 14 seconds.

Symbol table, alphabetical order:

   LineAddress=$8F4F                       TopBox  =$8E84   
   VideoStartup=$8E2C                      access  =$AB67      ansbuf  =$1830
   ansstr  =$11C0   X  apl1200 =$8010      atastr  =$9787      base    =$0D
   begin   =$8000      bin8    =$8526      bin8a   =$852F      bindec8 =$8524
   bltnname=$8D52      bs      =$08        bufadr  =$877B      can     =$18
   caseflg =$833B   X  cat103  =$8001   X  cat212  =$8002      cdbyte  =$11BF
   cdtype  =$1FFD      ch      =$24        chinit  =$86D0      chinit2 =$86D7
   chkspc  =$8AAB      chkspc2 =$8AC7      cleol2  =$8E73      cleos   =$8E67
   clkdrv  =$0D00      close   =$877E      cls     =$8E3A      clslup2 =$8E3E
   confbuf =$0800      conpfx  =$8DA0      conv    =$843A      conv2   =$8446
   coppath =$8B8D      copy    =$89C9      copy2   =$89CD      copyans =$972F
   copybuf =$6000      copyin2 =$8451      copyin3 =$8463      copyin4 =$846E
   copyinit=$973C      copyinp =$8447      copymax =$5800      copyrts =$89C6
   cout    =$8F08      cout2   =$8F28      cout3   =$8F2C      cout4   =$8F36
   cout5   =$8F3C      cr      =$0D        create  =$8752      curvol  =$A751
   cv      =$25        datadef =$ABF5   X  datalink24=$8017    decmem  =$8596
   decmem2 =$85AD      decmem3 =$85CE      decmem4 =$85DA      decmem5 =$85E9
   decmem6 =$85EB      decmem7 =$8604      del     =$7F        devnam  =$0815
   devtable=$974F      dirname =$8D1D      disk1   =$AD21      disk2   =$AD2E
   disk3   =$AD3D      disk4   =$AD48      dnldname=$8D40      doEdge  =$8EB1
   doILine =$8ECA      do_filt =$B052      do_main =$8238      do_quit =$B282
   doinit  =$9DB6      dosbyt  =$68        drive   =$AB6F      dstpfx  =$8DC8
   dtanam1 =$AB70      einit0  =$A0DE      einit1  =$A0E1      einit2  =$A0EB
   einit3  =$A0F5   X  epic    =$8016      esc     =$1B        escadr  =$8650
   escape  =$8618      escape2 =$862E      escape3 =$862F      escape4 =$864E
   escape5 =$864F      fbuf1   =$1C00      fbuf2   =$1C00      filt2   =$B073
   filt3   =$B09D      filt4   =$B0B8      filt5   =$B0D1      filter  =$0805
   findc2  =$8AA8      findcon =$8A77      finddrv =$B4F2      fl_add  =$B173
   fl_add2 =$B1AB      fl_add3 =$B1FB      fl_add4 =$B1F8      fl_del  =$B118
   fl_del2 =$B166      fl_quit =$B20C      fl_save =$B243      flname  =$0300
   fnam1   =$1E00      fndwd1  =$B26D      fndwd2  =$B279      fndwd4  =$B280
   fndword =$B267   X  generic =$8015      getans  =$93D3      getcr   =$8662
   getdcd  =$9477      geteof  =$883E      getg    =$868E      getg2   =$86B7
   getg3   =$86C6      getinfo =$8A24      getinit =$919B      getinit1=$9317
   getmrk2 =$888E      getnam2 =$8508      getnam3 =$8523      getname =$8501
   getslot =$9506      gettmp  =$82D7      gettmp2 =$82E1      gfilename=$8D38
   gname   =$8295      gname2  =$AB5E   X  grappler=$8029   X  gs1hst  =$8007
X  gs2hst  =$8008   X  gsclock =$801D   X  gsport1 =$8005   X  gsport2 =$8006
   hard2   =$A539   X  hayes1200=$8011  X  hayes2400=$8012  X  hayes9600=$8013
   hdrbuf  =$1200   X  iicsys  =$8020      init    =$828E      init1d  =$9E59
   init2   =$9E67      init2a  =$9EFB      init3   =$9F36      init3a  =$9FC0
   init4   =$A0D9      initbuf =$1800      initstr =$11D0      inpln   =$833C
   inpln1  =$833E      inpln2  =$8351      inpln3  =$8361      inpln4  =$836C
   inpln4a =$8374      inpln5  =$8385      inpln6  =$838F      inpln7  =$83A2
   inpln8  =$83AE      inpmode =$83AF      inpnum  =$83B0      inpnum2 =$83C0
   inpnum3 =$83DD      inpnum4 =$83E6      inpnum5 =$83E8      inpnum7 =$83F3
   inpnum8 =$83FF      inpyn   =$8410      inpyn2  =$841D      inpyn3  =$8439
   inverse =$10        jumptable=$8228     ldacos  =$8717      ldcon2  =$8965
   ldconfg =$88D3      lf      =$0A        list1   =$AD53      list1a  =$AD68
   list2   =$ADCB      list3   =$AF25      list4   =$AF33      list5   =$AF4B
   list7   =$AF4F      list8   =$AFA3      lnbuf   =$0200      loadg   =$810C
   logcon  =$8968      logdst  =$896F      logprg  =$8976      logspc2 =$899E
   logspc3 =$89A8      logspc4 =$89AF      mailname=$8D5D      make1   =$A753
   make1a  =$A7D2      make2   =$A851      make3   =$A8EF      make4   =$A95E
   make5   =$A9CE      make7   =$AA3C      make8   =$AAB5      makebase=$8ED7
   makebltn=$8C52      makednload=$8C0C    makegbbs=$8CFD      makegfile=$8BE9
   makemail=$8C75      makesegs=$8BA3      makestac=$8CBB      makesvol=$8CD4
   makesys =$8BC6      maketemp=$8C98      makeupload=$8C2F    maxlen  =$0F
   maxnum  =$8400      mdmdrv  =$0E00      mli     =$BF00   X  mm2     =$8003
   modemtype=$1FFE  X  mountain=$8021      movepage=$96E1      movnam2 =$8988
   movname =$8982      msgbuf  =$1C00      msgref  =$8991   X  multispd=$800C
X  nocar   =$800D   X  noslot  =$8024      noxfer  =$A667   X  nullclk =$8023
X  nullmdm =$8000   X  nullprint=$8027     num     =$860B      numin2  =$854D
   numin3  =$856A      numin4  =$858F      numptr  =$1A        open    =$875C
   open2   =$8774      out8a   =$853D      p_byte  =$88A6      p_close =$889C
   p_creat =$88C7      p_crpth =$8E20      p_del   =$88C4      p_geof  =$8D78
   p_ginfo =$8D7D      p_mark  =$88A7      p_new0  =$88AC      p_new1  =$88B0
   p_onlin =$8E18      p_onln  =$8E1C      p_open  =$8896      p_pfx   =$8D94
   p_pfx2  =$8D97      p_pfx3  =$8D9A      p_pfx4  =$8D9D      p_quit  =$B293
   p_rbyt  =$889E      p_rdblk =$88BC      p_rdln  =$88B4      p_ren   =$8D8F
   p_spfx  =$8D75      page1   =$C054   X  parallel=$802A      part    =$66
   plotchr =$8EE7      plotchr1=$8F03      point0  =$11        point1  =$14
   point3  =$FD        pr3a    =$82C6      prbs    =$8401      prdrv   =$0C00
   prdrv2  =$B51C      prdrv3  =$B52B      prgname =$8D27      prgpfx  =$8DF0
   print   =$829E      print2  =$82A8      print3  =$82AE      prn     =$16
   prnt    =$1E     X  pro2400 =$8014   X  prodos  =$8022      prstr   =$84A2
   prstr2  =$84AF      prstr3  =$84C2      prstr4  =$84CC      psave   =$1C
   rdblk   =$87EB      rdbyte  =$87C8      rdbyte2 =$87DD      rdkey   =$82E2
   rdkey2  =$82EB      rdkey3  =$8304      rdkey4  =$830A      rdkey5  =$8310
   rdkey6  =$8316      rdkey7  =$8326      rdline2 =$87C1      re_clk  =$9925
   re_mdm  =$8F7F      re_mdm0 =$8F95      re_mdmx =$8F8E      re_pr   =$9BAD
   re_stor =$B29A      re_vid  =$978C      refnum  =$8751      ren2    =$8A64
   reset   =$03F2      rwblk   =$87F2      rwtype  =$880F   X  serial  =$8028
X  serialpro=$801E     serialtype=$1FFF    setbltn =$8C6B      setdnload=$8C25
   seteof  =$8A4E      setgbbs =$8D13      setgfile=$8C02      setinfo =$8A36
   setmail =$8C8E      setmark =$8854      setpos  =$8856      setpos2 =$8865
   setpos3 =$8877      setprg  =$8BBC      setspec =$8AEC      setstac =$8CEA
   setsys  =$8BDF      settemp =$8CB1      setupload=$8C48     setxfer =$A538
   shwpfx  =$B500   X  singlespd=$800B     skstr2  =$84E3      skstr3  =$84F3
   skstr4  =$84F7      slot    =$AB6E   X  ssc     =$8004      stacacc =$AD06
   stacname=$8D69      start   =$810F      stor2   =$B2AB      stor3   =$B2B0
   stor4   =$B2D2      stor5   =$B304      stor6   =$B311      stor7   =$B346
   stor7a  =$B3C1      stor7f  =$B385      stor8   =$B3C4      stor8a  =$B3C8
   stor9   =$B3E3      stor9a  =$B3E0      stor9b  =$B427      stor9c  =$B42B
   stor9d  =$B454      stor9e  =$B4E8      strtable=$9769      svacos  =$8734
   svolname=$8D6F      sysname =$8D30      temp    =$00        temp2   =$02
   temp3   =$04        temp4   =$06        tempname=$8D63   X  thunder =$801F
   txtnum  =$8612      ucopyin2=$847D      ucopyin3=$8492      ucopyin4=$849D
   ucopyinp=$8473   X  ultra   =$8026   X  ultra1  =$8009   X  ultra2  =$800A
X  ultra9600=$8018     upldname=$8D4A      user    =$AB76   X  usr2400 =$800E
X  usr9600 =$800F      usrname =$828F      usrpass =$ABBC      usrtele =$ABC4
   verify  =$86FF      verify_p=$8714   X  versa   =$8025   X  vid40   =$8019
X  vid40pl =$801B   X  vid80   =$801A      viddrv  =$0900   X  videx   =$801C
   volumes =$A752      wrblk   =$87E1      wrbyte  =$8813      wrbyte2 =$8828
   wrbyte3 =$8829      wrtchg  =$86C7      x_save  =$09        xdata   =$AC94
   y_save  =$0A     

Symbol table, numerical order:

   temp    =$00        temp2   =$02        temp3   =$04        temp4   =$06
   bs      =$08        x_save  =$09        lf      =$0A        y_save  =$0A
   base    =$0D        cr      =$0D        maxlen  =$0F        inverse =$10
   point0  =$11        point1  =$14        prn     =$16        can     =$18
   numptr  =$1A        esc     =$1B        psave   =$1C        prnt    =$1E
   ch      =$24        cv      =$25        part    =$66        dosbyt  =$68
   del     =$7F        point3  =$FD        lnbuf   =$0200      flname  =$0300
   reset   =$03F2      confbuf =$0800      filter  =$0805      devnam  =$0815
   viddrv  =$0900      prdrv   =$0C00      clkdrv  =$0D00      mdmdrv  =$0E00
   cdbyte  =$11BF      ansstr  =$11C0      initstr =$11D0      hdrbuf  =$1200
   initbuf =$1800      ansbuf  =$1830      msgbuf  =$1C00      fbuf1   =$1C00
   fbuf2   =$1C00      fnam1   =$1E00      cdtype  =$1FFD      modemtype=$1FFE
   serialtype=$1FFF    copymax =$5800      copybuf =$6000   X  nullmdm =$8000
   begin   =$8000   X  cat103  =$8001   X  cat212  =$8002   X  mm2     =$8003
X  ssc     =$8004   X  gsport1 =$8005   X  gsport2 =$8006   X  gs1hst  =$8007
X  gs2hst  =$8008   X  ultra1  =$8009   X  ultra2  =$800A   X  singlespd=$800B
X  multispd=$800C   X  nocar   =$800D   X  usr2400 =$800E   X  usr9600 =$800F
X  apl1200 =$8010   X  hayes1200=$8011  X  hayes2400=$8012  X  hayes9600=$8013
X  pro2400 =$8014   X  generic =$8015   X  epic    =$8016   X  datalink24=$8017
X  ultra9600=$8018  X  vid40   =$8019   X  vid80   =$801A   X  vid40pl =$801B
X  videx   =$801C   X  gsclock =$801D   X  serialpro=$801E  X  thunder =$801F
X  iicsys  =$8020   X  mountain=$8021   X  prodos  =$8022   X  nullclk =$8023
X  noslot  =$8024   X  versa   =$8025   X  ultra   =$8026   X  nullprint=$8027
X  serial  =$8028   X  grappler=$8029   X  parallel=$802A      loadg   =$810C
   start   =$810F      jumptable=$8228     do_main =$8238      init    =$828E
   usrname =$828F      gname   =$8295      print   =$829E      print2  =$82A8
   print3  =$82AE      pr3a    =$82C6      gettmp  =$82D7      gettmp2 =$82E1
   rdkey   =$82E2      rdkey2  =$82EB      rdkey3  =$8304      rdkey4  =$830A
   rdkey5  =$8310      rdkey6  =$8316      rdkey7  =$8326      caseflg =$833B
   inpln   =$833C      inpln1  =$833E      inpln2  =$8351      inpln3  =$8361
   inpln4  =$836C      inpln4a =$8374      inpln5  =$8385      inpln6  =$838F
   inpln7  =$83A2      inpln8  =$83AE      inpmode =$83AF      inpnum  =$83B0
   inpnum2 =$83C0      inpnum3 =$83DD      inpnum4 =$83E6      inpnum5 =$83E8
   inpnum7 =$83F3      inpnum8 =$83FF      maxnum  =$8400      prbs    =$8401
   inpyn   =$8410      inpyn2  =$841D      inpyn3  =$8439      conv    =$843A
   conv2   =$8446      copyinp =$8447      copyin2 =$8451      copyin3 =$8463
   copyin4 =$846E      ucopyinp=$8473      ucopyin2=$847D      ucopyin3=$8492
   ucopyin4=$849D      prstr   =$84A2      prstr2  =$84AF      prstr3  =$84C2
   prstr4  =$84CC      skstr2  =$84E3      skstr3  =$84F3      skstr4  =$84F7
   getname =$8501      getnam2 =$8508      getnam3 =$8523      bindec8 =$8524
   bin8    =$8526      bin8a   =$852F      out8a   =$853D      numin2  =$854D
   numin3  =$856A      numin4  =$858F      decmem  =$8596      decmem2 =$85AD
   decmem3 =$85CE      decmem4 =$85DA      decmem5 =$85E9      decmem6 =$85EB
   decmem7 =$8604      num     =$860B      txtnum  =$8612      escape  =$8618
   escape2 =$862E      escape3 =$862F      escape4 =$864E      escape5 =$864F
   escadr  =$8650      getcr   =$8662      getg    =$868E      getg2   =$86B7
   getg3   =$86C6      wrtchg  =$86C7      chinit  =$86D0      chinit2 =$86D7
   verify  =$86FF      verify_p=$8714      ldacos  =$8717      svacos  =$8734
   refnum  =$8751      create  =$8752      open    =$875C      open2   =$8774
   bufadr  =$877B      close   =$877E      rdline2 =$87C1      rdbyte  =$87C8
   rdbyte2 =$87DD      wrblk   =$87E1      rdblk   =$87EB      rwblk   =$87F2
   rwtype  =$880F      wrbyte  =$8813      wrbyte2 =$8828      wrbyte3 =$8829
   geteof  =$883E      setmark =$8854      setpos  =$8856      setpos2 =$8865
   setpos3 =$8877      getmrk2 =$888E      p_open  =$8896      p_close =$889C
   p_rbyt  =$889E      p_byte  =$88A6      p_mark  =$88A7      p_new0  =$88AC
   p_new1  =$88B0      p_rdln  =$88B4      p_rdblk =$88BC      p_del   =$88C4
   p_creat =$88C7      ldconfg =$88D3      ldcon2  =$8965      logcon  =$8968
   logdst  =$896F      logprg  =$8976      movname =$8982      movnam2 =$8988
   msgref  =$8991      logspc2 =$899E      logspc3 =$89A8      logspc4 =$89AF
   copyrts =$89C6      copy    =$89C9      copy2   =$89CD      getinfo =$8A24
   setinfo =$8A36      seteof  =$8A4E      ren2    =$8A64      findcon =$8A77
   findc2  =$8AA8      chkspc  =$8AAB      chkspc2 =$8AC7      setspec =$8AEC
   coppath =$8B8D      makesegs=$8BA3      setprg  =$8BBC      makesys =$8BC6
   setsys  =$8BDF      makegfile=$8BE9     setgfile=$8C02      makednload=$8C0C
   setdnload=$8C25     makeupload=$8C2F    setupload=$8C48     makebltn=$8C52
   setbltn =$8C6B      makemail=$8C75      setmail =$8C8E      maketemp=$8C98
   settemp =$8CB1      makestac=$8CBB      makesvol=$8CD4      setstac =$8CEA
   makegbbs=$8CFD      setgbbs =$8D13      dirname =$8D1D      prgname =$8D27
   sysname =$8D30      gfilename=$8D38     dnldname=$8D40      upldname=$8D4A
   bltnname=$8D52      mailname=$8D5D      tempname=$8D63      stacname=$8D69
   svolname=$8D6F      p_spfx  =$8D75      p_geof  =$8D78      p_ginfo =$8D7D
   p_ren   =$8D8F      p_pfx   =$8D94      p_pfx2  =$8D97      p_pfx3  =$8D9A
   p_pfx4  =$8D9D      conpfx  =$8DA0      dstpfx  =$8DC8      prgpfx  =$8DF0
   p_onlin =$8E18      p_onln  =$8E1C      p_crpth =$8E20   
   VideoStartup=$8E2C                      cls     =$8E3A      clslup2 =$8E3E
   cleos   =$8E67      cleol2  =$8E73      TopBox  =$8E84      doEdge  =$8EB1
   doILine =$8ECA      makebase=$8ED7      plotchr =$8EE7      plotchr1=$8F03
   cout    =$8F08      cout2   =$8F28      cout3   =$8F2C      cout4   =$8F36
   cout5   =$8F3C      LineAddress=$8F4F                       re_mdm  =$8F7F
   re_mdmx =$8F8E      re_mdm0 =$8F95      getinit =$919B      getinit1=$9317
   getans  =$93D3      getdcd  =$9477      getslot =$9506      movepage=$96E1
   copyans =$972F      copyinit=$973C      devtable=$974F      strtable=$9769
   atastr  =$9787      re_vid  =$978C      re_clk  =$9925      re_pr   =$9BAD
   doinit  =$9DB6      init1d  =$9E59      init2   =$9E67      init2a  =$9EFB
   init3   =$9F36      init3a  =$9FC0      init4   =$A0D9      einit0  =$A0DE
   einit1  =$A0E1      einit2  =$A0EB      einit3  =$A0F5      setxfer =$A538
   hard2   =$A539      noxfer  =$A667      curvol  =$A751      volumes =$A752
   make1   =$A753      make1a  =$A7D2      make2   =$A851      make3   =$A8EF
   make4   =$A95E      make5   =$A9CE      make7   =$AA3C      make8   =$AAB5
   gname2  =$AB5E      access  =$AB67      slot    =$AB6E      drive   =$AB6F
   dtanam1 =$AB70      user    =$AB76      usrpass =$ABBC      usrtele =$ABC4
   datadef =$ABF5      xdata   =$AC94      stacacc =$AD06      disk1   =$AD21
   disk2   =$AD2E      disk3   =$AD3D      disk4   =$AD48      list1   =$AD53
   list1a  =$AD68      list2   =$ADCB      list3   =$AF25      list4   =$AF33
   list5   =$AF4B      list7   =$AF4F      list8   =$AFA3      do_filt =$B052
   filt2   =$B073      filt3   =$B09D      filt4   =$B0B8      filt5   =$B0D1
   fl_del  =$B118      fl_del2 =$B166      fl_add  =$B173      fl_add2 =$B1AB
   fl_add4 =$B1F8      fl_add3 =$B1FB      fl_quit =$B20C      fl_save =$B243
   fndword =$B267      fndwd1  =$B26D      fndwd2  =$B279      fndwd4  =$B280
   do_quit =$B282      p_quit  =$B293      re_stor =$B29A      stor2   =$B2AB
   stor3   =$B2B0      stor4   =$B2D2      stor5   =$B304      stor6   =$B311
   stor7   =$B346      stor7f  =$B385      stor7a  =$B3C1      stor8   =$B3C4
   stor8a  =$B3C8      stor9a  =$B3E0      stor9   =$B3E3      stor9b  =$B427
   stor9c  =$B42B      stor9d  =$B454      stor9e  =$B4E8      finddrv =$B4F2
   shwpfx  =$B500      prdrv2  =$B51C      prdrv3  =$B52B      mli     =$BF00
   page1   =$C054   

